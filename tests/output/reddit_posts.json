[
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "",
        "author_fullname": "t2_gxesw7ji",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Is Your SQL ready for Prod",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": 133,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hd3vgd",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.98,
        "author_flair_background_color": null,
        "ups": 610,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": true,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Meme",
        "can_mod_post": false,
        "score": 610,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "https://b.thumbs.redditmedia.com/UkABcInNpjXbVxGGC-axS-HMEtDddVAFWTfFvOhV22k.jpg",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "image",
        "content_categories": null,
        "is_self": false,
        "subreddit_type": "public",
        "created": 1734062495.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "i.redd.it",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://i.redd.it/vnbpn9rzfj6e1.png",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
            "images": [
                {
                    "source": {
                        "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?auto=webp&amp;s=46a53a3e0a5208da203d83aaae6585d3d91763f1",
                        "width": 1588,
                        "height": 1516
                    },
                    "resolutions": [
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=2c60c185a727045032a191a9f9d60233c7a8bb05",
                            "width": 108,
                            "height": 103
                        },
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=034e295afed29a6538ecb569388f713c722c3428",
                            "width": 216,
                            "height": 206
                        },
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=82dbe5620216dc1c91c0d4ea952ac39e05eb271c",
                            "width": 320,
                            "height": 305
                        },
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=67397e2308652adc70c09b42d22b7c0fbd048f06",
                            "width": 640,
                            "height": 610
                        },
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=c96d16fee2d22ebdb98d8fcaf4cb19baf77b515f",
                            "width": 960,
                            "height": 916
                        },
                        {
                            "url": "https://preview.redd.it/vnbpn9rzfj6e1.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a789fbed0e354eb655b3b25b09e060efd67e75c5",
                            "width": 1080,
                            "height": 1031
                        }
                    ],
                    "variants": {},
                    "id": "6Jr2vjpG8zQWRmb9vsaThxgQ5QiNnedgU8mAzxmGiGo"
                }
            ],
            "enabled": true
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "dc9742bc-a7de-11eb-a2e7-0e0348c8a4c1",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "mod_note": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "num_reports": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff66ac",
        "id": "1hd3vgd",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Adela_freedom",
        "discussion_type": null,
        "num_comments": 17,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hd3vgd/is_your_sql_ready_for_prod/",
        "stickied": false,
        "url": "https://i.redd.it/vnbpn9rzfj6e1.png",
        "subreddit_subscribers": 243450,
        "created_utc": 1734062495.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Remember, no need to push to prod if youre already in prod. ![gif](giphy|d3mlE7uhX8KFgEmY)\n>Product requests staging env >Product doesn't understand difference between staging and prod >Team lead requests we just remove staging and push everything to prod >I am the gif now.\nThis is powerful mindset\nIs your prod ready for my sql\nYou win \nOddly accurate since a newly updated pipeline broke this morning due to some stray SQL\nThis is so scary. I knew a guy who told me about a bank that had its staff arrested because they did a bad query and hung some vital bank related dB. This was in the late 90s early 00'. Shit was wild west back then.\n[removed]\nLol you think we have a DBA\nSorry bro I don't speak EXPLAIN ANALYZE Language\nThis is the excuse of our analyst team... And why their code must pass through data engineering for rewrite / optimization.\nWe went from three analysts to 11 in six weeks. A couple of them are good, but send help please.\nWhat's DBA? /s (obviously)\nI cant trust anyone with hands that small.\nHahahha\n*Lol there's this new thing* *Called db bouncer on a read* *Only replica* \\- thinkingatoms --- ^(I detect haikus. And sometimes, successfully.) ^[Learn&#32;more&#32;about&#32;me.](https://www.reddit.com/r/haikusbot/) ^(Opt out of replies: \"haikusbot opt out\" | Delete my comment: \"haikusbot delete\")\nSounds like SQL written by a \"Full Stack Developer*."
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "",
        "author_fullname": "t2_yeda6sl",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "7 Projects to Master Data Engineering",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": 84,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hbsjl5",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.98,
        "author_flair_background_color": null,
        "ups": 530,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Career",
        "can_mod_post": false,
        "score": 530,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "https://b.thumbs.redditmedia.com/M5nGksfEZarzhzqd6WsAZEEA51iJ8aezuCXqLqn9qVY.jpg",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "link",
        "content_categories": null,
        "is_self": false,
        "subreddit_type": "public",
        "created": 1733920758.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "kdnuggets.com",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://www.kdnuggets.com/7-projects-master-data-engineering",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
            "images": [
                {
                    "source": {
                        "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?auto=webp&amp;s=e8b4d0da161bf5f028307d9bd6c5ac5bd9b59bfc",
                        "width": 1200,
                        "height": 720
                    },
                    "resolutions": [
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7de001b5c3df84d9fddfb4577f7e78fdba22f3e6",
                            "width": 108,
                            "height": 64
                        },
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=e52fc471ef1a9daad900f3fe87576161e93cee1a",
                            "width": 216,
                            "height": 129
                        },
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ca3e6c37bb8708469019214639a4d06f05bc1db7",
                            "width": 320,
                            "height": 192
                        },
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5a664ed771418274f21934846b6db484a68696a3",
                            "width": 640,
                            "height": 384
                        },
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=5fb06f02db2321187a17af5b6abfcaed2e001158",
                            "width": 960,
                            "height": 576
                        },
                        {
                            "url": "https://external-preview.redd.it/FcaC_ZU7VdtS543kF-rCVwmMvg_HzlVc80FMhEBBmtY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=643f2628545ba0a1f42ba3a1a06a926757d9bd65",
                            "width": 1080,
                            "height": 648
                        }
                    ],
                    "variants": {},
                    "id": "O1HYIj2C5FLMdk30LU4fySjAhTYY5mdYmC6a30y_S2s"
                }
            ],
            "enabled": false
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "069dd614-a7dc-11eb-8e48-0e90f49436a3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "mod_note": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "num_reports": null,
        "removal_reason": null,
        "link_flair_background_color": "#349e48",
        "id": "1hbsjl5",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "kingabzpro",
        "discussion_type": null,
        "num_comments": 46,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hbsjl5/7_projects_to_master_data_engineering/",
        "stickied": false,
        "url": "https://www.kdnuggets.com/7-projects-master-data-engineering",
        "subreddit_subscribers": 243450,
        "created_utc": 1733920758.0,
        "num_crossposts": 1,
        "media": null,
        "is_video": false,
        "comments": "This is exactly what I was looking for, thank you!\nThank you for reading it.\nSomehow chrome did a good job to suggest this article to me. I have this open in my browser for about a week but did not even go through it. DE veterans over here, do you think all of these are bad, good or way too much for beginners?\nRead somewhere, getting started before you are ready is important. Dont overthink if it is good or bad, just get started. There is no one size fits all solution for learning, the curve will be different for everyone. Get started and you will figure it out for your self.\nTrue that. Hopefully I'll be able to get something during the holiday period. \nCan you guide me please, I have basic SQL and python. Should I focus more on advanced python and sql or I can get started with these projects and learn along the way ?\nI am getting really tired of these types of posts. No, you won't master data engineering with this. This site is a tool vendor's wet dream. You will **start** to learn \"Python, SQL, Kafka, Spark Streaming, dbt, Docker, Airflow, Terraform, and cloud services\". There is so much more to data engineering than the tools.\nCo signed. In fact, the real value of this post is to take the datasets involved and do your own thing with it, completely ignoring the stack someone else picked.\nHey fellow redditor! I often come across these posts and always wonder what is meant by them. I think the tools available / the tools you pick strongly affect your space of what you can do. So im really curious on what you mean that there is more to that. Thanks in advance!\nThe most desirable data engineers are not ones that have learned a particular set of tools. It's the ones who have intuition, can think critically, and ultimately solve problems with whatever tools are at their disposal. Focus on concepts and patterns. Not tools.\nThis. In spades. Absolutely. Learning just the tools turns you into a one trick pony.\nThis question gets asked a lot. You may find this [previous post](https://www.reddit.com/r/dataengineering/comments/1gfgl02/comment/lujz7bg/) helpful.\nThank fuck somebody else said this. I thought I was going insane thinking this post was a steaming pile of shit. Maybe not steaming as it suggests this is fresh.\nNo, it's steaming.\nI read and agree with your post. Apart from SQL, data modeling is a critical skill to have. In my current project, 3 of us have to do data exploration of 5-7 applications which are around 30-40 yrs old and need to build new logical data model which will help the company to create brand new operational data base and build one single unified application for the business domain. There's way too much noise online and everywhere about AI hype, far too many tools evolving at rapid pace in data engineering space, yet they're all based on SQL. Ten years ago it was Hadoop and Hive, in last few years and now it's all Databricks and snowflake hype, followed by dbt, airflow and other stuff. Few years later, it will be some other tools. It's annoying to constantly have to keep up otherwise you don't get the job. We're still trying to catch up with data from 20 years ago. I think all the data should be released back to public and then we don't need all these fancy tools at all and not many engineers to write crappy code using fancy tools. Problem solved!!! Data is so rapidly changing that data from five years ago may no longer be valid in the current year and yet we keep shoving all that data into our databases.\nSince what should people who want to do this is a common question, I point them to a [previous post](https://www.reddit.com/r/dataengineering/comments/1gfgl02/comment/lujz7bg/). Yes, I am lazy.\nNah, you're right at pointing them to your post.\nWow, it's good to see comments like these. When I saw the wiki for this sub, it suggested learning concepts, but not necessarily specific languages other than SQL for querying and looking at aggregates, or maybe Python for scripting knowledge. I will try the projects suggested just to get practice implementing, but I'll be paying stronger attention to concepts being expressed, questioning the selection of tools being used, while keeping an eye on the fundamentals of SQL, relational DB creation, and DW, slowly trying to grasp how to build, interact with, or optimize them. It might be harder to take in SCD unless I introduce my own new requirements over time. I remember seeing free lecture PDFs from Stanford or MIT that cover these things you mention with simple examples (maybe it was more SQL focused at first with views, window functions, subqueries, and also SCD 1 & 2), I hope that is enough to help me get comfortable with these topics for future entry level job searching.\nThank you, youre a real one\nThank you. It means alot.\n\nThank you\nComment for later\nUppies.\nWow looking for this\nThank you.\nI can't thank you enough for this. Was really looking for something like this. There's very few sources like this I believe for DE for some reason. At atleast I am not able to find any.\nI write alot about DE on DataCamp and KDnuggets.\nWhat a gem!\nThank you.\nThank you Op\nYou are welcome.\nThis is awesome, already started the boot camp. Thanks a lot.\nCheck out the new cohort. They have introduced some new tools.\nWhats your experience on the boot camp?\nIt's ok, the instructor is a little bit fast. Apparently only 100ish people got the certificate of completion out of 1000+ who started so I don't know if it's hard or there's something else there.\nYou mean data engineering zoom camp, right?\nI'll give this a look later when i have some time. Thanks!\nUnfortunately, most of these projects aren't very ambitious or interesting. I'm looking for project ideas for my CV, but that's clearly not what's going to make the difference.\nShould I start with DA, then go for DE or should I go straight to DE?\nDepends on how much you already know, coming out fresh some basic conceptual foundation of data will go along way before DE.\nI recently joined my first organisation and boom, now I'm a DE. I know SQL ( learning and practicing the advanced concepts) Learning syntax of python and it's libraries ( already have good understanding of data structures but in Java) Any other suggestions? I am also reading the fundamental of DE\nYou may find this [previous post](https://www.reddit.com/r/dataengineering/comments/1gfgl02/comment/lujz7bg/) helpful.\nIncredible, thanks for sharing!\nupdoot for you!! This needs to be pinned as learrning material for newbies\nthis stuff is actually an anti-pattern for learning to be a DE"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "\nI\u2019ve enrolled in a Python &amp; AI Fundamentals course, even though I have no background in IT. My only experience has been in customer service, and I have a significant gap in my employment history. I\u2019m feeling uncertain about this decision, but I know that starting somewhere is the only way to find out if this path is right for me. I can\u2019t afford to go back to school due to financial constraints and my family responsibilities, so this feels like my best option right now. I\u2019m just hoping I\u2019ll be able to make it work. Anyone can share their experience or any advice? Please helpp, really appreciate it! ",
        "author_fullname": "t2_d3cb6h4qp",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Is it too late for me as 32 years old female with completely zero background jump into data engineering?",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hnuomf",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.85,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 361,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Help",
        "can_mod_post": false,
        "score": 361,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735349789.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019ve enrolled in a Python &amp;amp; AI Fundamentals course, even though I have no background in IT. My only experience has been in customer service, and I have a significant gap in my employment history. I\u2019m feeling uncertain about this decision, but I know that starting somewhere is the only way to find out if this path is right for me. I can\u2019t afford to go back to school due to financial constraints and my family responsibilities, so this feels like my best option right now. I\u2019m just hoping I\u2019ll be able to make it work. Anyone can share their experience or any advice? Please helpp, really appreciate it! &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "2ca94cd6-ac27-11eb-a8eb-0e7f457f5bd3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ea0027",
        "id": "1hnuomf",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Admirable_Spite4940",
        "discussion_type": null,
        "num_comments": 232,
        "send_replies": false,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hnuomf/is_it_too_late_for_me_as_32_years_old_female_with/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hnuomf/is_it_too_late_for_me_as_32_years_old_female_with/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735349789.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "In a flooded entry-level market with an enormous amount of hype, I believe the best way to transition into this field is internally from another role at the same company. That's the nice thing about data: there is a clear on-ramp which doesn't require a degree at the outset, *and* virtually every company has a need for data literacy. You'll eventually be capped on the technical side without a specialized CS education, but six figures is definitely achievable with Python, SQL, cloud knowledge, and sales/consulting knowledge gained through experience. The main problem for someone without experience is demonstrating enough competence in these areas to start and to set them apart from other candidates. The easiest way for you to do this right now is to work with/for people who need people with data skills, gain their trust by building a working relationship with them, and take every opportunity to demonstrate that you have the skills they need \\*plus\\* the knowledge of their business processes. This will make you the no-brainer candidate for any new data role at the company. 1. Do you have a job now? 2. Could you leverage any connections to land a generic office job? Before learning Python & \"\"\"\"AI\"\"\"\" (whatever an online course could actually teach you in that...), my recommendation is the following: A.) Get an office job somewhere, if you don't currently have one. Ideally somewhere that has a tech department, but by no means is this necessary. Best to leverage social connections for this if you have a big gap in your resume B.) Learn Excel & PowerBI (or whichever dashboarding software the company uses). Literally every company needs people who are competent with spreadsheets and making dashboards, and you won't be competing with 1 bazillion CS grads for these positions and 10 bazillion bootcamp/certificate grads. If you like programming, there will inevitably be room to introduce Python both for automating workflows and potentially even ingestion into PowerBI. C.) Get a business analyst/data analyst position at that company. For this, SQL would probably more useful than Python, but Excel + PowerBI would probably be enough on its own. In the US, depending on what part of the country, this would already be a $70k+ salary job. At that point your foot is properly in the door and you can decide if data engineering is really the path for you, or perhaps get into the. business and management side of things. I hope this provides food for thought!\nI'm pretty blown away by what you've described here and the amazing advice you've given. It describes my exact path over the last 2 years that has eventually landed me in a DE role.\nLOL thank you for the kudos but I frankly think this is prevailing wisdom by most people in this subreddit. Glad it's worked for you! I did something roughly analogous to this but was much weirder. I was a de-facto data analyst and research assistant with a different job title, solely using R (common in public health). I decided against grad school but had a gap in my resume since I quit to take community college classes online full-time in preparation for that switch. I did a data engineering bootcamp instead, then got a highly-specific entry-level data engineer job with a company that appreciated the public health research I contributed to. The bootcamp option worked for me, but this was moreso because 1.) I got a job before the entry-level job market tanked entirely (this was early 2023) 2.) I did have some relevant experience already. I'd say the bootcamp path is now entirely dead and most people should just go the route I wrote up above. Although I do appreciate having my whole career be with programming and no no-code/low-code tools, as that's helpful for my eventual goal of being a SWE.\nYeah.. I actually started school about 4 years ago and am finishing my degree in SWE next semester. The schooling helped me build the skills needed to get an analyst role building PBI dashboards where I eventually realized I could do so much more with my SWE skills and pretty much created a role for myself. Next step probably is SWE.\nThere may be others who could have said what you did (i.e. the \"prevailing wisdom\"), but you took the time to empathise and write these things out, so give yourself credit for that :)\nCan you share which DE bootcamp?\nAdditionally, I would have been better served financially. I think if I had just tried to get a data analyst job and then after a year pivot into engineering. That's in a vacuum... Because the market for juniors went really south shortly after the time I got my job. So I don't necessarily regret it for my personal experience, but it was super specific.\nI'd rather not for two reasons: it's small and now defunct so I'd be doxxing myself as what I think was the sole successful engineer from that program; I don't want to encourage people to get into boot camps. That was a very particular circumstance where I was setting myself up for a pause in my career due to grad school, decided against it, and then filled it with a boot camp. So it worked because I had some savings and the timing was right. Sorry if that's too much information but if you want to know truly you can send me a pm\nWow, we seem to have some similarities in our path (I come from a public health background too, strong R background). I've been working in various data analytics goals till I came into DE with the eventual hopes of transitioning into SWE.\nThats what I love about the community of these communities. This would be such a weird thing to come across from my daily Starbucks commute but you hear it here and its fun to know there are others out there who are so alike in what feels like such a niche career path.\nSame.\nListen to this guy, do not listen to anyone on linkedin selling courses. Get domain knowledge, be an analyst, and then switch to DE.\nno stfu OP needs to take my dagster course\nI'll buy your course on how to not buy courses\nExactly this. Leverage whatever industry you're in to use that knowledge to pivot into a role you're interested in.\nPretty much the way I got into DE. came from a Bootcamp for DS, landed a job as Excel/powerbi-monkey in analytics. Now am a DS/DE consultant. That little bit of domain knowledge and business insight as analyst gave me a huge bump in job chances and genuine business competence even though I hated relying nearly entirely on poberbi DAX and SQL.\nBootcamp solidarity. I was fortunate that I completely leapfrogged the lowcode and no code tools and credit that in part to my bootcamp, but also the very idiosyncratic job I got (can't give full details on Reddit, but it was deliberately seeking people who were new to tech industry to build a local market of tech talent).\nHonestly speaking, you are still not a Data Engineer.\nalright. I'll let the team of people building ETL pipelines in Azure, which I lead know, that I'm not a Data engineer. I hope they won't be too shocked.\nThe way you mentioned above, it didn't appeal so. Secondly, I saw someone mention about the software engineering aspects of data that include the system design and ELT or ETL of data is actually Data Engineering. Just using tools on Azure shows your hands-on ability to use the tools, but not the engineering aspect.\nThis is how I did it. I was a real estate agent > capital markets analyst at a mortgage company.. I had access to sql and leaders that gave me enough room to try new things. I looked for the most valuable things I could automate or build better reporting on. Eventually I transitioned to our data engineering / analytics team as a BI analyst. I ended up doing more sql/ back end work, which I enjoy more I agree that SQL and Power BI / excel would be more valuable for breaking in to the industry. I started with a python course and it took a LONG time to fill all of the knowledge gaps.. excel and SQL would be the fastest value adds for your career. Follow this up with power bi and python. This has been a 6-7 year journey for me with the last 3.5 years in an IT role. I would not wait for the role to start learning, keep taking the classes at home. Going back to college may not be a great spend of your money and time anyway. A $20 course or free YouTube courses will teach you everything you need to know. $20 for the convenience of extremely tailored content.\nGreat response! Thanks for sharing.\nLove that you put a bunch of quotes around AI (not sarcasm). I would say, though, that there are some online courses out there that can give you what you need to work with ML/DL models *provided* you have the foundational math knowledge (which I would say is basically just a bit of calculus, multivariable calculus, and linear algebra along with probability theory) to property digest the information and actually use it.\nI've done all the subjects minus the probability theory and did well but would need a major refresher in multi variable. Even that though is far more background than a career changer with none whatsoever. And that's who's taking this courses by and large! Unfortunately hiring managers also know that so the course label is not really going to do much for you, if anything positive at all. Good for someone in an adjacent role to have though. Like a data engineer maybe...hmm.\nYes I agree. I think the only way is if you can show a GitHub/final product that uses ML/DL models. I dont think anyone should be taking the courses to show that they completed them. It should just be to gain knowledge and then demonstrate it somehow.\nThat first sentence is *chef's kiss*. So is the rest, but that one very clearly summarized your entire point.\nThank you. In line with the sales skills I mentioned at some point in that comment, I'd probably remove the \"I believe\" and assert it without reservation.\n1000% agree with everything youve said here! Just want to add I did a write up on the Power BI sub that may be helpful. If you check my profile or the sub (August, 2022~) youll find it.\nBefore learning python get a job. Lol\nIt unironically works like that! Get a job with people who could give you the job you want. That's my actual advice, not \"Chipotle's hiring down the street!\"\nIve been in IT but since I migrated to US its all Chipotle for me. Cannot land a job. What should I do?\nGotta network to the stepping stone desk job, that's my advice. Leverage your existing local network. If you don't have one yet, build it any way you can. I don't recommend cold calling LinkedIn people to get that first job, just build out a group of people you meet and are friends with in person. Edit: how much IT experience do you have? Is it worth going the certified network engineer route? That line of work cares much more about certs to get your foot in the foot.\n> You'll eventually be capped on the technical side without a specialized CS education Any advice some someone at the data analyst stage of this transition? I collected domain knowledge and have worked myself into an analyst role with the goal of DE soon. What gaps do you think are worth addressing from a CS perspective? And how would you recommend doing it?\nWhen I say \"eventually\" I meant itd prevent you from being an engineer at a FAANG tier company, tech startup, or perhaps a senior level engineer at a large enterprise, something like that. For most people I would say that by the time you advance technically to where you are missing the CS fundamentals, you could pivot to management or a sales focused position and make that your progression. Realistically though I don't think a CS degree comes into play for average DE jobs -- most are based primarily on isolated scripts and knowledge of cloud platforms. Your day job doesn't strictly require knowing how computers work on a low level, or complex networking, or large scale software architecture (You could say this for much of web dev, too, tbh). That might piss some people off here but whatever. There are skills which do take time to master (data architectures, data modeling) but that's not directly helped by a CS degree. There are also the SWE tools of the trade (git, Linux, testing, agile dev practices, etc) but again those aren't actual CS. The most useful deep dives to actually know for an average DE are going to be in how DBMS work on a technical level and the fundamentals of distributed compute so you can tune performance. I don't know how much a CS degree goes into these topics. Maybe you'll hit a point where your company won't promote you without a degree but I think that's less reflective of what's required in the role. If you like the space in general or just want the money my advice is don't stress as much about the degree once you get the title. Get into consulting and become an architect (where sales skills plus certifications and cloud knowledge matter much more than a degree).\nFWIW, I think their comment is off-base. I can't from a Poli sci and MBA background, currently doing DE\nIf by off base you mean \"not universal\" then of course! You have a BA and an MBA, presumably you also had a business job to begin with? You're not the target audience of my comment and are in a very different boat than OP. I've told another guy in this thread with experience in he has no reason to just get a generic office job and pivot internally and gave him different advice. Please do not take anything I said as universal, it's specifically for people with little to no applicable experience and a non-elite undergraduate education *in the current job market*. EDIT: Oh if you meant the technical cap comment, if you read my reply to him you'll see what I meant. For the majority of DE jobs no it won't matter because your progression will be about leadership, not some wicked performance tuning stuff or working cross team with other software teams\nI will add another thing, just being willing to learn about data is in itself an important value you are adding today. The number of data-adjecent roles have increased significantly as data roles increased. The number of data-literate people outside of data roles on the other hand seems to have increased much less.\nYes for sure. Becoming a demonstrated data literate person will help your resume if you want a different role after besides analyst or then engineer.\nWow! That's some solid plan. Thanks!\nThis is a great response and deserves a well-earned upvote. Not sure what this means, though: >You'll eventually be capped on the technical side without a specialized CS education, but six figures is definitely achievable with Python, SQL, cloud knowledge, and sales/consulting knowledge gained through experience.\nYou're not going to be a lead de at FAANG without CS education. If there's an exception I'd like to see it. I bet it's rare enough to be fine as a generalization. You can absolutely get a slick gig as a solutions architect making 200k after 8 YOE with cloud and consulting/sales chops. Actual engineer vs salesperson/product consultant.\nThanks for this insight!\nwhat type of office job do you suggest? like what would the position title be?\nAdministrative Assistant Office Coordinator Customer Service Representative Data Entry Clerk Receptionist Executive Assistant Etc. I'm not really even advocating applying online by job title though I'm suggesting people ask friends and family and make new friends + acquaintances in real life. Be completely flexible on what they bring you, the company matters more than the title.\nposition titles are all over the place for most entry level office gigs. Just find a job where you have a desk and computer. Extra points if the job has Data or Analyst somewhere in the title, but thats less important than just learning how corporate america works. (assuming youre a transitioner with no real experience yet) from there, do a good job and meet as many people as you can. Dont be the guy whos only around to network, but also dont be afraid to ask questions. Tech industry moves fast and everyone is always learning something new, so the quicker you get over the fear of looking dumb, the better.\nyes, correct. Market is terrible now.\nFor juniors I would say yes. Otherwise I don't know because there's no clear data and I just have my anecdotes.I'm in the process of interviews and job switching right now. I have not applied to a single online job where I did not get a referral first - that's probably distinct from the firehouse approach people take - and I have 3-4 promising leads. One is clearly very desperate to hire!\nWell very said.\nCan I ask a follow up- I came from a non cs degree and now work on a quant macro modeling team. I learned py,sql,excel vba, power bi, and stats on my own. Heavy use of big data libs and applying ml technique etc. Im 25 and did this over the course of 2.5 years since I came into my role. You mention capped out without a specialized cs degree. Why? (In all seriousness). There are some things I have to learn on the fly and dont understand as quick as others, but is this always the standard? Would it be worthwhile to go get a masters in de/data science if my intent is to work in big data?\nI debated even mentioning that because I think people would take it the wrong way. Average DE probably doesn't need to worry. You and I won't be building the next Apache Datafusion query engine or leading a team at Airbnb. That's the level at which I meant you'd definitely need a CS education. Beyond that I think the barrier is moreso HR and not real knowledge.\nThis is what I did!\nAs someone who did exactly this, this is terrific advice\nThis is excellent advice, you could always pivot to project management or tech PM if you have fundamentals and can talk to (deal with) business and tech peoples. Data Analyst is a strong start.\nThis is the answer\nIf I have a bachelors in data analytics, dont I just search directly for a data position, the other way around sounds bad as fuck \nWell maybe it depends on your local market, how much experience you have, how good your school was. I think you could maybe skip the random job step but dashboard + excel is still likelier to get you an entry level job. I also still suggest networking. If you're fresh out of school, and working a random office job for one year as your first job sounds \"bad as fuck...\" I've got to be real it's really not a huge deal if you're young. You have time.\nI'm 33 years old and have been pursuing other educational paths before this. I have about 5-6 years of work experience. Also, I'm from Denmark, where the job market is significantly better compared to the US, imo. (You sound like you're from the US).\nI am from the US yes. My post is more for people without relevant experience or a specific college degree in the us market. the advice to focus on networking still applies to you but idk about the rest\nI would certainly recommend also using libgen to access some 0r4illy books on the matter. Thats free quality education my friend!\nI know this is a bit late but this is the exact path I took! (landed a role 6 months ago). It was a long road but definitely a viable one.\nI started as a Data Analyst at 42 but that was after a few years in GIS and no degree. Then after many years became a Data Engineer. That was after DE was actually a thing. Just get a foothold in a business in IT as whatever and angle your way towards DE work if that's what you want to do. We hired a female with a community college degree as a DE and we're completely dependent on her now. She came with a little work experience but younger than you.\nNice! Im in GIS making the transition right now (or trying to).\nI'm a pretty senior figure in GIS and some related areas in my part of the country, and I'm looking at how to increase DE in our GIS operations. Our organisation is quite far behind, and despite senior leadership wanting change, massively behind due to their own policies.\nGotcha. Seems like Ive shown my leadership the light and Im getting promoted to GIS Developer. Ill have free reign and I plan to just make it a DE role.\nKeep at it. Another colleague and I are a year or so away from retirement and that protege will become top dog with top pay way sooner than we did.\nThats great to hear.\nNice, I like GIS focused analysis (transport studies etc) and worked in it briefly. Its fun for me. But it pays kind of crap with not much opportunity where I live. So I work in data engineering and architecture in a bank. Which is boring but it pays the bills.\nI was glad to move into Data Analyst. I didn't see a lot of up side in GIS either. DE pulls you in many directions. I miss the days of mastering one or two applications rather than having to constantly learn and support new ones for every little task.\nI have kind of the opposite problem at the moment. Getting funding approval for anything is like getting blood from a stone. So I have to abuse open source tools and basically code all of my own tools for everything else then write hundreds of pages of documentation no one will ever read. Bit of a waste of time really.\nOuch. You're probably much more resourceful than I am. I actually don't mind documenting. I know it's rarely read but it's really annoying when people don't document and I have to fix their process.\nThe realistic answer: While it's not too late to get into Data Engineering it is very likely that you won't be getting any entry level jobs at ALL by just doing an online courses. There is something people don't seem to understand. Just because a career has entry level positions does NOT mean the job is \"entry level\" at all (hope that makes sense). My recommendation: Go for Data Analytics instead. If you're dedicated enough in 3-6 months you should be job ready. To get you started watch this [Free Bootcamp](https://www.youtube.com/watch?v=wQQR60KtnFY). After you've landed a job you can work on upskilling to become a data engineer. Plenty of Data Engineers started as Analysts first.\nYeah especially with how the tech market is right now. It really couldnt be a worse time to try and jump on the ship. If your requirements dont match perfectly you dont even have a chance to be part of the lottery slot machine of even trying to get your resume in the hands of the hiring managers. Its a bloodbath right now.\nWith a degree in Engineering(ICT), diploma in Data Science and projects, what would be your recommendation?\nI personally don't think it's too late for anyone, with any employment history. That's not to say it won't be difficult! But I've found that working in a field you like is awesome, so if you like it, go for it.\nGood point! This is probably the most important thing you need to sell to future employers: are you pursuing this career because you heard of the great chances and jumped the bandwagon, or are you here because you're genuinely enjoying this kind of work? People who come into the data field solely for the money won't be happy and will have a hard time fooling an employer into hiring them. I've rejected too many CVs of people who don't even try hiding the fact that they did the absolute bare minimum requirement to call themselves \"data-anything\" before applying. If they ever find themselves in interviews, they often fail to give a single reason as to what they are passionate about in this line of work. You're competing with people who genuinely like their jobs. Bear that in mind.\nI dont agree with the majority of these comments. A lot of people are setting you up for false hope here. The best data engineering roles are essentially a subset of software engineering, the way that DevOps has essentially become as well. If you follow anything about our industry, software engineers are in far more supply than demand at the moment. Several hundred to thousands are looking for work, including desperate H1B visa holders with lower standards who are desperate for employment sponsors because otherwise they will have to go back to India Dont let positive Reddit vibes fool you; there is a very huge brick wall youre up against if starting from absolutely 0 technical skills or experience, it means you not only dont understand data engineering but no IT experience means to me you dont know anything about data, distributed systems, kubernetes, how data or software in general is used in the business, how data has transformed into real time insights for decision makers, how the cloud works, ETL or ELT-and 100 other things not related to the software engineering / Java / scala/ Python portion of data engineering itself with Spark or Databricks snowflake etc etc What Ive described here is whats necessary to be proficient and well compensated, if those are your goals Maybe look into roles with a lower barrier to entry like data analyst, Helpdesk, cloud support engineer, etc - youre inquiring about brain surgery and havent entered med school yet if youd like an analogy, and no amount of Reddit fluff will change that\nThis !  100% This. I find it very surprising that, these days, so many experienced mid-level data scientists and data engineers *still* think that their roles are completely separate from software engineering! Much of what Im saying here are generalisations of course, but its high time that data professionals, as I prefer to describe myself and others in similar roles, realise that they ARE software engineers!! We are designing and building software applications. Its just that our applications are data-oriented. Whether it be data architecture and data modelling, a multitude of ETL/ELT pipelines, designing (and using) data lakes and data warehouses, building and deploying machine learning models, and setting up (and using) the necessary monitoring tools, these are all software products and so the tools and best practices of software engineering - design patterns and source control, proper peer code reviews for example- should be adopted. Other related skills include those that could be described as DevOps - such as provisioning cloud infrastructure using infrastructure as code. Obviously Im not saying that ALL these skills need to be learned, and different companies will have different ways of dealing with security issues, keeping developers and data scientists away from production etc, and those working in or close to the data science and analytics work will need maths and stats skills more than pipeline building, for example. So back to the OPs situation, becoming a data engineer with no tech background, I say: - Go for it !! But in order to manage expectations, I would highly recommend taking software engineering courses along with data engineering ones. - Learn about principles of SE such as SOLID design principles, the MERN and PERN stack, creating and using APIs, object-oriented design, functional programming, software architectures such as micro services. - Build some of your own projects. A good place to start IMO is with a personal website. Start simple- a static site hosted in the cloud (eg AWS S3 which will basically be free). Then make another version- with a backend database such as MySQL or MongoDB. Then another with NodeJS and a popular web framework like React. If you are rubbish at graphic design, like me, dont worry there are loads of free tools that can help with the basic UI/UX. - Host your work on GitHub where people can see what you are capable of, and adopt modern SE workflows such as CI/CD using GitHub Actions. Go beyond the basics of git/github and adopt the practices used by teams working on the same project, such as branching and tagging, and doing pull requests, code reviews of your own code and merging.\nTruth. Never seen a junior nor entry level DE\nIt's not too late! Just be aware that it will be a long path of learning, and you will likely face struggles getting your first job (any tech job). Regardless, the skills you learn today will really set yourself up for future success. You only benefit by doing this.\nAgree!\nNot late, a data analytics degree would be the faster way to get into the data world. Then you can jump into DE\nIts not too late at all. Your starting point is rough, but your age isnt an issue. Development work as a whole is going to be really hard without a degree or experience right now, and there's no real hope for it to change back any time soon. Learning coding by itself is a great skill and can be used to help automate and accelerate any desk job, so learning it isn't a waste at all. Data Engineering itself is generally not a junior role, but there are some exceptions. Those exceptions are going to be for CS grads. So, going directly from your current situation to data engineer is wildly unlikely when most roles aren't even available to new CS grads. My personal suggestion to you is to figure out a way to finish undergrad. WGU is a cost-effective way to get a CS degree, so that could be an option you haven't considered yet. They have a sub for the program even if you search for it. There's a ton of people who make that program as cheap as they possibly can. Don't forget to look into scholarships as well.\nThank you for your insight & suggestions!\nNot too late. It will probably be hard to go straight into a DE role without experience but you may have an easier time going into a Data Analyst or Business Intelligence as a stepping stone\nno, I did it at 40.\nOhhh thank you!\nIm in the same boat. Im starting out at 40 and thought I was too late. Thanks for this.\nIt's less about age or gender than timing. It's a bad time for anyone in IT unless you came from a prestigious school and bagged multiple good interns. I think the best course is to find as many connections as you can, beg them as much as you can, and jump into something remotely related to the field. IT helpdesk, Data analyst, Business analyst, whatever, anything that can lead to DE in a few hops is good.\nYou are not late. The only question I have is how much stamina you got. Here is probably what you will need to learn 1. Python OOPS, Solid Principles 2. Design patterns in python 3. ISLR 4. Big Data course with Hadoop, Spark 5. AWS developer course 6. Airflow course 7. Git 8. Docker and Kubernetes 9. CI CD 10. ML Engineering Deployment Failures I know are people who do very little. Its about showing up daily for a couple of years till you are good in everything thats needed. I know list of things is long but it is what it is. All the best!\nWhat about SQL? For what it's worth, and to make sure people aren't misguided... The associate level (not junior, but one step above) data engineers at my last two companies didn't know any of these 10 things when they started on our teams.\nVery important!\n> 8. Docker and Kubernetes What exactly does \"know Kubernetes\" mean in this context? K8s is a monster, but how or what do you need to know for it to be enough in DE?\nYes, it is a monster. One would start with pods, services and deployments. Then work their way up to monitoring, batch jobs, permissions, etc.\nNope. Don't listen to the negative gatekeeping here.\nAside from any specific career advice. If you're 32, and the average retirement is 62, you have just under how long you've been on this earth to keep honing your skills and experience. I think you'll manage just fine if you start now.\nI hadn't seen it this way!\nDefinitely too late. Human life expectancy is 33. You should be preparing your funeral arrangements, not learning new skills. Seriously though, you can retrain in pretty much anything at any time in your life. Only you know whether it's worth investing the time in a new skill set. If you enjoy it and can find the time to study and practice, work towards your first data engineering role. You likely have another 30 working years left in you. You could change careers again in 10 years if you really wanted.\nWhile formal training has its merits, demonstrating how you identified a problem, taught yourself the necessary data engineering skills, and successfully executed a solution will often hold more weight than a bootcamp. Even if this doesn't directly lead to a new opportunity within your current organization, many other employers will be impressed by your initiative and commitment to learning. Your ability to self-teach and persevere, along with overcoming failures on your path to success, will speaks volumes about your dedication and passion for continued growth. That difference between just be training *entry-level*, and having a real experience. Even if you don't have the title, can be a compelling selling point.\nI dont see how you would get hired, sorry. Also you need SQL. There are so many desperate f1 masters out there rn.\nLets wait and see\nThis journey will take years, not weeks or months, if you want to be a bonafide data engineer. Entry level competition is ridiculous at the moment, but not impossible. You can do it if youre willing to put in the substantial amount of time. If you cant commit that time, start by aiming lower. QA roles, data annotation, etc., to get a foot in the door.\nCan I dm you?\nnot too late, but you'll need to start somewhere that isn't data engineering. I came from 10+ years of software and it still took years and a complete reskill to even get my first interview. data analysis/business intelligence stuff is the closest thing to a direct entry point. https://roadmap.sh/data-analyst\nDo you really want to hear the truth?\nYes\nIf you have the personality for it I would backdoor your way into a company where you can make a real impact pitching them on a project where you can essentially get paid to learn independently. Lots of companies are trying to figure out what 2025 efforts theyll have related to gen ai and typically rag. You could pilot a project, youd be a low cost resource for them, its have to be a good fit. And I would lean hard on cursor or windsurf for writing python and skip learning syntax or coding altogether and instead cut a straight line to programming foundation theory, prompt engineering techniques, data preprocessing pipelines. Otherwise, get a degree in DS and knock on the front door.\nI have been practicing mock sql interviews with random people online. I came across this one lady who just nailed almost all sql questions in 30mins from easy to hard. I was impressed and honestly inspired when she told me that she is just started preparing recently. She was 30ish. And absolutely yes u should not think if its early or late. Work hard and reach out to people who can provide you with opportunities! Yes there are many leaders and managers who are willing to bet on you!\nThank you for your words though! Its gonna be a rough journey but better than not trying.\nAlso I see a lot of negative bs on your post. Please ignore them. Yes your profile cannot be great for a recruiter since u dont have a tech background. But hey, if u r proactive and sincere you will get it. Also u will find ways to get a job. Build projects, network with people, show your journey on LinkedIn etc..: go to GHC if you can afford. In the present economic conditions an application and recruiter screwing wont help you. Only network and also your network should trust your skills, so u should start and show your work and determination. Although you may or may not get the exact job u wanted but you will start somewhere. Just appreciate the approach and keep working hard! Also dont pay for any course everything is free online, people are ready to help. Your post here itself inspired me to write all these. Keep fighting, the road is hard but dont give up. Think about people like Elon who have achieved impossible things.\nWhat is GHC?\nGrace hopper conference\nIt's definitely not too late! Hell, I went from a Psychology PhD program to data scientist in my late 20s. There is some great advice in this thread, so I'll just say, you've got this!\n...\nIts going to be hard - but hard is often the only good way to do something worth your time. Dont study curriculums. Study job ads - what tools do people use. Learn those tools. Ask a friend if you can shadow them at work - especially easy when people are working remote. If you are interested in shadowing me at work, you can PM me. Im in cet timezone\nCommenting as someone that ended up with an ERP consulting job (data analysis/database management) with no experience: I got very lucky with contacts I made in my life who realized I could handle it. Six months into the job and still getting my ass kicked everyday by the sheer amount of stuff I don't know. Not a single course in the world could honestly prepare me for the job. On the job training turns your \"unknown unknowns\" into your \"known unknowns.\" Network, impress people, and weasel your way into any gig you can. TLDR: Taking a course is probably a great way to show you're interested but an actual job in the space is the best way to learn.\nNever too late. I (47m) was in music, which is what I went to school for. I learned computers on the side by myself. The biggest skills needed aren't even necessarily technical, it's all problem solving and the ability to learn new things.\nIm on the software side but I started at 36 with a background in non-tech non-business all together. Have a rather unusual very non-traditional background. Anyways the market is very different from where I started but its doable. My best luck was working for a consulting firm. I started at a local firm that was eventually bought by Accenture. It was unsexy and boring but it got my foot in the door and that was all I needed. I moved from there to a startup and kept moving up. Im now a staff engineer at a fintech company you probably use if youre issued equity by your employer. For now, Ive secured my place in this industry.\nIf you're also interested in this as a hobby, then by all means go for it. If this is solely to transition careers, it's going to be a steep uphill battle. Many workers with bachelor's and master's degrees in this field are struggling to find jobs currently and the future prospects for the time being are not looking great\nThe tech job market is difficult right now even for those with formal degrees. If you are in the US check out this link for free technology training https://perscholas.org\nIt's possible but it will be difficult. Your age is less of an issue than your lack of experience. Data engineering is not an entry-level job. Everyone on my team has at least a few years of experience with most having more. And the ones with less experience tend to have master's degrees. Also understand that some people were able to luck into data engineering jobs. They were hired during a very hot job market (e.g. in 2021) when companies could not hire workers fast enough. Those market conditions are unlikely to repeat themselves anytime soon. If you're good at networking that would be your best bet. You can try to find women focused IT jobs / groups, see if you can get on good terms with people in the group, and perhaps get offered a job by someone in the group.\nRather than learning and fortifying your fundamentals in AI. Learn Python. Master your SQL. Learn version control. Learn how data warehouses work. Learn what data modeling is.\nI was 36 when I transitioned into DE. It was for an internal project so I got promoted into it. After 2 years I went to a different company and kept learning and moving companies. I'm 50 now. So yeah it's possible to do, you're still young\nyour infos are a huge red flag for the recruiters tbh, maybe try something else like data analyst\nYou are competing with tens of thousands of Masters Graduates\nNo just do it. I knew a person who started a math PhD at 38 and did very well in data science following that\nDid you say female?\nNot too late at all! The tech industry actually values career changers because they bring unique perspectives and soft skills - your customer service background is a huge asset since data engineering often involves collaborating with stakeholders and understanding business needs. Start with Python basics, then gradually move into SQL, data structures, and ETL concepts. There are tons of free resources like freeCodeCamp, DataCamp (first chapters free), and YouTube channels like Alex The Analyst that can supplement your current course. For hands-on practice without spending money, grab some public datasets from Kaggle and try building small data pipelines. Once you've got the fundamentals down, consider picking up some cloud basics (AWS/Azure free tiers) and containerization (Docker). Build a portfolio on GitHub showcasing your progress - even simple projects count! The learning curve might feel steep at first, but breaking it down into small, manageable chunks makes it less overwhelming. Your age is actually a strength - many companies appreciate professionals who bring real-world experience and proven work ethic. Focus on learning the concepts thoroughly rather than racing through tutorials, and you'll be surprised how much you can accomplish in 6-12 months of consistent effort.\nNot at all. My former Manager started going to college for computer science in her early 40s.\nI think it will be hard if you are going into operations type of job. Said it might take you 2 years to finish the masters degree, you should focus additional work AI agent cannot do. Focus on security governance and accuracy framework on data analytics or AI agents. In 2025 and beyond, you will see more hallucinating outputs which will in turn for businesses wanting to put the guardrails in practices. So, do your degree but dont focus on the ops only. Find and select classes that has supervision function. And lastly this has nothing to do the age and female/male at all. It is never too late. Its not a DEI hire.\nIts a spectrum Its not a binary answer Is 32 old? Not one bit Depending on where youre currently at, will you have to take a slight pay cut? Potentially . Up to you if thats something you and you fam can do Ive seen 45 full transitioners get the job done Ive seen 22 year olds that couldnt handle the rejections and quit after 100 applications I would say you still have 70% chance of succeeding and breaking into a data role So not bad\nNo.\nLots of great advice....and a few sprinkles of doubt and negativity......but enough to give a a real view of the possibilities. Personally....SQL and Python are your must learn tools. SQL is the bread and butter, but Python is that one thing that could give you an advantage, especially when you can use it to solve complex issues you most grads would have never seen in school.\nIdk about the current market, but a couple years ago we hired a 55 year old man with zero professional experience in the field and he's been excellent\nIt's much easier to get a job in DA and then internally transfer to DE then to just get a DE job with no background. Of course this advice can be thrown out the window if you have some inside connection who is willing to take a chance on you\nIt would be, but since u are asking, that means this experience seems for u something new to your life. And this question is about do I need to bring something new to my life? - Definitely yes There no such thing as complicated, life in general is more complicated then any field you might step in. And since u are 32, with your interest, believe me or not- u can beat everybody.\nIf you feel that being female matters then yes its too late.\nMarket is oversaturated unfortunately\nI went back to school at 30. You have plenty of time to do whatever you want. Re: data analyst A subject matter expert (construction, baking, manufacturing, customer service, education etc.) trained to use data, will make a better analyst than a data person learning a market from scratch.\ni made a career switch from teaching to tech when i was 35. started as a support engineer, transitioned to an analyst role, and am now more heavily involved in the data engineering side of things--albeit within the same company. while i constantly feel like i don't know what i'm doing, the move is possible.\nIt is never too late\nNever to late but like others have said you got find a side way in to transition in and get experience\nHell no.\nIt's never too late! Good luck!\nIts never too late.\nNo.\nNope. You got this girl! Go for it!\nNah, never too late. Im 45, Im still learning.\nWhat kind of customer experience do you have? I would leverage that. One thing that is a valuable is understanding the customers needs, and also comfortable speaking to them. Dont know exactly what you'll land in data engineering, you might not be very client facing but it helps if you're capable. Enrolling in online courses is a start. If you can show any employer you're interested and driven to learn more, it helps. On interviews, I'd ask if they offer some form of educational assistance programs (might sound like: you stay w the company for about a year, you go back to school or enroll in some training that pertains to your job, they reimburse you after passing) Think of your value in terms of skill - what skills you have / what are you good at doing. Build upon them. The industry knowledge will come naturally. I started out in customer/help desk support. Before that, I had customer service experience from retail and restaurant jobs. I started applying at any and every job opening. I didn't land the position I wanted but it was a \"business anaylst\" that got my foot in the door. Even though it feels like the chances are slim, you want to find the ones looking for a you-type candidate\nHow many years of experience do you need to land a job in data engineering?\nI am 32 too. Being a 2022 A/C and Finance graduate, I made an equally painful and scary decision to jump to C Science,whilst having newborn twins at 30. Mind you, I was fresh out of college then and dimeless. What I encourage you is,it all goes down to what you really want. Whereas there are easier ways of getting into it, like assimilating your ambition with what you currently hold, a complete overhaul wouldn't be over reaching. When I made the decision, everyone told me what I was opting for was already flooded. Like the Bitcoin Story, 2018, the narrative was Run. 6 years later here we are. Take a leap of faith and jump ships ONLY if you feel and know you have a lot more to offer in DE than what's currently available. Salary ups should come secondary. My Primary motivation to change was I saw an underlying problem in the community I live in...2 years later, I have solved it for them..I also have my bills covered a year ahead. Remember i am halfway through. Delayed Gratification is a thing. Promise yourself that if you want to get your feet on DE, make sure you come out as the best. There's something reassuring about holding all your cards. You won't be a pushover anywhere you step. 32 is still young enough. Forbes lauds 40 under 40's if timelines bothers you that much. Mentally prepare yourself to walk on knife edges. A degree will build you wholesome if you are someone without network. If you are well connected, a boot camp certification can work for you.\nI think its a dangerous move to jump immediately to data engineering, baby steps, start with data analysis and work your way up\nNo, it is never too late\nIm a practice lead of a data consulting firm where I have about 250 data scientists, analysts, and data engineers on my team. I think the purist idea of data engineering will soon be dying and (mostly non-tech first) companies will be looking for a host of different data engineering type roles - and many of the people who will succeed will ironically be very very different from the way we look at talent (mostly through a technical lens) with traditional data engineering roles. So my advice is to go for it if youre truly interested, but dont try to play the same game as the kids out of school. Go about it your own way and chart your own path as you go. I think the industry will be evolving in your favor. Also stay flexible however. It sounds like you still dont fully understand the data space so explore the different roles before you jump right into data engineering.\nSummarized the whole thing in a Medium post. [https://medium.com/@aa.khan.9093/think-its-too-late-to-become-a-data-engineer-at-32-think-again-ed7c542a2ecf](https://medium.com/@aa.khan.9093/think-its-too-late-to-become-a-data-engineer-at-32-think-again-ed7c542a2ecf)\nIt may work. But as a backup option consider QA position. Data engineering course may be helpful for that too. Another option is Data Analyst role, it maybe sounds scarier than data engineer, but it actually requires less programming skills and more focused on data visualization - think as more advanced Excel.\nGo to college get a degree and get ur masters. Anyone telling you you dont need a degree is lying. The market is extremely competitive. Yes you do need experience. Yes you do need to know how to code but the college isnt required posts are annoying. Get a degree in economics math stats business MIS or engineering . These degrees allow you to think outside the box. Data engineering isnt just about coding. You need to understand the math behind it to be successful in the field. Why do you think these jobs pay a lot? They want good talent who not only know how to code but truly understand the math. Please dont go the easy way out itll only hurt you in the long run. You are able to work for the government with a masters degree and most retail corporate jobs require a masters degree in finance economics DS MIS stats etc..\nNah\nits never too late!\nJust jump, my brother was 50\nI wont Say , It is too late There isnt age for new learning I have changed my career completely in data engineering from robotics program. I would suggest to pick a good course and study in a complete sequence. Prepare end to end project and show it in GitHub Whichever topic you study , study in complete depth so you can tackle interview questions.\nNope. Julia Childs didn't learn to cook until she was 40. My suggestion; find free data (which is actually kind of plentiful) and free tools (which are often the best) and start doing something - something that interests you. Great free tools: ObservableHQ for visualization Python Python and Pandas Python and Polars VSCode\nNo, and lets be honest, in this market and sector you really have being a female helping you. Reality is that a lot of companies hire women with interests in IT because they need to hit quotas for their DEI scores and social optics. Its an awful thing, but with this saturated market at the entry level, you at least have that as a +1 above all entry male applicants. Sucks, but play the game \nWhat about being hispanic from a minority underrepresented. It could help?\nIt could help you get a job, yes. However its not something to be proud of or happy with since you know, as an entry level person, that you were most likely hired to be a token DEI statistic. I personally would find it incredibly dehumanising, but theres not much you can do about it.\nI believe the same, I think you should be hired for your skills and capabilities, regardless of your race, skin color or origins.\n55+ years old here. I've switched into professional administration (systems and networks + some software dev) at 28 years old. Yes it was different time then compared to today, so I'll give you just one tip: you should try to figure out what really interests you and try to develop into that direction. But be very careful! Many of current available IT jobs will die soon due to AI development. E.g. I don't expect that DBAs will disappear soon, it may change, but companies will need DBAs for years to come.\nIt's never too late to pursue your aspirations. Recently, at the age of 33, I transitioned from a career in Mechanical Engineering to the field of Artificial Intelligence and Machine Learning. The journey has been challenging and continues to demand effort, but it is steadily progressing. I am now employed at an AI-based startup, reinforcing my belief that age is not a barrier. What truly matters is unwavering dedication and consistent learning. So, take the leap and move forward with confidence.\nTheres no such thing as too late to learn new things, u go girl  u cant know until u try, good luck \n32??????????? Come on that is no age at all. Neil Armstrong didnt become an astronaut until he was in his late fifties ( or something )\nDont want to demotivate but thats not how it works. People see the happy side of IT where one earning huge but dont see rest portion on unemployment and layoffs recently. Not to add the level of entry level freshers offering more time, enthu and ready to relocate easily on projects needs with little to no strings attached to look after a family ( meaning can work worry free). Unfortunately, if you didnt look for your own career at right time, unfortunately you would need tremendous support from your immediate family members and ready to share responsibilities, which i have seen very poor in india unlike other countries. Thats why i always promote for every woman to be financially independent as early as possible. Now since you have reached out, acceptance of non IT people in IT industry is very poor. Take a comparison- i am hiring manager, i am getting young 22 year old IT candidate, very good in academics, and willing to do anything to get a paid job in good company, and another is you who is say 33, unemployed, no past experience, and no IT knowledge, plus has strings attached related to taking care for family, cannot relocate or flexible working at project hours, answer is no brainer. However did run few initiatives under CSR, where we train people for IT skills free of cost and land them to job in MNC, entire process is end to end free, all you need to invest was time to learn that too at your own pace, but unfortunately i got hardly 2 to 3 candidates only and rest women were just enjoying comfort of their family wealth showed no willingness to invest time in learning. Last is, if you learn the course still you would be treated as fresher and no crash course would compensate your knowledge for a full 4 year degree. However if you have some connections, it would help you land job else without connections it would be waste of money.\nCan I dm you pls?\nPlz share your expectations and intent for connect.\nI am in networking support, but want to shift to Data Science/Engineering, what advice could you give me?\nYeah too late\nMy best advice is to get familiar with the roles and then you can make a more educated decision what you really want to do. In short: (1) Data analysts: business people with some basic analytical skills. Mostly creating reports. Required skills: business education and deep domain expertise, some analytical skills. Maybe a Google Data Analyst Prof. Certificate on Coursera. (2) Data scientists: who convert business problems into data problems, develop solutions. Best education: depending on which domain you are targeting, some quantitative (preferably domain-specific) undergrad (really anything but e.g. quantitative social sciences like economics, sociology are also good here); and then a statistics or data analytics master's. If you have a business undergrad then a statistics or data analytics masters. (Probably this is the best if you are migrating from a business field, because you can use your domain expertise.) (3) Machine Learning Engineer: someone like a data scientist but more focusing on software development and putting the models into production. I guess, because here in Europe we data scientists do this, too in most cases. (There are not that many MLE roles here.) This is different in the US. (4) Data Engineers. I am personally genuinely confused here, because in our company (huge telecommunications corporation) Data Engineers are basically infrastructure people (cloud engineers, MLOps, etc.). They are working with OpenShift / AWS / GCP / AWS services, setting up environments, working with Docker, Helm, Kubernetes etc. -- but in other companies Data Engineers are basically database engineers who are maintaining databases, writing data ingestion pipelines etc. -- So regardless of which role do you go with, the best is to have a CS degree here, because these are system architects, cloud engineers & stuff. Now honestly the Data Engineer role is overhyped nowadays, but it is not for all personalities. E.g. I myself find it boring and I wouldn't want to do it. On the other hand I love data science, love to come up with superior modeling solutions, love to play with prototypes, develop outstanding user experiences etc. (Me personally came from business, upskilled myself to data science with a relevant master's and lots of learning.)\nNope - go for it get yourself learning materials a training environment and go for it.\nI entered the field at a similar age, with some experience in databases and a bit of programming in R. The job opportunity came unexpectedly, and I was hesitant to take it, but I disliked my previous job so much that I accepted. Initially, it was very challenging due to the steep learning curve. However, over time, things started to make sense, and now, five years later, I enjoy it. Don't get too focused on specific tools, frameworks, languages, etc as they constantly evolve and there's always something new. Before jumping into this field, ask yourself if you enjoy solving problems and if you have the drive to tackle issues independently. If you lack the urge to tinker and figure things out on your own, this field is not for you, and you will burn out quickly. Many people enter this field for the money and end up burning out within a year.\nNo.\nYoull need to become solid with SQL. Also, its hyper saturated with desperate visa applications willing to work for free. Discrimination in this space is really bad atm due to current events. Gov is a decent place to look if you are really interested. But most gov entry to senior are excel and access based.\nNah, never too late but it aint gonna be super easy. I also come from a non-tech background and am a late career transitioner (I think I was 42 or so, 45 now). The market is looking pretty saturated for lower lvl des (which I count myself among). Main problem with your plan is the course you are doing isnt likely to be sufficient to prepare you for DE work just by itself. I dont know whats in the course, but if I were you, I dont think AI fundamentals will help too much and would focus on learning Python, SQL and learning more about the fundamentals of what DE work generally entails, learn about data modeling, ETL.. Im sure more experienced folks can give better advice. Problem is every company seems to use a different tech stack so you want to learn more about the fundamentals that will more universally apply, and then pick a few tools to specialize in. I def think you can do this if you have the time and patience to learn enough. Hopefully the job market gets better by the time youre ready to start applying. Wish you the best!\nTo get your first entry level DE job, your experience with customer service will take you so far! It is generally perceived that people with a formal computer science background dont have great bedside manner working with clients and business side employees. Train up and then as you go into interviews have a strong repo that shows you have learned into code and lean into your people skills in the interview. Side note - never too late to make a change\nOh I never see it this way in terms of the experience as customer service. Thank you for your words of encouragement! This mean a lot..\nThis is also a good reason to start in something like analytics and transition to engineering. Analysts will often get a fair bit of face time with clients, especially if you do something like management consulting. If you find analytics processes are inefficient (e.g. data prep, storage, access, change control, security etc) then you can introduce engineering principles and get experience that way. This is how I started, at the age of 35. I am now 43 and the lead data engineer and data architect at a small bank. (For context I am not in the USA so your mileage may vary but the principle should be the same).\nYes it probably is\nIt's never too late, do it! I was a construction guy who got hooked on Excel and got with the right company to help push me to grow. Do what you like to do, you will do it well. (Most likely, it just takes a bit.)\nNo, its completely fine. You wont be a FAANG engineer but there are lots of opportunities. Just dive head first and work really hard. You need projects and contributions of open source programs.\nWhy not a FAANG?\nHmm.. Im not in data engineering, but Ive taken courses. Im in cyber. I think something important about this industry overall, is having a mental roadmap of how youd get there. Look at the building block roles that lead to where you want to go. Its certainly not too late, based off people Ive met with similar situations. However, its a journey that takes a commitment. Breaking down the pathway into more digestible pieces can make a big difference. Also, networking and getting involved online and offline. There are so many people a projects out there. Theres so much support. Its competitive, but there are many avenues that can build experience and a network.\nNo, but itll be tough\nTry creating a full end to end cloud DE project on your own, with help from chatgpt or Claude or any other AI tool. The data can be a dataset from kaggle or if you feel bold, any public access API like the weather API. I'd say a basic ETL with AWS' free tier should suffice. Pull in data through AWS glue to s3 or redshift, then transform it somehow using dbt core or dbt cloud, then show transformation steps to a simple visualization tool like tableau public or metabase (open source). You'll gain hands on experience with DE and devops skills and can showcase this on your GitHub.\nNo but it feels weird to have peers and seniors that are younger. Im 38 and am a lead but I have peers that are a decade younger than me cause I started DE at around 31. Dont let that hurt your ego and youll be fine.\nNever to late for anything\nWent back to school for CPSC and lots of people in even in their late 30s. Others were doing their masters in data science trying to break into tech. Its been great career pivot and tech has given me the highest income and best work/life balance I could ask for. Good luck!!\nI just started my Masters of Data Science at 35 and transitioned into DE from GIS, internally within gov. I had been working senior roles in GIS for over 10 years and even though working various technical roles I'm finding the transition to be a challenge. You need to proficient in SQL, DevOps, version control, ETL/ELT pipelines, cloud. I'm finding free Microsoft courses to be an extremely useful resource in between my masters.\nYou're not too old, start with sql and data modeling and you will be fine. Also learn a bi tool and specialized yourself in one functional domain to start with (hr, finance, etc...)\nGet a job first. And to start with explore data analysis and the related tools. This may ease you into the data side and this learning can fetch a job with much easier/smaller skill set . Once you are comfortable with data analysis, you can then expand by looking at data engineering. Without IT and data background, jumping directly into data engineering can be overwhelming.\n> and I have a significant gap in my employment history \"I've signed an NDA\" - boom. fixed. Anyway, I went back to school at 28 for software engineering, so I was on the late side as well. However, I already had an IT background, which helped somewhat have it easier at school. Sadly, I have no idea how the market is ATM, because I joined my first company some 3 years ago and haven't switched yet.  That being said: Teach yourself debugging. [vscode debugging](https://code.visualstudio.com/docs/editor/debugging) - this should make it easier to figure out WHERE the application breaks, or why a value isn't what you've expected. And second (and this is harder without help): teach yourself to write tests. Ask Claude.ai for examples (its output is of a higher quality than even ChatGPT's o1, IMO), or slap your code into an LLM and ask for tests. I would recommend using `pytest` to run the tests, since `unittest` feels a little bit archaic, though using `unittest` is better than nothing at all!!! Learn unit testing simply because you should do it at work, which fill feel futile, until you have to _change_ something, and all of a sudden a test breaks that you did not expect to break, and now your tests have saved your bacon by not introducing a new bug into your code. TL;DR: Learn **debugging** and **unit testing**. They are massively valueable tools, but school and courses will likely not teach you that.\nYou only have 33 years until retirement. You might want to just give up.\nNo, you are fine. Absolutely fine. There are some questions I have though. A) Do you enjoy it so far? Is it kind of addicting? Has it replaced all in your life all of a sudden? B) What is your dream job? Why?\nThe problem is not your age, but you do have two very serious problems. The first is experience: assuming you don't have a STEM background, or any specialized experience that can be leveraged into an analytics role, this is akin to asking, \"I have never played a sport in my life, could I make a career out of hockey?\" I mean it's not impossible, but to me it does not sound like a high probability play. The second is timing. If this were 2018 during the DS boom, there would be tons of companies just realizing for the first time they need data engineers and nobody looking for the role. I would be able to give you a cookbook. Now it's an open secret and the market is saturated with job seekers (who have all done the exact same learning path as any I could give to you). Worse, with the recent layoffs the market is also full of job seekers *with experience* who will be competing with you. Even good advice from as of 5 years ago is imo not tenable in today's market.\nNo it's not too late. Dm me if you wanna talk about it\nnot at all!\nWelcome! Kick ass and have fun!\nI'm a bit confused why you enrolled in \"Python and AI fundamentals\" if you want to become data engineer. From my experience many companies are still stuck in century old data warehouses with a shitload of SQL stored procedures that no one understands anymore because the original data engineers are long gone. These run on on premise SQL servers that are at their limit of hardware capacities. All this leads to cubes that take half a day to refresh and cause severe problems for BI departments. These companies are in desperate need of data engineers who both understand that old world and also have experience in cloud environments, data lake house or data mesh architecture and how to upgrade a shitty dwh to that.\nIf it takes you 2 years to study, you'll be 34 by the time you get to go job hunting in that field. If you don't study, you'll still be 34 in 2 years\nStart with manual QA instead. You'll have more job opportunities. You can self study and be ready in a few months.\nIt's not too late but there aren't many data engineering roles that require just python and ''AI'' - and when they are available, they require a decent amount of experience. The jobs not just about turning a CSV into a dashboard, it's about capturing errors, and understanding the difference in data types between various languages and operating systems in order to make sure the data is where it's meant to be, in the right format and on time! If you put the hours in and have the passion, you'll succeed. I would recommend SQL above everything else.\nMaybe not faang but you can find a way in with enough perseverance. Got in when it was new but have a math and cs background. Back then, 2013, I was a data manager then a backend data dev in 2018 and finally a de in 2022. Maybe find non-profits that need help and start a consultancy.\nIt's never too late to start learning something new. You just need to understand the basics of the field you're going into, practice those basics until you get good at them and build a portfolio using the tools you'll probably end up using at your role. For a data engineer, I would suggest learning Python & SQL. For data visualisation and creating dashboards, PowerBI or Grafana would be great. Learn basic data analytics principles as well. They'll be handy. All the best\nNope. It's never too late to do anything. important thing is to find if you like it before dedicating to it; if you don't actually like CS type work, you'll burn out in a few years, or be miserable for more. Here are some things I think are good precursors to do before dedicating heavily into CS: Learn some python to start. See if you like the process of going from little-to-no knowledge to usable knowledge. Try some codewars and leetcode to see if you like solving cosing problems. Learn and setup a Linux machine (on a cheapo refurbished $150 lenovo if need be) to see how you handle that process. Setup your own local postgres and practice making a database with sample tables and data. Learn to pull it in python and manipulate with pandas. Try and grab data from a free API somewhere and clean + ingest it into your db on a timer with crontab. Make a small local site with node or next to interact with the db (either read and present, or also full CRUD). See if you can host a small ec2 on AWS with the 1yr free tier. Doing these will give you a sense of the kinda work you can expect, though you will likely end up doing ETL more than anything else. I think all of the above can be done in a few months if you work at it. If you want to go for it, it's definitely helpful to get a BS degree. The job market is tough right now, but it's possible with persistence. Best of luck!\nI was 35 when I landed my first DE role! But my transition was quite smooth. I was feeding data into analysis tools at a marketing department, found out I had a knack for data, and I grew up with computers and have a bit of programming background as well. When people at that org were asking about Hadoop I jumped right on it, and managed to get a cluster up and running using Hortonworks. Thats when my career really took off! Hadoop is a thing of the past now and the DE role has changed a bit as well, but I think it should be easier now to transition into.\nNope not at all - 53 year old male who started as a de two years ago (was previously a bi dev)\nStarted as a data analyst at 32 and position became more of a data engineer about 2 years ago. Its never too late to update your skills and get a new job. Just be ready to learn a lot, and learn from your failures\nNah DEI initiatives are still a thing\nAre you single?\nIts a thankless and mentally grueling industry. I recommend finding something more entrepreneurial. Start a company and hire the people with these skills. Or, if you haven't already, get married and have children to keep this country going in the face of population collapse.\nWhy data engineering?\nIts never too late, but probability of you never landing a job in the field is likely high. Starting from scratch with courses will likely leave you ill equipped to break into the club from the outside. I think you have much better chance trying to get in from the inside by starting at some large companies data entry team, data labeling team, manual QA team, etc. and even that route is dubious given the state of the industry, but at least youd be getting a wage for your endeavors"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Most analytics projects fail because teams start with \"we need a data warehouse\" or \"let's use tool X\" instead of \"what problem are we actually solving?\"\n\nI see this all the time - teams spending months setting up complex data stacks before they even know what questions they're trying to answer. Then they wonder why adoption is low and ROI is unclear.\n\nHere's what actually works:\n\n1. Start with a specific business problem\n\n2. Build the minimal solution that solves it\n\n3. Iterate based on real usage\n\nExample: One of our customers needed conversion funnel analysis. Instead of jumping straight to Amplitude ($$$), they started with basic SQL queries on their existing Postgres DB. Took 2 days to build, gave them 80% of what they needed, and cost basically nothing.\n\nThe modern data stack is powerful but it's also a trap. You don't need 15 different tools to get value from your data. Sometimes a simple SQL query is worth more than a fancy BI tool.\n\nHot take: If you can't solve your analytics problem with SQL and a basic visualization layer, adding more tools probably won't help.",
        "author_fullname": "t2_buqufcswc",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "hot take: most analytics projects fail bc they start w/ solutions not problems",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1ht5swe",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.96,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 255,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Discussion",
        "can_mod_post": false,
        "score": 255,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735963051.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Most analytics projects fail because teams start with &amp;quot;we need a data warehouse&amp;quot; or &amp;quot;let&amp;#39;s use tool X&amp;quot; instead of &amp;quot;what problem are we actually solving?&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;I see this all the time - teams spending months setting up complex data stacks before they even know what questions they&amp;#39;re trying to answer. Then they wonder why adoption is low and ROI is unclear.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s what actually works:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Start with a specific business problem&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Build the minimal solution that solves it&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Iterate based on real usage&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Example: One of our customers needed conversion funnel analysis. Instead of jumping straight to Amplitude ($$$), they started with basic SQL queries on their existing Postgres DB. Took 2 days to build, gave them 80% of what they needed, and cost basically nothing.&lt;/p&gt;\n\n&lt;p&gt;The modern data stack is powerful but it&amp;#39;s also a trap. You don&amp;#39;t need 15 different tools to get value from your data. Sometimes a simple SQL query is worth more than a fancy BI tool.&lt;/p&gt;\n\n&lt;p&gt;Hot take: If you can&amp;#39;t solve your analytics problem with SQL and a basic visualization layer, adding more tools probably won&amp;#39;t help.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "92b74b58-aaca-11eb-b160-0e6181e3773f",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff4500",
        "id": "1ht5swe",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Signal-Indication859",
        "discussion_type": null,
        "num_comments": 60,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1ht5swe/hot_take_most_analytics_projects_fail_bc_they/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1ht5swe/hot_take_most_analytics_projects_fail_bc_they/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735963051.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Not a hot take at all! This all rings very true for me\nWould never work in my company. Managers get to choose the data stack not the team. Requirements are rarely involved. It comes down to brand name, price and who provides the nicest dinners for management.\nNot a hot take I believe many executives have this thought. For example, old company wanted to build an unstructed document search tool for the company. Requirements were only 2 data scientists and 1 engineer. The executives identified there was just going to be more work to implement and resources needed to do the project with very little overall benefit so killed the idea. Leadership places importance on value vs costs\nbut then where do we fit our resume driven development?\nThis but unironically - gotta look out for yourself\nthis can be said about most software projects\nCame here to say this!\nYou know what I also see is a small team of talented engineers solving problems in the most straightforward way possible without considering how to scale the solution once they've created some business value. There are reasons for the modern data stack (scalability, portability, cost efficiency) that lets you not just solve a problem, but solve it well and repeatedly. Not saying you're wrong but the hot take needs to be balanced with good architecture and planning for the future. Data and Analytics is well established now. It's not the 90s when businesses didn't see the value and D&A teams had to continuously prove themselves. With the right focus, you WILL create business value. Don't let that turn into a new problem - a resource heavy solution that potentially costs more than the value it brings.\nI'd add that it is always worth checking uf the stated problem is a symptom of something or the cause. \"The tech you have already is perfectly fine\" said no incoming CTO ever.\nYes this also true for data science, ML, genAI, web dev.\nThats less starting with a solution and more starting with a buzzword and backfitting what that buzzword is supposed to solve and only then deciding what the issue for the solution was\nincoming data of 5mb: lets use snowflake and databricks, data factory and synapse.\nI've been consulting to company that makes over half a billion a year. They just reliazed that they might need a data team, because they are not small anymore. They hired a data engineering lead and he gave me a presentation on an architecture with multiple Kafka layers. I've asked them what are the business cases, KPIs, source systems. They said they will start to worry about that when they hired 8 data engineers and spent 6-9 month building the environment.\nMostly agree. Sometimes there is a clear problem, e.g. \"need to improve data quality\" but then again, buying a nice new tool, and new data platform rarely resolves these issues, that seem to have deeply organisational\nYes thats best for small and medium projects but large ones can be different. For example, you need to do something your current system literally cant do. Do you build the 80% solution then rebuild the entire thing again if you need the 100% solution later or do you jump into the 100% solution so you dont have to build it twice? One example Ive encountered many times is scale. The easy solution cannot scale the size or speed of the 100% solution so you rebuild the whole thing again in a different tech (Postgres vs spark vs elastic).\nIm going to be real - I care more about skill exposure and career development vs solving problems for my employer in the easiest way for them You have to know when to pick your battles and not go completely rogue but I am looking out for my career first and foremost Ive seen a lot of analysts settle on basic SQL, Excel and PPT and they get over taken by younger employees who know Python, Advanced SQL, Dashboards, basic ML algos etc. Does this project require that I set up a docker container, create an automated pipeline, write my python in OOP (vs a Jupyter notebook), export to excel and then create a PPT? Absolutely not. Probably could have gotten by with writing a query in Snowflake and exporting to excel for some data cleaning and then creating a PPT. Does that match my career goals? Absolutely not.\nYou're arrogant and your work practices are unethical. You're job is to be an informed professional and advise the organisation on building data solutions. Choosing tools for your own development instead of the best for the org is not right.\nlol unethical\nAm I wrong? Or are you bragging about this? Instead of posting anonymously do it publicly. You are not the type of engineer who is good for culture\nEthics is a conversation rooted in individual values While you highly value providing optimal solutions to your employer, I do not. I view my labor in a capitalist system as exploitative. Working class people exchanging their labor while the managerial class captures profit based on someone elses work. To me, the entire system is inherently unethical. The only way I can keep my skills up to date, to continue to earn a living wage, is to operate in this way. Again, there are limits and you cant just go rogue, but this is why individual contributors value professional development and an employer is disincentivized to provide it. If I didnt do this, my skills would lapse and employers would be able to erode my wages. To say that Im operating unethically is arrogant because it assumes you and your value system has everything figured out.\nYes, that is true.\nand people knew about this 20 years ago. so also not breaking news\nIndeed, longer than that - I have been in the data analytics industry for 30+ years, and the mantra has always been to identify the problem first. Alas, nobody ever seems to listen, and they all start with buying the latest shiny new tool. Not sure why, really.\nbecause marketing (new things) is always more sexy and easy than complicated solutions and the truth. on top you will always find some consultants who will promise to make all problems go away with 1/10 of the budget you estimated for the decent solution with existing software.\nAnd yet it happens again and again. So actually many people don't know it.\nit will always be this way for the same logic sports teams fire decent coaches. easier decisions to make and having a scapegoat is always nice.\nThis feels like the ideal route but I can totally imagine companies where leadership wants to leverage some tool or AI when Postgres, an open source tool or two, and a visualization tool is all thats needed. Im happy that when I joined my current startup the only limitation on tooling was that the rest of the company was on a cloud provider and so it made sense I join them. But hardly a limitation.\nI always keep in mind thatwere not solving technology problems, were solving business problems with technology\nThis hot take is entirely dependent on company size. Ad hoc SQL queries do not scale. As soon as you have multiple teams looking for the same thing, youre going to get different flavors of metric logic. BI tools are used for governance just as much as they are for reporting. A better solution would be a metric layer ahead of the BI tool that connects to everything.\nI like this statement a lot when reading about models. An approximate solution to a specific problem is better than a specific solution to an approximate problem. If you read about something then think well this could solve these problems then you give it a go then you have a chance to add value. You might have jealous coworkers who will also try to discredit the idea but if your managers sees the value and its easy to translate into actions then you are set up for success.\nThe simplest solution that takes the shortest amount of time is not always the most optimal though. In your example running analytical queries against Postgres might be ok for one off adhoc analysis but if they want to do that same analysis every day then the solution becomes incorrect/inefficient. The correct solution is to run ETL and extract it into an analytical query engine. This is not strictly just a data engineering problem. I see this in other software engineering domains and even other engineering domains. How do you prioritize a long term solution while still delivering short term goals.\nI think what's needed here are two things: 1. Simple, rapid prototyping to check whether an idea works and is useful from a business point of view. (What OP seems to be asking for) 2. Understanding from management that a rough prototype hacked together in a few days is not a production-ready, scalable tool. (What you seem to be asking for) The two most common problems I've seen with data engineering projects (and software development projects in general) are: 1 being ignored, resulting in months or years of time being invested in a product which is either unworkable or useless; and 2 being ignored, resulting a product turning into instant, unmaintainable legacy code because someone's untested script gets sent straight to production because management think it's already a done job. It really doesn't seem to be too much to ask for an organisation to be able to handle both of these.\nHave you looked at pg\\_mooncake or preswald? it is for making postgres columnar , and making it easy to build data apps that can query postgres\n>In your example running analytical queries against Postgres might be ok for one off adhoc analysis but if they want to do that same analysis every day then the solution becomes incorrect/inefficient Why? Postgres is perfectly capable of handing the same query every day. Your comment seems a bit... I don't know, ideological? Dogmatic? Kneejerk? There may be legitimate reasons but you haven't really spelled them out very well.\nYeah, Postgres is great. Its not columnar though, so maybe theyre trying to get at using the right kind of tool for a job? I dont know Im just thinking, if you have to build 9 more pipelines after that first 1, and then 90 after that first 10,  you might start running into many inconveniences that a more purpose fit tool wouldnt experience? At some point, maybe youre like Damn it. This new POC is doing good. Now I gotta rewrite all the old ones. I dont know though, Im just guessing over here. They definitely didnt give much to go off of.\nSorry yes I should have given more justification but mainly because Postgres is a transaction processing db and its use cases should primarily revolve around that. Trying to do analytical queries on that can add a lot on unnecessary load and depending on how highly available the Postgres instance is it can even bring it down. As I mentioned there are perfectly valid one off scenarios where you can run such queries but its not recommended long term. The bigger point is that you sometimes cant iterate from a shit initial decision and I think that point got muddled.\n\\[addendum to this\\] if that one query DID slow down other database operations for some reason, then you can look at things like read replicas and materialzed views we should not ignore OP's point that sometimes a basic SQL/RDMS approach can deliver a lot of value I say this as someone who has spent millions on Snowflake and would do it again in a circumstance that called for it. that's not every circumstance.\nThis is huge assumption that data required for business all sits in one DB. In reality for advance Analytics the data source can be multiple depends on how Transactions db is designed. Also in modern Analytics needs big data(un structured data) too. So for simple usecase PS DB can help, but for more complex use cases we need proper Data Platforms, but having said in agile world its hard to do business requirements driven data platforms which can evolve as we go. So its always to create Data Architecture based on todays knowledge and modern needs\nyou're not the commenter I was talking to, but you seem to be ignoring the fact that OP's current solution is working for them and their stakeholders.\nWell, i made a point in general to share my view point here. Not to challenge. OP is saying a view point which to me is Tactical solution option without thinking strategically future use cases or understanding the full landscape how data world looks like.\nThats the point of the post - dont try to optimize and focus on the problem. You can perfectly fine let the analyst run queries against Postgres and then see when you need to scale such solution. If you saw that it wouldnt work from the beginning - you wouldnt start with this solution. I think iterative solutions are inefficient in the long run (migrating all the time uhh) but they provide natural evolution of the domain understanding and constantly deliver value\nSo true. My team spends a lot of time building \"complex\" solutions and POCing \"new\" technologies without considering what problems we want to solve. I wished more people thought rationally and applied KISS (Keep It Simple Stupid) principles.\nTotally agree\nYou are right. We (humans) are always attracted by the shiny things. For us is the tech.\nYup. That is how we approach our clients. Many come to my team with a tool set they want to use and ask us how to make it work. Our first question is always what do you want to do. Most can't answer it. Sigh.... at least we force them to do real strategy sessions with the business to figure out point 1 first. Then they wonder why they waste their money.\nPart of the challenge with this approach is that at the time of choosing a new data stack, it is done with the intent of not just solving today's problems but also be able to solve for possible future problems. Problems arise everyday but choice and building of data stack is done maybe once every few years, or even just once a decade. So, you have to anticipate future problems as best as you can, and make a choice based on that anticipation. Which is why, flexibility of the stack is more important than the exact fit for today's problems.\nYup, worse sometimes there is an agenda involved as well.\nI'm a freelance contractor. A few years ago, I've worked with a banking company who made a \"numeric transition\" of its whole system. First thing, migration was KO, a lot of data missing, but project manager absolutely wanted a datawarehouse to store the forthcoming data (the arrive FIVE years after I left the project, and of course structure was not the same that five years before) Ha absolutely wanted a datawarehouse that saves and historizes fact tables (contrary to what is recommanded in Kimball). Another contractor made what we called in France a \"gas plant\", a whole \"factory\" that does a lot. I've asked many time the project manager to see stakeholder and ask what they needed. For example, he said that the accounting services wanted the datawarehouse not to run for \"a specific duration\". When I've asked how long, he couldn't not answer, but did not want to bother accounting. I told him that the other contractor work was at risk because he wanted to do calculation for two weeks of data, and with one day it did not work !! Project manager told me \"we don't do data project like that\". Other contractor left project after the first production release, leaving the project with his spaghetti architecture mess. When I left the project, I went to see accounting service, who wad very friendly. They knew the data project manager for years. And told me \"Why asking ? He knows that we block data for two days\". So project manager did not want to make a small prototype project, with just the few data that the publisher could provide, but a whole datawarehouse project that saves everything, that was at risk with the stupid structure the other contractor sold, saying that it could work for months of data in one run, but even one was too much. Just to hear that we could just make a few requests that could take one hour maximum, and run it twice the day after user ask to block. Two years and a half (for me) and many years after just for someting GODDAMN simple.\n> gave them 80% of what they needed What did they do to get the other 20%?\nAbsolutely. We run Python connected to Postgres and its orchestrated by celery. We just grew to the point where we need something fancier so we are looking at Kafka\nCaptain Obvious strike again! \nYou make a good point about starting with business problems rather than technical solutions. This \"solution-first\" approach often leads to overengineered systems that don't solve the core business needs. However, the right solution does depend heavily on context factors like data volume, scalability requirements, real time needs, and organizational complexity play crucial roles in determining the appropriate approach. Your approach of starting minimal and iterating based on actual usage is valuable but needs to be balanced with future requirements. For instance, while a simple SQL query might solve immediate needs, considerations like data growth, query performance, and future use cases might justify a more robust initial setup. For example, if you expect to scale from analyzing thousands to millions of records, or need to add real time analytics capabilities, planning for this upfront can prevent painful migrations later. The funnel analysis example shows starting with basic SQL queries allowed for quick validation. However, as needs grow (like adding more data sources or requiring automated reporting), tools like Windsor.ai or more sophisticated BI platforms might become necessary. The key is matching the solution's complexity to both current needs and realistic future requirements, rather than either overbuilding or underbuilding.\nResume driven development\nI second this, but this is never the approach because many times the goal is not to solve a problem, but to charge more or justify budget to spend\nquestion is why did that take 2 days?\nIm actually confused how"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Ever notice how execs ask for dashboards but can't tell you what they actually want? \n\nAfter building 100+ dashboards at various companies, here's what actually works:\n\n1. Don't ask what metrics they want. Ask what decisions they need to make. This completely changes the conversation.\n\n2. Build a quick prototype (literally 30 mins max) and get it wrong on purpose. They'll immediately tell you what they really need. (This is exactly why we built Preswald - to make it dead simple to iterate on dashboards without infrastructure headaches. Write Python/SQL, deploy instantly, get feedback, repeat)\n\n3. Keep it stupidly simple. Fancy visualizations look cool but basic charts get used more.\n\nWhat's your experience with this? How do you handle the \"just build me a dashboard\" requests? \ud83e\udd14",
        "author_fullname": "t2_buqufcswc",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Your executives want dashboards but cant explain what they want?",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hsiyq3",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.74,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 244,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Discussion",
        "can_mod_post": false,
        "score": 244,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735897649.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ever notice how execs ask for dashboards but can&amp;#39;t tell you what they actually want? &lt;/p&gt;\n\n&lt;p&gt;After building 100+ dashboards at various companies, here&amp;#39;s what actually works:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Don&amp;#39;t ask what metrics they want. Ask what decisions they need to make. This completely changes the conversation.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Build a quick prototype (literally 30 mins max) and get it wrong on purpose. They&amp;#39;ll immediately tell you what they really need. (This is exactly why we built Preswald - to make it dead simple to iterate on dashboards without infrastructure headaches. Write Python/SQL, deploy instantly, get feedback, repeat)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Keep it stupidly simple. Fancy visualizations look cool but basic charts get used more.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;What&amp;#39;s your experience with this? How do you handle the &amp;quot;just build me a dashboard&amp;quot; requests? \ud83e\udd14&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "92b74b58-aaca-11eb-b160-0e6181e3773f",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff4500",
        "id": "1hsiyq3",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Signal-Indication859",
        "discussion_type": null,
        "num_comments": 58,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hsiyq3/your_executives_want_dashboards_but_cant_explain/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hsiyq3/your_executives_want_dashboards_but_cant_explain/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735897649.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Ask who will be responsible to act when the measure goes in the red. Fastest way to empty the room known to DE.\nThis also works for the operations team when someone demands that an alarm be created. Who on your team will receive the page along with the ops oncall? Where is the work plan for resolving the alarm?\nNice!\nSUPPORT!\n#ad\nVertisement\nThe quick prototype is really the silver bullet. I don't even use a tool, I'll use a piece of paper in the meeting and draw something out, and make them do it too. Then we'll look at each others' ideas and we can usually spec something out right then and there.\nI like your idea of getting them to create a prototype, but in my experience most executives don't know the best way to present data that allows them to make decisions. With that said, it can be a great way of slowly educating them. I'm taking this idea :).\nA picture is worth a thousands words :) Honestly I've used the 5 minute paper prototype across many roles and with many kinds of people, even big groups. It's a quick and dirty way of getting ideas out of peoples' heads and onto paper in a way that's easier to explain to others. The intention is never to actually \"protoype\" the product but to get ideas onto paper in a way that the expert can align their expertise towards. Also, it's fun to draw. I always peek and see people giggling at their terrible drawings :)\nI'm a software engineer not a data engineer, but be careful with this with some personalities. They can get fixated on something that's awful.\nI ask them to send me an Excel mockup.\nPretty lame to throw an ad up in a subreddit without paying for the space\nTo be fair, its a terrible ad considering they point you to their product in the same step as get it wrong on purpose. I feel like this is a good example of why calls with sales people are 99% useless. Someone actual thought that was a good pitch.\nDo you ever get the \"just build it with mock data\"? Then you spend majority of the time getting the data wrangled or never get the data.\nOr my company: you dont need data to start building a dashboard, empty tables should be enough to get everything in place and ready\nHilarious. Yeah, lets make sure typing is done correctly for every visual, calculated measure, dynamic dashboard feature, etc. on a series of null columns.\nEasy, all the axes and data points will be NULL I know a little something about typing\nliterally all the time\n> get it wrong on purpose. Bad advice! Great way to lose credibility. Even your correct dashboards will be questioned in future. If/When it doesn't align with their own biases, which happens so often, you will be in a pickle to tell them they are wrong!\nGetting it wrong on purpose is a bad framing of a good approach. It's more about keeping the scope tight with the understanding that you'll be missing some (hopefully not critical) requirements.\nI dont know why, but I read get it wrong on purpose as more of a get something done first without worrying about it being exactly right\nYeah building POC is a good start but it has to provide some level of truth not garbage. What I would suggest is just show single metric and not 10. Keep it to bare minimum. But that single metric should show the correct value not wrong value.\nI love telling them theyre wrong\nAs long as you have built a rapport, then yeah you can. But if you are new in the company or don't really have that much influence, it can backfire easily.\nFor sure but if youre right youre right and it doesnt matter how new you are\nNot true. You can get fired for being new and being right. Speaking from experience as a swe where I was laid off from my 2nd job and took a few months to get a new job\ncustomers dont know what they want is more or less the problem statement for all of contemporary software development, full stop.\nExecs or just regular business folks are all the same. Ive built quite a few web apps, and often times we had similar requirement problems. We do agile development. We take a stab at it (after some conversations) then go to business and present. We get feedback and do a little more. App development is a much more exhaustive process, so we work in small increments, delivering every 2 weeks or less even. Continuous feedback. I like your approach where you get it wrong, I can imagine some comments coming out of that meeting.....hey that is not correct, its supposed to be blah blah. Lol\nGetting it wrong on purpose would get me thrown out of my current team. One of the reasons I'm trying to leave\nGetting it wrong \"on purpose\" just means you start with less requirements hammered out, not deliberately use a subtract when it is an addition.\nYes. Iterative development is not acceptable in my team. I work in a backwards company.\nSo your colleagues are basically clairvoyant? I haven't yet to meet a user that actually knows what they want exactly 100% on day one.\nThey're essentially expected to be. People don't last long here\nI work for psychopaths - both stakeholders who want a perfect solution yesterday, and a product manager who agrees with them. It's analytics for cybersecurity and they're all crazy. Every real data person who joins this team inevitably leaves or is fired because of this problem :)\nIt is a tried and true process, teams used to xerox copies of materials with their thumb in the print just to get comments going.\nYeah agreed - the rest of the thread explains that I'm in a mental institution\n> Ever notice how execs ask for dashboards but can't tell you what they actually want? No because I know how to gather requirements.\nNeeds more..pie charts\nLiterally what I'm doing right now. Revising the dashboard to version 12. I'm sure it won't be the last revision\nI find that you've usually got better insight than the executive if you understand the business. At that point just think of what you would find usefuland also very easy to understand. Many times I've been asked for something that I immediately knew they didn't want because they can't describe what they're thinking of, but don't bring that up. Just build what you're pretty sure they're thinking of.\nSelf service with templates is possibly the only answer - unless you have a report writer job to protect\nThe most poignant conversation I had in this space was with a senior buyer at a major retailer when we introduced a massive analytics platform: \"I don't need all this data. I need a light that says when it is green, do this, and when it is yellow, do that.\"\nI designed that exact tool to show when mission critical servers were going fine, about to fail, and had failed. Green, Yellow, and Red, with appropriate shapes for color blind users. Color blind users are more common in high tech environments than the general population, I estimate about double. Managers of said systems never want to get to red unless their teams have already jumped on it and have moved processes to other servers. This includes cloud services. Such a simple tool can be a great motivator.\nnever underestimate the power of a simple Pivot table\nYes. And its why youll always be able to find a job. They know they want data but they only want data that looks good and makes them feel good. So theyre always hiring the next guy hoping theyll finally get the data they want\nguy here meaning \"anyone\" :-)\nData visualization does play an important role in building dashboards not that the metrics, KPIs. I read the rule of 15 seconds for good dashboards. If someone cannot make sense of what the dashboard show in 15 seconds it missed its purpose.\nGreat insights! I'm always amazed how many times the execs cannot answer question number 1. If they can't articulate a decision, they don't need the dashboard they think they need. I'm publishing a new book, Dashboards That Deliver, through Wiley later this year. It's a framework for dashboard development, and a follow up to Big Book Of Dashboards. The principles you lost here are pretty much the core of the framework we describe!\nSeparately, for Indian Management - they will show twitched eyes or yell or scare people on their demand of a dashboard! They will not have clue of what they need - but the home grown monkey tactics is their dashboard! Their only metric is empire building , kingly status on slaves , and the Dollar! Separately. exceptions to above rule exists! So no need to defect the popular in lieu of genuine outliers!\nCongrats on completing a dashboard, let alone 100s. I feel like all I do is chase changing requirements.\nThe inclusion of something for the executive to critique is a really good idea. Just make it subtle and not totally obvious. It gives them the illusion of adding value to the project. And, if youre lucky and the exec actually cares about the data in the dashboard, you may actually get some really helpful suggestions.\nI cant even get my execs to find the value in dashboards. Wtf am I doing here\nGetting suggestions in front of executives, front-line managers, and data workers is the softest, easiest way to get instant feedback. The problem cases that consume all the time, are when people know for sure what they \"think\" their manager said before asking \"is this what you are looking for?\" Look to what is existing that people on the front lines love and how to roll that up into simple-to-digest dashboards, graphs, and charts. I specialize in creating and refining databoards for Fortune 50 companies. Oftentimes, they know what they like, but not specifically what they want. They can't draw a simple wireframe, but when provided with options they know. Then the conversation can grow organically. Also always get them to FIRST agree on a sizing standard based on the Enterprise Architecture standard for the laptop computers and handheld devices actually in use -- trying to obtain screen resolution agreements as you go is gonna never be successful because it is too dang late. Some executives do not understand what screen resolution means, because they are focused on financial considerations, not technical ones. That is our job. Unless you have been secretly creating them at the proper scale, they always want more data squeezed into every chart and graph than any human being can easily grasp. The stuff always winds up looking like a data refrigerator that needed to be cleaned out a year ago. Recommend A/B multivariate testing for the finals. The winners are always the clear winners. I've created 100's and 100'd of dashboards, charts, and graphs, and help files advising ways to access them.\nGreat insights and feedback on how to go about things!\nAgree 100% and almost exactly what I tell my data analysts. I tell them to build a paper mock-up (or digital version) first. Fast feedback!\n100%"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "",
        "author_fullname": "t2_cy454t9a9",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Databases in 2024: A Year in Review",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": 140,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hrckhx",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 1.0,
        "author_flair_background_color": null,
        "ups": 227,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Blog",
        "can_mod_post": false,
        "score": 227,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "https://b.thumbs.redditmedia.com/_yjSAtXPwKTiALIyEbxwvjyugKbAtLU1tb56sGu3-Qo.jpg",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "link",
        "content_categories": null,
        "is_self": false,
        "subreddit_type": "public",
        "created": 1735765701.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "cs.cmu.edu",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://www.cs.cmu.edu/~pavlo/blog/2025/01/2024-databases-retrospective.html",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
            "images": [
                {
                    "source": {
                        "url": "https://external-preview.redd.it/gq2RsfrLspW67UK49-jH1kAcB5WCBsFNk8Ox74rreGY.jpg?auto=webp&amp;s=06757161c762466187cd05ebd5204068ece3aed2",
                        "width": 400,
                        "height": 400
                    },
                    "resolutions": [
                        {
                            "url": "https://external-preview.redd.it/gq2RsfrLspW67UK49-jH1kAcB5WCBsFNk8Ox74rreGY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0efdc378fcb94f7a2650ad129bcedcd2512d641a",
                            "width": 108,
                            "height": 108
                        },
                        {
                            "url": "https://external-preview.redd.it/gq2RsfrLspW67UK49-jH1kAcB5WCBsFNk8Ox74rreGY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2ee8ea4cd7b46aa768d78358ded6a307d66ab474",
                            "width": 216,
                            "height": 216
                        },
                        {
                            "url": "https://external-preview.redd.it/gq2RsfrLspW67UK49-jH1kAcB5WCBsFNk8Ox74rreGY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=94b65b99b560636df7c968e0d56cf5d07cb8f419",
                            "width": 320,
                            "height": 320
                        }
                    ],
                    "variants": {},
                    "id": "P18v3lUjDiz9wsWIaMc2A7iYjo-j1G6grS_WyBaIc38"
                }
            ],
            "enabled": false
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "eb739554-a7db-11eb-95d7-0ec0f8f30313",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "mod_note": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "num_reports": null,
        "removal_reason": null,
        "link_flair_background_color": "#0079d3",
        "id": "1hrckhx",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "prlaur782",
        "discussion_type": null,
        "num_comments": 8,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hrckhx/databases_in_2024_a_year_in_review/",
        "stickied": false,
        "url": "https://www.cs.cmu.edu/~pavlo/blog/2025/01/2024-databases-retrospective.html",
        "subreddit_subscribers": 243450,
        "created_utc": 1735765701.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "really good post, even better thumbnail. I agree with a lot of what was said. One thing worth noting -> Kafka never had a license change. Confluent changed the licenses of a few auxiliary systems to Kafka (a REST Proxy, a Schema Registry, and KSQL). Kafka was always owned by Apache\nAmazing. Thanks for sharing\nGreat post, thanks.\nnever knew about these many DBs in the world.....great read though\nThanks for sharing! really appreciate it!\nThanks for sharing, amazing\nexcelent post\nFantastic article. Both informative and lighthearted."
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "This might be a bit off-topic, but I\u2019ve always wondered\u2014how did Larry Ellison amass such incredible wealth? I understand Oracle is a massive company, but in my (admittedly short) career, I\u2019ve rarely heard anyone speak positively about their products.\n\nIs Oracle\u2019s success solely because it was an early mover in the industry? Or is there something about the company\u2019s strategy, products, or market positioning that I\u2019m overlooking?\n\nEDIT: Yes, I was triggered by the picture posted right before: \"Help Oracle Error\".",
        "author_fullname": "t2_31y2n5wv",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "How Did Larry Ellison Become So Rich?",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hpp0vg",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.94,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 218,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Discussion",
        "can_mod_post": false,
        "score": 218,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735570851.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This might be a bit off-topic, but I\u2019ve always wondered\u2014how did Larry Ellison amass such incredible wealth? I understand Oracle is a massive company, but in my (admittedly short) career, I\u2019ve rarely heard anyone speak positively about their products.&lt;/p&gt;\n\n&lt;p&gt;Is Oracle\u2019s success solely because it was an early mover in the industry? Or is there something about the company\u2019s strategy, products, or market positioning that I\u2019m overlooking?&lt;/p&gt;\n\n&lt;p&gt;EDIT: Yes, I was triggered by the picture posted right before: &amp;quot;Help Oracle Error&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "92b74b58-aaca-11eb-b160-0e6181e3773f",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff4500",
        "id": "1hpp0vg",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "bancaletto",
        "discussion_type": null,
        "num_comments": 178,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hpp0vg/how_did_larry_ellison_become_so_rich/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hpp0vg/how_did_larry_ellison_become_so_rich/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735570851.0,
        "num_crossposts": 1,
        "media": null,
        "is_video": false,
        "comments": "Oracle bought out a lot of competing products that are useful and necessary in very large organizations. They also provided features and capabilities that were highly desirable to business users. The hate for Oracle Corporation is well deserved but it usually comes from the IT side. Finance, CIOs and business users, the ones who really matter, are kept happy by Oracle Salespeople.\nNow I'm feeling like one who doesn't matter ![gif](giphy|QjPE1FzNzwaTS)\nOracle once threatened a very large bank that they would have to pay exorbitant license fees or lose access to the software. That bank's CIO called Larry Ellison to counter threaten lawsuits and the salespeople backed off. For one year. The contract gave away even more Oracle products for a free \"use or lose\" purpose. After that year, the bank paid EVEN MORE than we had projected in our prior calculations but business just looked the other way since it was a budgeted expense now. That is their way of doing things.\nI find it wild these large orgs aren't concerned about the supply chain risk Oracle and Broadcom represent.\nThat is taken in consideration but there is rarely an alternative. Ripping out a database is easy. Ripping out all the processes, systems and workflows built around that database is really, really hard and expensive. Oracle may make most of its profits on the database but its claws are sunk in enterprises with the help of software around it, like Oracle Financials or even Exadata or Java.\n>The contract gave away even more Oracle products for a free \"use or lose\" purpose. After that year, the bank paid EVEN MORE than we had projected in our prior calculations but business just looked the other way since it was a budgeted expense now. Mind elaborating on this part? What do you mean by free \"use or lose\" purpose? Why did the bank pay more the next year? Were the exorbitant fees a budgeted expense now for the bank?\nIt is nearly 20 years now, so details are a bit fuzzy, and I don't want to out myself. The contract was up for negotiations but Oracle was demanding a rate that would have gone 50% over the allocated budget. The new contract after the CEO intervention suspended the price increases by one year and added some more software that the bank was obligates to use within one year for free. If they did not put it in Production within a year, they would have to renegotiate its licenses without the bulk purchase and package discounts. That one year allowed the CIO to ask for more money. The bank also reallocated funds from Oracle competitors to the products that were available for \"free\" and the business was happy on getting a \"good deal\" CIO looked good to the CEO, CEO looked good to the Board, business got more features and everyone except IT was happy. After the year was over, Oracle got its price increases retroactively, got a premium on the money and also managed to get more of its software in a very valuable client. It was a master stroke of salesmanship and showed how business is truly done in America.\nHow are you defining \"very large\"? out of curiosity\nOne of the most recognizable banks in the world.\nIn the dot com boom using Oracle was a big influence in whether startups or a project was funded. Even if the usage of Oracle was completely inappropriate\nWe have an Oracle procurement system. Not something DEs or SWEs want to think about.\nwhy not?\nIf it's not your core business, you buy it.\nOur company uses oracle for expense reports. Its actually surprisingly not the worst software Ive ever used for expenses. Its not great but its not the worst\nUntil they discovers what they pay for it.\n250k to replicate a single server is some shit\nBut it's the bestest replica\nshould not be considered a big expense if you are a bank or financial institution\nmillions and millions and millions and millions of dollars... Not sure who is worse, Oracle or IBM.\nIm so glad I dont matter \nIf you work for the IT department a very large organization, then you probably don't matter. Your employer only cares about the work you produce. You yourself are much less important unless you are in a very senior position or in a very critical job that needs skills only you can provide. In that case, you are a risk. Netflix has the best policy on this - We are like a sports team and not a family.\nNo argument here \nEasy. Around 40% ownership of a company that made incredibly locked in products (databases) that sold at over 40% margins to nearly every large organisation globally. It took Amazon with all of its cloud muscle up till 2019 to migrate off Oracle.\ni did not know that and that is funny and insane.\n>It took Amazon with all of its cloud muscle up till 2019 to migrate off Oracle. This sentence made me realise why oracle is so successful financially. I knew they were good, but I didn't knew they were that good.\nMigrations for databases are always hard. If you're already using a database for an application, moving it to another database is a phenomenal feat. It's risky, tedious, and takes a shit ton of manpower to overcome that.\nHow do you find projects? I always end up helping my clients with these but never go looking for this work because I don't find it super interesting. However, like you mention, the projects pay well and tend to be stable and longer-term, so I'm thinking about pivoting to focus on it for the next leg of my career.\nThe product isnt that good. Its fine. Poster above mentioned lock in. Database is one of the more difficult tech services to move off of once start using it.\nBack in the late nineties, Oracle was the only database that supported that kind of scale with high availability and ACID guarantees outside IBM mainframes. By the time other databases caught up, they had already locked in practically every company in the Fortune 500.\n> locked in That one guy on tiktok would be proud\nBy good i meant business wise.\nThey have a video on YouTube where they actually celebrated in office shutting down the last oracle database for Amazon\nFound it https://youtu.be/9yBP5gnnZi4?si=uYf3zRw6hqoB4-jE\nSame, dude. Same. That is nuts.\nTheres the age-old saying Oracle doesnt have customers, they have hostages Migrations are often huge undertakings. So once you have a customer on your product theyre not going to want to move unless they really have to.\nIncase anyone is wondering where the naming for this comes from :) https://aws.amazon.com/redshift/\nThey are still running some Oracle afaik. Only the website got moved to some combination of Dynamo and some non Oracle RDBMS.\nNot to mention 4-5 decades of compounding wealth via instruments we don't have access to, like PE. Dude is in his 80s. Timing and luck are def a factor.\nHow Microsoft and ssms wasnt a competition? Happened too late? Also why ppl use aws and not azure?\nMost people who have used both AWS and Azure ask why people use Azure and not AWS.\nThey are not randomly distributed. There are some factors which are not intuitive since intuitive would be that windows and Microsoft were the most popular for operating systems and suddenly theyre not for databases, hence question.\nWell Amazon was the most popular for file storage, queues, virtual machines, etc. Because Microsoft didnt have a cloud until years after Amazon did.\nMS was late to the game. Also, the way MS sold SQL Server is different than Oracle. MS sold the database itself as the product and helped the customer build use cases around it. Oracle didn't necessarily sell the database by itself, afaik. It sold a business process built on the database. The business process was the hook, the database is the anchor. Similar to how SAP sells their stuff.\nWhat i remember from 25 year ago is Microsoft was selling separate application building tools like MFC or FoxPro that could be used to connect to whatever database while Oracle was bundling their own form creation products that I found pretty annoying in my little exposure. It is different when selling tools to run on a proprietary OS like Windows vs selling tools centered around your database.\nThanks :) Thats the answer I was looking for. Oracle sucks so does Larry. I couldnt immediately see anything wrong with Microsoft products when I started being into it few years back and from my little knowledge I was always under impression their flagship product that runs the world is Java, didnt know their dbs were actually that huge.\nThe java acquisition came very much later. Oracle was already an IT household name.\nI used some sql server while mostly used oracle db. for heavy loads and transactional systems, I would never use sql server. one if the reasons that sql server just recently implemented row-level locking, while oracle has it from beginning (and proper versioning)\nJava was bought recently, the real product was always the DB\nSome companies don't want to use AWS because Amazon is so far reaching and in so many markets that they could end up competing against them. So naturally you choose Azure or GCP.\nMicrosoft SQL Server came much later than Oracle (if I remember correctly). Microsoft did eventually become competition in the SMB space (and in some larger places as well). But like others have said, once you have Oracle, it is sort of hard to divest from it.\nTheir businesses model makes sense - something I hate with passion. Im glad ssms caught up eventually as Im not a fan of streaming business logic through bottlenecks of people with very limited capabilities - its Chinese whisperer on steroids. .\nCan someone explain why its so hard to move off of a database (sorry, Im not dataeng)?\nEven managed to force IBM to have to follow their lead even though they were first with that type of databases.\nYup I always call him LPOD: Larry Prince Of Darkness\nDont antropomorphise larry ellison. Your lawn mower mows the lawn. Larry ellison makes money - bryan cantrill\nIts not just market cap that makes someone rich but stake in the company. He owns 42% thats insane number. For example Bezos owns 8% of amazon.\nHe should diversify his investments.. /s\nHe actually should. Bill Gates and Warren Buffett have more stable wealth\nBill Gates would be the richest person on the planet if he didnt diversify.\nHe gave a ton away but he's also significantly more liquid than any of the other mega billionaires besides perhaps Buffet. He may be the actual richest in terms of spending power.\nEx wife got a lot of his wealth\nWe are talking about being rich as if it is just a single number game. Liquidity, stability, volume, anonymity and various factors will come into consideration of we start talking in more details. Offcourse Bill gates would be richer in terms of volume alone. But he would also be at risk of losing most of his wealth if some disaster befalls microsoft. It sounds impossible, but it would still be a risk. Now that he is diversified, he doesn't have to worry about a specific corporation and news. Just Us market in general.\nHe is 80 years old, he doesnt have to do shit\nWell, he has to die eventually\nThe relational database is an excellent product, it's just expensive AF. Once you build something on it, it is very, very hard to pull it out. Salesforce tried and failed. I think Google spent something like 10 years doing it throughout the company and they have all the money and talent you can find. Oracle charges by CPU and support which means as you grow, you owe more. Support also goes up no matter what. It's well over half their revenue, it gets stuffed into a line item with cloud (77% of revenue), but cloud margins and business are much smaller and smaller than DB so it is an outsized part of their value and therefore Ellison's wealth. No new tech companies start on Oracle DB any more because there are good open source alternatives. Oracle DB is better than all the options, but the costs and hassle of dealing with Oracle isn't worth it.\nA lot of the younger engineers never experienced the horror of per-core licensing. I was in corporate IT back when Hyper-V was introduced and remember Oracle changing their licensing to something obscene like \\~$63,000 per virtual core; then sending consultant goons on-site to manually audit for compliance. It felt like a mob shake down.\nIts actually worse than that, it was per physical core in your entire cluster whether you ever ran Oracle on it or not. that being said, no one pays that price. most discounting is 50%+\nAh shit I'd forgotten about that cluster part but that's true. You *might* run the software so you had to pay just in-case lol. I role changed sometime around 2010 so it's fuzzy now and mainly just recall that their licensing just got more and more complex + expensive every year. I have vague memories of having to submit exact cpu model numbers for procurement quotes and that price above *was* the discounted price for the org I was at because a bunch of the core infrastructure ran on Oracle so they had us over a barrel and knew it. I architect in AWS now and it's amusing to me to hear complaints about the cost of managed services because from my point of view costs have been in a downward trend for years.\nThat's absurd\nI saw that as well. I really liked Oracle overall until that point. We got the audit treatment at one point as well.\nI thought Salesforce moved away from Oracle and now has their own customized Postgres db\nPerfect answer\nOracle's success isn't just about being early (though that helped) - it's about their iron grip on enterprise customers through aggressive sales tactics and incredibly sticky products. Once a company builds their infrastructure on Oracle databases, switching costs become astronomical. We're talking years of migration work, millions in consulting fees, and huge risks of data loss or business disruption. Ellison was also ruthlessly brilliant at acquisitions and vendor lock-in. Oracle would buy up competing products, jack up maintenance fees, and use their massive sales force to push \"integrated solutions\" that made customers even more dependent. Sure, developers hate their products (I've been there), but the CTOs and CFOs making purchasing decisions care more about stability and risk management than developer happiness.\nYou basically just described a scam. Imagine if you said to someone Yeah I put money into this new bank but the only catch is if I wanna transfer my money to another bank I have to pay a 50% fee. Dude wasnt a genius, he was a scam artist and a disgusting person.\n* Oracle had arguably one of the best databases early on, the company was hugely influential to RDBMS development, data warehousing and reporting systems. * Oracle is able to retain customers. * Basically Oracle was selling databases before we had internet, and before most tech CEOs knew what a computer was. That is how old the company is, and a business like that does not lose easily. * Oracle continued growing with acquisitions, and launched a public cloud which is growing (at a slower, quieter pace than the others), but still growing. * Elision has invested/participated in a number of huge companies such as Salesforce, Tesla and Netsuite. Larry is a billionaire tech OG, he is unlikely to become poor anytime soon. Oracle sells to c-suites and MBAs, not engineers, and they somehow manage to do it quite well. My personal experience with Oracle is that the RDBMS is actually quite good and very advanced. Upgrades are a pain. The system also forces you to become an expert or perish quite quickly. However, I would refuse to work with it again because of how unpopular it is.\nAt the time, oracle was the only dbms that could scale beyond one server. If you needed federated database, they were the only game in town. Eventually folks like Unisys made it possible to, essentially jbod multiple servers together and run sql server on them. Finally, sql server got federation natively via their own management server, which made them competitive with oracle. Still a lot of the early adopters' (banks) legacy systems remain either db2 or oracle because the cost of a shift can't be justified.\nEnterprise and incredibly broad operations driven heavily by acquisitions. Acquisitions are a benefit of early success, so I cant discount that part.\nAccording to [db-engines.com](http://db-engines.com) Oracle is still the most popular database, even if there was the NoSQL movement (awful term for not only relational databases). Oracle was a significant player in popularizing and refining row-level locking techniques within commercial database systems. They integrated it into their product and continuously improved its implementation over time. Row-level locking is a crucial technique for concurrency control in database systems. It allows multiple transactions to access and modify different rows of a table simultaneously, improving performance and reducing contention.\nThis is interesting as I recently changed jobs and found almost no adverts mentioned oracle data engineering products. Makes me think it must be a lot of legacy but important databases knocking around.\nIts not row-level. Its block level locking.\nnop, row-level\nYoure correct, Im wrong. The lock information is stored in the data block that contains the locked row\nwithout googling or reading docs, what do you think would happen to small tables if that was block-level locking?\nAlso for a while, SAP used to resell a lot of Oracle as part of their ERP (SAP ECC). That changed a bit ago though, and SAP ECC is heavily used too.\nYou've been thoroughly answered but I just welcome the excuse to voice my opinion that if it wasn't for the nasty web of vendor lock-in that Oracle products create, they'd have gone bankrupt before Y2-fucking-K. Like who the fuck gets off charging $47K for a database license when your default IDE looks like it was designed by a summer intern in 1993 and not updated since?\nAhahahha totally agree\nIts kinda wild how many people in here are sucking off Ellison. Dudes not a genius, hes a quasi-scam artist and shouldnt be respected\nPeople like to yap about databricks and snowflake, but its the oracles and informaticas of the world that make the big bucks. Working with them sucks though. Aint that the way of the world\nIBM invented the relational database but Ellison who was tracking what they were doing by reading IBM technical reports figured out that RDBMS was going to be huge and was first out there door in a successful commercial system. There were others such as Ingres, Sybase and Informix but Oracle outlasted them and bought Sun and MySQL along the way.\nEarly mover and that the competition was DB2, SQL Server, and other lesser known options. Oracle was the closest to handling every use case. Still sucked to work with, though.\nI'm younger than many of the greybeards here but am always in awe of how MS SQL Server by 2000s was so far ahead of the game in terms of features that many of the cloud databases are only catching up on. It's incredible how efficient and compact Microsoft made vertipaq for SQL server analysis services for its time. I imagine oracle probably had a competing product that was just as fast but never ever had to deal with it.\nImagine being the de facto RDBMS for absolutely everything that mattered in every industry for a decade or two  thats basically the Oracle story.\nThey sell the best enterprise grade relational database plus a lot of products for finance, logistics and HR.\nIt's not the best - but they sell to enterprises, and that's lots of money.\nRDBMS is absolutely the best. The rest is meh\nWhat can it do that Postgres cant?\nFor a start a good support team. When you are running en enterprise grade server you need to have clear who will help you when things go wrong. Also the integration software/hardware in exadata its quite good.\nOracle RAC, you can separate \"services\" for the same database in different database RAC nodes, so you can optimize cache usage, rolling patching and upgrading and a lot of other things. PostgreSQL is good if you can have a good data architecture/strategy and keeping databases in small sizes. Oracle is unbeatable in HA with big loads and concurrency, and a lot of other things; but is trully expensive and the support is not that good, comparing 15 years ago.\nAlso Java licence is an Oracle product.\nHe owns 42% of the company... Oracle bought Java and they make high revenue from Java commercial licensing and lts support contracts. Java is in everything... Even Minecraft.\nGovernment contracts, partnership with the alphabet agencies/intelligence communities to develop an internal database for spying on Americans (allegedly, the origin of the company's name was the CIA's codename for the project), first to the market, ownership of Java, etc.\nOwnership of Java was the major reason Larry bought Sun. He was happy with the hardware side too until he was unable to get it cheap enough to compete with Arm let alone the x64 bandwagon of cheap cheap cheap in incredible volumes. Its a shame, really - he turfed several thousand incredibly talented and experienced OS and cpu engineers in one day when he could have turned that BU into a kickarse cloud org almost overnight\nI cant find it on the web anymore, but oracles business model has been considered the equivalent of modern day pirates, https://www.reddit.com/r/oraclecloud/s/yKu2L3Wjwg Their software is very simple and convenient to use, but at small scale. Once your company crosses a threshold in usage and your business would need to spend a considerable money to migrate away, the cost becomes astronomical. At that point, they have you. Broadcom has a similar business model I believe.\nOracle is not a new org like databricks Or snowflake or for that matter AWS. When I started my career in 2007,I found most big org with deep pockets hosted their databases on Oracle n kept less imp ones on sql server. Oracle earned shit load n because such orgs don't change their database stack easily , it earned shit load. Only thing is that in the last 10-12 years, sql server n postgres got more matured n stable while popular mysql was purchased by Oracle. So, in a nutshell Oracle could not grow at same pace YOY n to make things worse they came to cloud party very late. And Larry having good stake at this org made him too rich n i m sure he would have invested n diversified it a lot.\nDatabases (and data storage in general) can make a shit ton of cash because they're business critical. Oracle in particular is extremely litigious, locks people in and are aggressive at sales. A top Oracle rep literally went on to start the world's largest Sales Tech company (Salesforce).\nThey are hugely profitable because the marginal cost of a software license is zero, and for 20 years, Oracle DB was the defacto standard for the data layer for enterprise systems, with no real viable competitor for the first 10 years. In addition to the original price, the on-going support is currently 22% of the high original price, so that revenue is a 22% annuity income on top of the original sale.\nOracle has more lawyers than programmers. They get their money from companies who are locked in to their products and then they use their lawyers to saueeze out every penny they can based on the licensing.\nClearly you are young because people praised Oracle nonstop 25 years ago\nNah, we hated it and them back then, too. In 1997 I worked for a consultancy who did Oracle Financials and Manufacturing installation projects. Much of the project was finding, documenting, and submitting bug lists, and then installing a \"megapatch\" that would half fix some of them. Repeat until satisfied, at $225 an hour for a team of five for six months.\nLawyers mostly\nWell short answer is his share of various companies, most obviously Oracle. Oracle essentially \"won the race\" for (Windows-based) DBMS applications, btw 70-90s becoming synonymous with \"business databasing\". Then 90s-10s riding impetuous revenues & lock-in under their market niche, one ammasses market cap. Ellis owns effectively half of Oracle, plus sizable Apple shares, plus further investment. Better question is how their otherwise simple approach, essentially OR SQL-basis, carried them so far? Transitioning their DBMS approach to new paradigms. But I'm sure early adoption (and it's funding) has helped along the way.\nOracle doesnt have customers, they have hostages\nManaged to vendor lock enterprises for years. Nowadays not a sane person would consider oracle or mssql.\nWhat would they use instead?\nIt started in the 1970s. Calling Ingres and asking them how they do stuff. He commercialized relational databases and did it better than anyone else, theyve dominated since the early 90s and continue to.\nBy squeezing his customers..\nOne Rich Asshole Called Larry Ellison\nI don't know if it's true for all departments, and I don't know if it's still true today, but at least some of the US federal government is/was heavily dependent on Oracle products during the 90s/00s.\nbecause the main product is the database, which is by far the best RDBMS, and crucial transactional systems run on it, not on any AWS product. Pricing is not questioned, because companies, usually financial ones, run critical systems on it.\nBasically government and corp contracts. Oracle provided a huge number of physical servers for corp and military, many of them are still active today. Their products are horrible in general.\nRead the book softwar. Great book and has foot notes from Ellison himself.\nOracle has a fantastically successful enterprise sales org that has deeply embedded its products into the guts of nearly every legacy conglomerate. And into the guts of the Web itself. And governments. This is very profitable.\nFor a long time, they had the best OLTP database and OLAP database(exadata). Most of the F500 has been relying on Oracle and their products have great uptime\nOracle RDBMS is the very best relational system out there. But everything else they produced sucked.\nWhy is it the best?\nI found that as a DBA, working with SQL server, IBM DB2 and Oracle, Oracle has the best support across integration platforms. It is efficient in how it uses data blocks. It is robust for backup and recovery. Highly tunable. Supports great parallel client support. Overall big bang. But big bucks. And everything else of Oracle is crap - forms, reports, dimensional, web, designer, all bad\nHe didnt give away his shit for free.\n>Is Oracles success solely because it was an early mover in the industry? I mean, wasn't Oracle the first ever big player for \"enterprise RDBMS\"? And in a way, Oracle became a bit like \"a mini IBM\" (if you remember the saying *\"nobody ever got fired for buying IBM\",* likewise I reckon many people in suits saw Oracle as \"a safe bet\") If any one person had ever managed to hold onto a large chunk of IBM ownership, they too would be insanely wealthy.\nEnterprise RDBMS - that was also available on multiple platforms. So if you had a different kind of lock-in to a hardware/OS platform, they probably had a version for you. They actually sold it as reducing lock-in because of that fact. The number of platforms supported is a lot less these days, but it was a big factor in the early days.\nInteresting, I hadn't thought about that angle. How in the early days of Oracle choosing them would mean ***less*** vendor lock in.\nIm dealing with Oracle products currently and they are a pain. I might be naive but Id happily switch to an AWS native implementation.\nSailing\nThey were an early corporate success and many companies are locked in to using their products. There are plenty of large multinationals running unix and Oracle databases.\nHe was first on a lot of things we take for granted today. It's not really more complicated than that.\nFor a start, their product has historically been excellent. It has been reliable and performant for the scales required by large global companies, and invariably you could solve problems by throwing more hardware at them. From a serviceability perspective, there is an army of people with the right skills on the market who can help it remain that way. Licensing wise its one of the harder forms to deal with and they include audits as part of their business model. Theres a reliability tax associated with it, but reliable is worth it. Finally, their sales folks are animals. They will squeeze your budget dry.\nOn the 'How good is the product' debate, on the DB side oracle has famously always had a rock solid database and their instrumentation and tuning capabilities are way ahead of anything else I have ever used. (You could say that other platforms don't need them, as they don't need as much tuning but in my experience that isn't often true). But all the software around it, from installers (Oracle's installer used to be the worst) to IDEs and development tools tend to be terrible. Even the supporting software on their engineered systems is a mess, and the Oracle support portal has been rebuilt multiple times and is still incredibly frustrating to use.\nOracle is a pioneer in vendor lock in\nIts I think a number of things ranging from entrepreneurship, problem solving, grit, conviction, trust building, relationship building, company building who knows maybe even some data engineering.\nFor the un-initiated pl watch this comic with sub titles For enterprise use cases - nothing beats Oracle https://youtu.be/gwicyfJbYD4?si=KuvdzM_-Sa5opZXL\nIs there any piece of dominant enterprise software that people predominantly speak \"positively\" of? I feel like it's just par for the course to complain about industry leaders in software, despite whatever strengths made them leaders to begin with. I used to work for Epic (the EHR company, not the game company). People bitched about our stuff all the time--but guess what, the competitors were even worse!\nIts one of those HUGE behemoths you just have no idea where its being used in extremely large organizations. One of the more common examples that you may or may not be aware is Apple iCloud email runs on it. Now, you can only imagine the licensing costs for that. There are countless other products and examples. TLDR its everywhere.\nOracle might not be trendy or fancy, or cool, but it just works. The business subscriber just wants it always working and it delivers. Then these subscribers dont bother to change because the risk would be too high\nBy providing a backdoor for American intelligence agencies to spy on everyone with an Oracle backend\nHes 100,000 times smarter and works 100,000 times harder than the average person\nOracle produced a clone of DB2 at a time when relational databases were dominated by IBM.\nExcept the first version of oracle (v2.3 as Larry thought nobody would buy version 1 of a product) was released in 1979 and the first version of DB2 was released in 1983\nWell, I should have said System R, but that's just DB2's precursor.\nBecause Oracle is a massive company and product, you answered your own question."
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "I was comparing 2 datasets.  I wanted to compare a text field from one with a text field in the other &amp; if it was a good match, copy 2 fields over to the first dataset.  I never use CoPilot to write code (other than the accepting the suggested autocompletion sometimes) but I thought I'd give it a shot.  I wrote a comment &amp; hit Enter to see what CoPilot would suggest.  Instead of a block of code, it wrote another comment, and then another and then another, each time I hit Enter.  Everything except the first line was written by CoPilot.  I stopped hitting Enter when it repeated itself 3 times. Enjoy the nightmare fuel.\n",
        "author_fullname": "t2_xxx78",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "CoPilot embraces nihilism",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": 140,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hawewg",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.97,
        "author_flair_background_color": null,
        "ups": 211,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": true,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Meme",
        "can_mod_post": false,
        "score": 211,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "https://b.thumbs.redditmedia.com/nPAOpakpiar_SUesllK57V94ziA8gHSejUuLLQqtGPY.jpg",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "image",
        "content_categories": null,
        "is_self": false,
        "subreddit_type": "public",
        "created": 1733815383.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "i.redd.it",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was comparing 2 datasets.  I wanted to compare a text field from one with a text field in the other &amp;amp; if it was a good match, copy 2 fields over to the first dataset.  I never use CoPilot to write code (other than the accepting the suggested autocompletion sometimes) but I thought I&amp;#39;d give it a shot.  I wrote a comment &amp;amp; hit Enter to see what CoPilot would suggest.  Instead of a block of code, it wrote another comment, and then another and then another, each time I hit Enter.  Everything except the first line was written by CoPilot.  I stopped hitting Enter when it repeated itself 3 times. Enjoy the nightmare fuel.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://i.redd.it/0zlpzmwa3z5e1.png",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
            "images": [
                {
                    "source": {
                        "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?auto=webp&amp;s=6a8cda5edb55314387ffdf1574ed1bc25e0466f5",
                        "width": 1436,
                        "height": 1700
                    },
                    "resolutions": [
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=56eb84515750257974874e11f3c219f5256921c3",
                            "width": 108,
                            "height": 127
                        },
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=667f870011a855cdc33d263d9ac51864dee6366c",
                            "width": 216,
                            "height": 255
                        },
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=023742078d714e0e3f1faa0d0c9d06f97d1819ff",
                            "width": 320,
                            "height": 378
                        },
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=d6f194ef02eb93af74a7dc22faedfee97bedd59f",
                            "width": 640,
                            "height": 757
                        },
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=fbfe5f3a0bf17676af84631df8b4b49224a2fb59",
                            "width": 960,
                            "height": 1136
                        },
                        {
                            "url": "https://preview.redd.it/0zlpzmwa3z5e1.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9582e88a6522937984498fdf3c8a6688ee2f7f7c",
                            "width": 1080,
                            "height": 1278
                        }
                    ],
                    "variants": {},
                    "id": "Wye6KBkB3tHEfd8TYsXMaLVvIldYfeaUVRwJp1v1LtI"
                }
            ],
            "enabled": true
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "dc9742bc-a7de-11eb-a2e7-0e0348c8a4c1",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "mod_note": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "num_reports": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff66ac",
        "id": "1hawewg",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "captainx808",
        "discussion_type": null,
        "num_comments": 20,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hawewg/copilot_embraces_nihilism/",
        "stickied": false,
        "url": "https://i.redd.it/0zlpzmwa3z5e1.png",
        "subreddit_subscribers": 243450,
        "created_utc": 1733815383.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Delete the delete \nWords to delete by\nAt least it's planning to cover its tracks \nLeave nothing, leave less than nothing haha\nLooks like you accidentally installed the wrong VS Code extension, CursedPilot.\nwe are 2 years in to 6 months away from AI taking our jobs\nThe unclosed quote drove it over the edge.\nDelete the world \nI'm not a dataengineer, nor do I use VScode. what am I looking at? Specifically, the theme? I've been seeing this same view all over tiktok. Is it just a theme + default display of ipynb in vscode, or are there other extensions being used?\nRadiohead lyrics ?\nThat's my favorite radiohead song\nLol, I once took a philosophy course called \"The Problem of Nihilism,\" so this made me laugh.\nWhile funny i think the prompt can be better.\nWhat's Nihilism?\nAsk copilot\nI know the book definition. I just want to know how a human would explain to another human..\nIt is an ideology that contrasted Marxism. Capitalists, bootlickers and anarcho-capitalists love nihilism.\nOkay interesting. Why do capitalists love it?\nSome capitalists may be drawn to the idea of radical freedom and individualism that is sometimes associated with nihilism. They may see nihilism as a way to reject traditional values and conventions, and to embrace a more libertarian approach to life and business. Others may be attracted to the idea of rejecting the idea of objective morality, which can be seen as constraining to individual freedom and autonomy. Nihilism can be seen as a way to reject moral constraints and to assert the primacy of individual will and desire.\nThank you. I'm recently diving into different philosophies and Nihilism is one of them. This helps."
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Our new CIO , barely a few months into the job, told us senior data engineers, data leadership, and core software team leadership that he wanted advice on how best to integrate all of the applications our company uses, and we went through an exercise of documenting all said applications , which teams use them etc, with the expectation that we (as seasoned and multi-industry experienced architects and engineers) would be determining together how best to connect both the software/systems together, with minimal impact to our modern data stack which was recently re-architected and is working like a dream.\n\nLast I heard he was still presenting options to the finance committee for budget approval, but then, totally out of the blue, we all get invites to a multi-year Informatica implementation and it's not just one module/license, it's a LOT of modules.\n\nMy gut reaction is \"screw this noise, I'm out of here\" mostly because I've been through this before, where a tech-ignorant executive tells the veteran software/data leads exactly what all-in-one software platform they're going to use, and since all of the budget has been spent, there is no money left for any additional tooling or personnel that will be needed to make the supposedly magical all-in-one software actually do what it needs to do.\n\nMy second reaction is that no companies in my field (senior data engineering and architecture) is hiring for engineers that specialize in informatica, and I certainly don't want informatica to be my core focus.  Seems like as a piece of software it requires the company to hire a bunch of consultants and contractors to make it work, which is not a great look.  I'm used to lightweight but powerful tools like dbt, fivetran, orchestra, dagster, airflow (okay maybe not lightweight), snowflake, looker, etc, that a single person can implement, dev and manage, and that can be taught easily to other people.  Also, these tools are actually fun to use because they work and they work quickly , they are force multipliers for small data engineering teams.  Best part is modularity, by using tooling for various layers of the data stack, when cost or performance or complexity start to become an issue with one tool (say Airflow), then we can migrate away from that one tool used for that one purpose and reduce complexity, cost, and increase performance in one fell swoop.   That is the beauty of the modern data stack.  I've built my career on these tenets.\n\nInformatica is...none of these things.  It works by getting companies to commit to a MASSIVE implementation so that when the license is up in two to four years, and they raise prices (and they always raise prices), the company is POWERLESS to act.  Want to swap out the data integration layer? oops, can't do that because it's part of the core engine.\n\nAnyways, venting here because this feels like an inflection point for me and to have this happen completely out of the blue is just a kick in the gut.\n\nI'm hoping you wise data engineers of reddit can help me see the silver lining to this situation and give me some motivation to stay on and learn all about informatica.  Or...back me up and reassure me that my initial reactions are sound.\n\n  \nEdit: added dbt and dagster to the tooling list.  \n\nFollow-up: I really enjoy the diversity of tooling in the modern data stack, I think it is evolving quickly and is great for companies and data teams, both engineers and analysts.  In the last 7 years I've used the following tools:\n\nwarehouse/data store: snowflake, redshift, SQL Server, mysql, postgres, cloud sql, \n\ndata integration: stitch, fivetran, python, airbyte, matillion\n\ndata transformation: matillion, dbt, sql, hex, python\n\nanalysis and visualization: looker, chartio, tableau,  sigma, omni",
        "author_fullname": "t2_8l2d4xvq",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "new CIO signed the company up for a massive Informatica implementation against all advice",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hgfedc",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.95,
        "author_flair_background_color": "transparent",
        "subreddit_type": "public",
        "ups": 198,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": "02917a1a-ac9d-11eb-beee-0ed0a94b470d",
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Help",
        "can_mod_post": false,
        "score": 198,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": 1734456291.0,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1734455411.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Our new CIO , barely a few months into the job, told us senior data engineers, data leadership, and core software team leadership that he wanted advice on how best to integrate all of the applications our company uses, and we went through an exercise of documenting all said applications , which teams use them etc, with the expectation that we (as seasoned and multi-industry experienced architects and engineers) would be determining together how best to connect both the software/systems together, with minimal impact to our modern data stack which was recently re-architected and is working like a dream.&lt;/p&gt;\n\n&lt;p&gt;Last I heard he was still presenting options to the finance committee for budget approval, but then, totally out of the blue, we all get invites to a multi-year Informatica implementation and it&amp;#39;s not just one module/license, it&amp;#39;s a LOT of modules.&lt;/p&gt;\n\n&lt;p&gt;My gut reaction is &amp;quot;screw this noise, I&amp;#39;m out of here&amp;quot; mostly because I&amp;#39;ve been through this before, where a tech-ignorant executive tells the veteran software/data leads exactly what all-in-one software platform they&amp;#39;re going to use, and since all of the budget has been spent, there is no money left for any additional tooling or personnel that will be needed to make the supposedly magical all-in-one software actually do what it needs to do.&lt;/p&gt;\n\n&lt;p&gt;My second reaction is that no companies in my field (senior data engineering and architecture) is hiring for engineers that specialize in informatica, and I certainly don&amp;#39;t want informatica to be my core focus.  Seems like as a piece of software it requires the company to hire a bunch of consultants and contractors to make it work, which is not a great look.  I&amp;#39;m used to lightweight but powerful tools like dbt, fivetran, orchestra, dagster, airflow (okay maybe not lightweight), snowflake, looker, etc, that a single person can implement, dev and manage, and that can be taught easily to other people.  Also, these tools are actually fun to use because they work and they work quickly , they are force multipliers for small data engineering teams.  Best part is modularity, by using tooling for various layers of the data stack, when cost or performance or complexity start to become an issue with one tool (say Airflow), then we can migrate away from that one tool used for that one purpose and reduce complexity, cost, and increase performance in one fell swoop.   That is the beauty of the modern data stack.  I&amp;#39;ve built my career on these tenets.&lt;/p&gt;\n\n&lt;p&gt;Informatica is...none of these things.  It works by getting companies to commit to a MASSIVE implementation so that when the license is up in two to four years, and they raise prices (and they always raise prices), the company is POWERLESS to act.  Want to swap out the data integration layer? oops, can&amp;#39;t do that because it&amp;#39;s part of the core engine.&lt;/p&gt;\n\n&lt;p&gt;Anyways, venting here because this feels like an inflection point for me and to have this happen completely out of the blue is just a kick in the gut.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m hoping you wise data engineers of reddit can help me see the silver lining to this situation and give me some motivation to stay on and learn all about informatica.  Or...back me up and reassure me that my initial reactions are sound.&lt;/p&gt;\n\n&lt;p&gt;Edit: added dbt and dagster to the tooling list.  &lt;/p&gt;\n\n&lt;p&gt;Follow-up: I really enjoy the diversity of tooling in the modern data stack, I think it is evolving quickly and is great for companies and data teams, both engineers and analysts.  In the last 7 years I&amp;#39;ve used the following tools:&lt;/p&gt;\n\n&lt;p&gt;warehouse/data store: snowflake, redshift, SQL Server, mysql, postgres, cloud sql, &lt;/p&gt;\n\n&lt;p&gt;data integration: stitch, fivetran, python, airbyte, matillion&lt;/p&gt;\n\n&lt;p&gt;data transformation: matillion, dbt, sql, hex, python&lt;/p&gt;\n\n&lt;p&gt;analysis and visualization: looker, chartio, tableau,  sigma, omni&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "2ca94cd6-ac27-11eb-a8eb-0e7f457f5bd3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": "Senior Data Engineer",
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ea0027",
        "id": "1hgfedc",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Lumpy-Reply6508",
        "discussion_type": null,
        "num_comments": 135,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": "dark",
        "permalink": "/r/dataengineering/comments/1hgfedc/new_cio_signed_the_company_up_for_a_massive/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hgfedc/new_cio_signed_the_company_up_for_a_massive/",
        "subreddit_subscribers": 243450,
        "created_utc": 1734455411.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "I would run. Not only is informatica an outdated choice, this kind of environment where senior managers make decisions without consulting the experts is always toxic to work in\nNot op but I was in ops shoes. Informatica tanked our teams productivity and monitoring. Literally line by line every promise of how it was going to improve our lives turned out to be a lie, it made everything worse. We knew this going in and pleaded with our c suites not to sign a contract but of course they did. I spent so many countless nights working with teams in Bangalore to debug their etl. The kinds of hires than multinationals bring onboard to support informatica are just as bad as the tool. If your company is switching to informatica it's a sign they don't have your engineering team at all. They don't value your time, your ability to properly code flows, or you as an individual. They want an off the shelf tool that they can hire the cheapest possible labor to support and don't give two shits if it actually works. Our state side employees abandoned that tool almost immediately but corporate kept hiring more staff in India to support it specifically. There wasn't any budget left over when we want to get tooling that would actually work. Worse yet c suites expected us to fix the shit implementations coming out of India as they saw that as our responsibility. No bro. You went with the worst possible option. We gave you every reason not to pick informatica but you did. Worse you then tried to outsource our jobs but failed catastrophically when you realized the cheapest labor isn't going to take personal ownership of anything. You get what you pay for or in informaticas case you pay out the nose and get a shit product Fuck informatica. It's a shit tool but it's more that the companies that chose it do so for the wrong reasons. Rant over. I left there long ago. If any company would force me to go the informatica route again I'd leave immediately\nIm so sorry. Havent quite been in the same situation but I also have dumb CIO that likes to make stupid decisions like this, and has seriously floated using Informatica and Oracle.\nwhere has this advice been for the last 4 years of my life.\nGuess what, Informatica is a shit Data Engineering product in 2024. If the CIO is pushing for it despite the team is against it then guess what, he got a nice kickback from Informatica sales guy to do so. U Sir run away and search your soul somewhere else.\nOn mobile, apologies for formatting. CDMP Master, data governance lead,and former data engineer here. I stood up 5 Informatica modules from scratch one time (data catalog, data protection , masking, Axon, and their data engineering modules which changed names several times). I also took over an in flight B2B customer MDM project using cloud based MDM solution for a major telecom. Your assessment is spot on. I will try to offer helpful advice, but my first reaction is to distance yourself. The product is vaporware, from soup to nuts. Full stop. End of story. If its at the center of your data engineering strategy, its a culture and productivity killer. Youll hire $400/hour implementation leads and work with offshore teams who fail to deliver, and youll drive your engineering talent away. It will fail. To your CIOs credit, the sales pitch is really good. Some of the people that I respect most were convinced to buy, though they regretted it later. I dont fault them for making the decision, which turned out to be helpful in convincing them that it was a problem and to change directions. It was us vs the problem instead of me against the idiot CIO, if you catch my drift. This is a tough job market, so be careful. If you can find a role in the company that may be a holdout or the last to change, try going there first. Youll probably last longer than the implementation will take to fail. Otherwise stall until you can find a safe place to land. Im going to make recommendations assuming you have some agency and visibility, so take this with the grain of salt appropriate for your own situation. You may have a chance to change the trajectory if you have a visible role or the right communication paths. Informatica falls apart when you drill into specifics. Be clinical in your assessment of relevant features and youll find holes quickly. -dive into licensing. Most products license usage by number of rows processed or hours run. That will not scale. Ill bet the initial licensing is a sweetheart deal to get your started, and there will be pricing structures in the contract that will make you buy more units. At the surface it sounds reasonable, but the estimates are always low and if you really pencil things out accurately then youll likely double your licensing cost in the first 12-18 months. Their licensing department is highly litigious. -Get specific metrics on support save turnaround times and what escalation paths look like. Its 3 days average for a response and 5-10 days for resolution, with lots of repetitive log exchanging happening. The sales pitch says that its award winning support, but its not. -ask about the typical development team and administrator setup. Ask to talk to a customer. Their account rep will tell you that you can do it with your own team, but someone who uses it will show you that you need a dedicated bench who only does Informatica development. The skills are NOT transferable. -depending on your product, define very specific requirements and make them prove to you that the product can actually do it. Refuse to acknowledge a pass until you can see hard evidence. I bet that half of the requirements fail. I went all the way up to their product owner leadership for their data catalog, pointed at a screen where something didnt work, and he gave me a runaround and empty promises. You need to show the decision makers, not the product team. -prove out the cost and capabilities of HA/failover. The data engineering modules dont share logs that allow a job to pick up where it left off, which means you need to design all of your data flows to be able to run multiple times without duplicating/screwing up your data. Failover will restart from the last time it was synced. -job recovery is a nightmare -connectors usually cost extra\nCannot upvote this enough, this is the meat of why I don't want to stick this out. I don't want the next step of my career to be \"litigating 1000 details with informatica\" when their product falls down\nI hear you. Protect yourself as much as you can while you figure out what to do. Best of luck!\nLook out for yourself so if you dont want to work on informatica jump ship at the earliest. But as a senior engineer I implore you to probe into the decision and what is the vision for moving away from existing projects/tools. There must be a proposal document somewhere that should contain what the considerations were and what problems this is trying to address. It would be helpful to get a picture of the direction of your org and that is a much better variable to decide if you should continue your career here.\nAbsolutely agreed. Because of lot of company turnover , those of us who are leads/senior engineers were pulled together to put together 1. the documentation on all the existing tools 2. how they integrate and why (what are the triggers for system A to fire off an API call to System B) 3. a proposal document outlining the problems we're trying to solve and the priority order of those challenges 4. solution options and cost and timeline So we got #1 done and were working on #2 and 3 when the informatica invites came through. Like honestly there was no announcement \"hey I as CIO decided to go with informatica despite telling you that you were part of a project team to help design and scope out potential solutions\", not even that, it was just \"you've been invited to join informatica, here is the multi-year license for modules A, B, C, D, E and F\". I believe the CIO's reasoning to the financial approval team was \"I used this at my last company and it was awesome\". Nevermind we're in totally different industry with different technical and data needs\nMy company had a data architect who chose databricks but also chose to write their orchestrator because its based on proven mature technology he used in his past company (bugs at every corner) Now he left and we are on the fence working around the limitations and having to plan to develop additional features we need The new manager with software engineering background had the question why dont we use airflow or similar tech? And I agreed with that sentiment since my first day, but the answer I got was we dont want more moving parts, we want something simple that we can understand  New leadership is always going to play safe and chose whatever it worked in their last company. As a 10+ YOE software engineer, I know scenarios change and tech changes and its important to keep up with modern tools to not fall behind, but this requires an experimentation mindset and be open to failures I only found the latter at fast moving startups with big budget where even each team had agency to choose whatever tool they see fit to ship value to the business Every other company with traditional leadership mindset, they are going to play safe because they cannot afford failure, they have to show they are the domain experts and know what they are doing\nThat sucks. It also seems like there is no plan to move away from existing tools/projects which usually means 40 hours a week to launch informatica and whatever maintenance is needed for existing tools you will have to do that on your own time. Kind of crazy that the decision was made with no considerations to existing workflows. Is this common at your org?\nwell I'm relatively new, but according to the folks who have been here a few years, yes it is common. 1. some exec (VP or C-suite) wants to bring in the magical software they used in their previous company (could be in accounting, finance, ERP, legal, IT/software), doesn't matter, they sign up for a big multi-year contract without getting advice from the line-level folks. 2. it's a huge effort to get implemented, it ends up being a costly disappointment. 3. the executive is asked to leave, fired, or quits. 4. company and IT limps along with multiple solutions implemented for the same problem 5. new VP or C-suite exec joins, go to step 1 now repeat that enough times and you'll understand why the entire enterprise has so many applications that need to be integrated and orchestrated.\nSick comment. Highly under rated\nMaybe hes friends or family with someone working there. You dont know\nThis. Informatica is a widely used platform across banking, insurance and many other industries. A mature Informatica environment should be very stable, and enable you to rapidly spin up processes to provide business value. Wouldn't hurt to gain some knowledge in this area and add to your resume. We don't always get what we want and get to work with the latest and greatest bells and whistles.\nwe are not in any of these industries, we are in a very young industry with a lot of turnover, whose tech stack needs to be light and nimble in order to change quickly to handle new industry and regulatory requirements.\nAhh, cannabis org?\nHehe, my thought.\nA lot of turnover may have driven this decision. Informatica probably requires a lot less training and documentation to maintain.\n\"we are in a very young industry with a lot of turnover\" There is your CIO's reasoning. It can be a nightmare to find talent, let alone getting them up to speed on a custom built tech stack with a lot of domain knowledge. In my experience for these stacks it can take 6mo to a year for an engineer to start being productive in that type of environment at minimum. With a GUI/WYSIWYG tool most competent developers can begin adding value almost immediately. I don't see regulatory requirements being an issue; Worked in primarily an Informatica shop from 2013-2016 in investment banking. Coming off Dodd Frank, Volker rule etc. we were constantly needing to adapt to regulations and compliance reporting. Informatica nor any other tools we used were a road block - the red-tape of working in a giant investment bank was. Not saying you're wrong for not wanting to work with one of these tools - I get it. But there is value to be found in the architecture in these tools that will provide value to your future career and probably some reasoning behind it.\nmost of the turnover is at the leadership/exec level. I appreciate your insight and experience, however my experience with Informatica powercenter and Matillion (both GUI/WYSIWYG) tools has led me to the opposite conclusion, I think engineers appear more productive (managers can see more screens and boxes and arrows) but not more valuable in what they're doing in gui tools vs regular coding envs. the GUI tools make it much harder to do true version control/diffing and folks spend most of their time on drag and drop and don't spend time learning or implementing core data/analytics-engineering concepts. Tools like matillion are not force multipliers, I've seen a team of 10 offshore engineers turning out 2 or 3 features a month on matillion, in a fivetran+dbt replacement we've got 2 engineers turning out 5 to 7 more complex features and their work is auditable and easy to learn from. the gui tools, not so much. Just my experience, YMMV of course.\nI would argue for using industry standard tools if turnover is high. It is more likely you will find someone with prior experience with most of if not all of your stack when externally hiring. Also I think it becomes kind of a self selecting thing where it becomes harder to hire competent devs if you rely heavily on Informatica or other no code tools. Competent devs dont want to be limited by no code - its not a tool marketed to them. Its for C level execs that want to hire cheap labor and largely less competent devs.\nnice try Informatica / Alteryx sales rep.\nWhat a bunch of BS about GUI/WYSIWYG lol\nIm in insurance, Informatica and CIOs like this can fuck right off. WYSIWYG and no code is so egregiously over-rated, as is getting started quickly. Over-rated is being kind  tools like that are a burning pile of garbage on top of train wreck.\nCool? I've encountered plenty of over-engineered open-source dogshit because some tech bro dug his feet in and demanded we use the latest stack he decided was the greatest thing since sliced bread. Informatica is ridiculously expensive and the infrastructure to develop a mature environment is complex. But there are perfectly valid use cases and industries where this is acceptable or the Informatica's, Pentaho's and Ab Initio's of the world wouldn't exist. Frankly, this profession is getting unsufferable. Too many whiny entitled fairies who INSIST their tech stack is the gold standard and anything else is crap. 90% of the threads on this subreddit are juniors complaining and insisting their method is correct and everyone else is wrong. Most if not all F100 companies use some variations of these tools. When you have dozens or *hundreds* of individuals working in a data space, no one gives a damn if your new tool is 10% faster or more whatever metric you want to come up with; Stability, efficiency, and rapid development without the need to create an overly complex solution are the desirables, not what you can stick on your resume. At the end of the day, we're taking data, doing some shit to it, and sending it somewhere else. What tool we use is insignificant to me as the domain knowledge, understanding what you're doing with the data, and WHY you're doing it is vastly more important. I've yet to encounter any tool in the ETL space where a pipeline can be built, but it cannot be replicated in another.\nI mean I get your complaint but I think it is more valid if the situation was OP complaining that the company has a legacy stack stuck on Informatica rather than OPs company going from a modern data stack to a legacy one. Dont change what isnt broken is totally valid but it seems like they are ending up paying more money and spending more work on migrating over to this tool without clear arguments for why itd be better than what they currently have and what problems itd address that they cant currently fix.\n>Ab Initio Not that I have a dog in this fight but fuuuck that piece of tooling. Dogshit garbage. Never again working in banking specifically because of how much I hated using that tool.\nYou could say the same thing about Datastage and COBOL in those industries. If youre looking for long-term growth Id avoid them all like the plague.\nHey now, COBOL developers might have more job security than any of us. Some of those mainframes have been around for 50 years and will be around for 50 more.\nTotally agree but 95% of job postings nowadays will be Hadoop, Spark, Snowflake, Databricks, dbt. Just harder for growth I think with the legacy systems.\nmy cynicism would say the rationale would not be found in any document... more like back door dealings.\nYou shouldve seen the dinners sponsored by Hitachi/Pentaho at my previous job. The CTO was hilariously voted as an award winner while he laid off tons of folks and hired AWS contractors for twice the price after his IBM-Watson and Hitachi-Pentaho relationships proved so fruitless. Then they made him resign. And of course hes still squeezing into another C-level position cause once you cross the executive threshold, you only fail upwards.\nomg I think you and I have worked at some of the same companies. I actually worked with Pentaho a long while back and this sounds exactly like the sort of BS they would pull + a CTO purring with satisfaction from the praise\nRun\nit's an Informatica implementation he has at least 18 months before they push go-live another 12 months.\nYeah, but then you have to work on Informatica \nNot the best advice in this market\nCant hurt to look. Always have a new job lined up before quitting.\nDepends on where op lives. Here in Belgium I could have a new job with better salary in a week. Data engineers are highly valued and I would not stay anywhere that I didn't like out of fear of not finding another job. Not saying it's not like that in other countries but it's really area specific.\nIn Belgium you're on a poverty salary anyway - US-wise.\nlol no, in EU we have? * free universal healthcare * free education from kinderkarten to university * real food and cooking * actual cities where you can just walk and dont need a car at all so to compare to EU salary, please first deduct how much would these cost you in the USA\nI've seen this play many times before. New CIO comes in and swaps out existing solutions in favour of things he has used previously (and usually with little consideration for what is already working). Later, watch that he will bring in people that are familiar with INFA that he also knows. I'm not against Informatica. I resold/implemented Powercenter for many years (haven't used the cloud version but looked at it). Your decision to move on is yours only to make. When I was squarely in similar situations, I hung around. In one case the CIO got punted within 2 yrs.\nKickbacks.\nanything is possible I suppose. The same CIO that got punted also tried to bring in a new ERP system and was sold by the vendor that it could be done in 24 weeks :) After 1 yr and more than 4 million later all they had was a G/L implemented. I suspect that was the final nail in hi coffin :)\n> The same CIO that got punted also tried to bring in a new ERP system and was sold by the vendor that it could be done in 24 weeks Any CEO who believes this should be fired. I've been in tiny companies with super simple data sets and every manager there knew implementing a new ERP would be a multi-year long affair and even transitioning from on prem to the cloud version of the same tool is often a 6-12 month project.\nThe CIO I was referring to thought he knew everything and was very old school. Shortly after he made the announcement about the 24 weeks, he actually had a bunch of baseball caps ordered which stated the vendor name and under that 'delivering in 24 weeks'. My boss and colleagues all knew that 24 weeks was sheer fantasy. At one point we actually asked for a meeting with the CIO and CFO to air our concerns. We thought going into the meeting that by the time we came out we would be ex-employees. Thankfully that didn't happen but it certainly crossed our minds. After about 40 weeks into the project and with no deliverable in sight, we never saw him wear that cap again :).\nYour gut reaction is sound imo.\n> Also, these tools are actually fun to use because they work and they work quickly , they are force multipliers for small data engineering teams. I would say the same for different Informatica tools. Like data quality, you can plug it in and out like you mention. > I'm hoping you wise data engineers of Reddit can help me see the silver lining to this situation and give me some motivation to stay on and learn all about informatica. I totally get people hate Informatica, but if we could please hate it for the right reasons instead of making stuff up, that'd be great. The ignorance in this thread and sub about this subject is quite horrible. For starters, people calling it outdated are people who know Powercenter from the 90's or the Developer from 10 years ago. Many people don't even know about InfaCore, from where you can run notebooks against various tools like Databricks, Snowflake, SQL server, etc. Anyway, if you are about to take on the whole package, the various disciplines can boost your career, and that is not only relevant for Informatica tools. Skills that most DE's forgets exists in this bubble. Like: * Data cataloging; you get to compliance, management of the companys data, how to plan and maintain your catalog. And we are talking a real data catalog, that combines all your sources, not just your iceberg tables, or the built-in catalog in Databricks, that only can do cataloging for what it reaches. When a company hires people for data cataloging they don't care tool you have used, just that you are someone who fucking knows what it is, and can take lead. * Data quality. Last year, many in here were talking about making their own DQ scripts to fix stuff. Proper data quality, where you can track you progress with your profilings, more features than just creating you basic rules that all of us can do in SQL, but easy to setup parsers and dictionaries, and plug it in to your different flows. * Master data management; a problem many companies struggle with, and few seriously takes on, and when they do, they fucking love anyone who have done this before. Informatica can give you those skill sets and it can open doors to better dataengineering jobs, proper data architect roles or consultancy gigs, where you over charge wildly because few people have actually *done this*. Most people talk about it. This could be a silver lining, but if you attitude is, that it is so horrible, why would you? More importantly, when a certain amount of employees hates Informatica from day 1, it never succeeds. If no one knows how to organize and run the tools, the effort will be low to not existing, Then the prophecy is self fulfilling, and it obviously fails, and so it will at your place, no worry. Listen, my main work is not with Informatica, but I do work with it periodically. I have stuff I am annoyed by and dislike about it as well. But I have seen many successful implementations, and used properly, you can definitely succeed with it, and it is not as bad as people say. Usually I don't comment on it, except like last week, and now. Becuase the quality of the \"debate\" regarding Informatica in this sub is just horrible, and I'm not trying to convert you to the dark side. But at some point, people ought to consider how it keeps being such a big thing, if it sucks so hard. > Or...back me up and reassure me that my initial reactions are sound. Lol, Informatica is hated even more than SSIS and Microsoft in this sub. You will drown in reassurance, so do not worry.\nEngineers arent CIOs, should we expect them to understand? Genuine question.. a lot of engineers love to tell business how to manage these things when they really have no idea if their suggestion will actually accomplish the same outcomes. Thats why engineers dont get a say in how these things occur.\n/u/Lumpy-Reply6508 I know I am not entitled to a reply from you, but I find it funny you only reply people confirming your bias, and a detailed answer giving you perspectives you were lacking is ignored. Like improving your CV and bettering your career with the tools and concepts. Concepts that are useful, despite the vendor being Informatica or not. But I guess the post was just you venting, and seeking validation.\nThis is gonna fail miserably.\nDoesn't matter as long as it takes 3+ (actual time) years to implement and produce proper reporting. CIO will get to update his resume with (1) how he standardized and centralized data pipelines and (2) collect bonuses in the mean time. If it works wells, he's a great leader. If the project fails miserably (likely), he's bought himself a ton of time with a big project. Most importantly, you have to propose *a large time consuming project* because that way evidence of success/failure won't be clear for a few years. Also, the more money sunk into the project the harder it is to reverse if it's failing. When you're spending other peoples' money, always go big. And he has the advantage because he was just hired and shooting the proposal down makes the hiring decision look bad.\nYep. You understand.\nIf it works, it will be because the engineering team move earth and sky to make it happen, not because it was a brilliant idea\nummmm.......ummmmmmmm. Okay. From my point of view. My team has a large proposal in with a very large North American bank (they do have a global footprint but not as big as BoA) for modernizing their Informatica environment to the cloud... This is rare. And they are doing it as most of their internal folks are feeling it like you so the bank is going to external partners for the work. And it's very hard to get those resources. So you can look at it two ways: 1) technology wise it is a dinosaur and convoluted. And not sexy. And does not open doors for future opportunities that will help you grow. 2) Since the skillset it getting rare you could have a meal ticket just doing this but being limited to this at very structured corporations (which we all know sucks ass in getting things done). But you can charge a premium for this. I think most would go for 1.\nYou'll likely be fine if you use Informatica to do nothing but extract and load. In that respect these low code tools can be more reliable than the new kids like Fivetran If it was the whole stack though I'd be leaving\nFollow the money! Could it be possible he gets paid personally some way or another to get this multi-year deal signed? Or benefit otherwise? I would suggest to get contract management involved for an audit and compliance check. Because from what I have read so far there are some red flags. But then again I am suspicious by nature ...\nI'd stick around just to watch and learn how not to implement this change. The CIO will probably change jobs in 2-3 years. Think of the good stories you'll have!\nThis is a political issue that cannot be solved using technical solutions. New executive comes in, new project locks him into a position for a few years, doesnt matter what the outcome is.\nBeen there, CIO is familiar with X. Sees current variety of tools as disjoint. Worries about training for hew hires. Gets courted by X sales. Doesnt trust you guys. Goes directly to finance. Announces with no input. Close?\nIMO matillion is also trash lol but seriously run ! My company did the same the CTO wanted to consolidate everything into low code solution (matillion) when our past pipelines uses python + scala + Pyspark .. fast forward to now.. we now have a trash product our churn rate was through the roof.. and our ingest is horrific and the only person who got punished was 1/3 of the company who was laid off while he still has a job.. lmao the cto is such a dumbfuck\nYou missed the point on what the benefits to informatica are.. its not for developers its for business functions. When companies get bigger they have to decide how to manage information and integrations in a way that aligns to the businesss objectives. Arguing from the perspective of tools and flexibility isnt even the same conversation\n\"New CIO\" must be friends and/or got wined-n-dined by the Informatica vendor(s)... next step may be cost-cutting by laying off the \"experienced engineers\" and bringing in some consulting team mix of H1-Bs and offshore. They will milk your company as much as possible until it crumbles into its own inefficiency and go tits up (or get bought by another company for cheap). Happens all the time. Don't jump ship unless you've secured another good job OR stay by making yourself an indispensable SME (don't solely count on your technical expertise, that's unfortunately perishable).\nWe were just offered the chance to port our old Informatica to the cloud version. In my opinion, the cloud version was harder to use than the app version. Everything must be done in drag and drop and there were even more steps in the cloud version than before. It really didnt feel like it was finished - like it was a v1.0 they rushed to market. It seems very hard to automate code generation - youd have to drag n drop everything. Were looking at Glue now, but thats a lot of work to build all the processes.\nRun for the hills!\nMy condolences. I think your CIO and ours mustve gone to the same idiot bootcamp (aka MBA program). Good luck on the job hunt \nIf you have any desire to keep developing your technical skillset, you should test the market and see if you get any bites. This is not a situation worth staying in if you have any ambition.\nIs this a necro post from the 2000s ?\nI know, it's so 2008 or 2014. One reason I'm jaded but asking for advice is because this exact situation happened at a big tech company I was at, and unfortuately it was also with Informatica but then it was just the cloud version of powercenter. This is so much worse because it's not just data integration , we've signed up for data management, product 360, as well as data integration. so the investment and commitment is much much bigger across an ever larger org\nIm sorry to hear this.\nYour CIO may have a side deal between Informatica and himself, such that he gets some personal benefit for having roped the company into the contract. This is a huge conflict of interest. It is illegal in some circumstances and is extremely unethical in any case. Go find some evidence and ruin him with it.\nThey probably plan to outsource some stuff (Just my thoughts)\nWell not much to say. Your analysis is on point. Just leave.\nlol as someone on the vendor side, sounds like some classic top down exec dealmaking. I'd run, informatica is garbage and it won't be great for your CV.\n1. happens all the time 2. cio is getting some nice kickbacks 3. informatica sucks 4. run, run , run\nRun! Having Informatica on your resume will hurt your career. https://trends.google.com/trends/explore?date=all&geo=US&q=informatica&hl=en Here is a graph of the popularity of \"Informatica\". It died nearly 15 years ago. The time to learn Informatica was 20+ years ago.\nthe drop seems to be brutal after 2007 - I guess that the suites realized that Informatica and data in general did nothing to prepare them for the crisis?\nInformatica peaked in 2010. Right about then, Hadoop was gaining popularity. No reasonable person should justify Informatica. It was and is a shit product and painful to use.\n> It was and is a shit product and painful to use. My guess is, it is not *that* shit, since it runs most of the big government institutions, financial and insurance institutions; you know, the places that keeps our society actually running. A pain to use, maybe, but not that shit.\nSure and youd still be making a bad career decision by learning Informatica. The industry is clearly moving in a different direction.\nThis is what corruption looks like lol\nDo a security scan on it. That will make you run. Ab Initio is a very different kettle of fish. Don't know what it is like in the cloud but do know that oeople who have it on their CV go misty eyed over it. The support people were brilliant. The comment I heard was \"loved by everyone who used it, hated by everyone who paid for it\".\nMy god I've only ever seen Informatica as the legacy of legacy \"if it ain't broke don't fix it\" and it's turning a profit. Like original MVP from 10 years ago that was left up because the client still pays for newer stuff. I have never in 10+ years seen an actual move *to* informatica. This is madness.\nI feel ya. Clearly your CIO has some kickbacks from informatica to be able to push this at this day and age of the cloud. Best advice, move on. Informatica is not gonna help the resume at all.\nHi, were hiring at Northbeam - our stack is python, BQ, dbt, Airflow, and terraforming a helluvalot of shit in GCP (not like really, a lot, were data as a product so think analytics, but for hundreds of customers) DM me your ressy(or LinkedIn) for a referral - Ive never had so much fun having such broad scope in a company where the scale is this large\nWhile I appreciate the diverse tooling ecosystem, it's a time sink to manage 15 different tools and vendors. I also think that focusing on data warehouse is one part of the data equation. It is geared towards analytics. A master data plane (and yes, I know what monstrosity informatica is) can do a lot more than just a warehouse, but I don't want to use fivetrann, DBT, some custom code to unify data (an account from CRM and a subscription from the product, are the same thing, different perspectives) something for DQ, something for analytics, something for integration, something for \"Reverse ETL\". That's too much technology. A properly selected modern master data management system can do a lot of this and provide data superpowers to its users. But data teams likes to play with technology:)\nThe Microsoft and dotnet / C# ecosystem has been suffering from crap like this for YEARS. Think SSIS. Im so glad Im finally building the first dotnet job orchestrator, [Didact](https://www.didact.dev). Finally bring us in C# land out of the freaking dark ages.\ncheck this out for liteweight [https://github.com/l-mds/local-data-stack](https://github.com/l-mds/local-data-stack) currently rolling out a bit more enterprise version of this. Ask your leader about analytics engineers or if they want to (eventually) chat with their data. (more self-service) and then discuss if Informatica is supporting you on this road. on the bright side you could do a lot of data related stuff around data quality, governance, catalog, contracts, interface management outside of informatica.\nperhaps it is a good idea to talk about SDLC, audit and compliance of the delivered pipelines and point out that code/ merge requests could be a great option there. (and again discuss if Informatica brings you in the right direction).\nBut if everything is set and you can\\`t change the direction anymore - either you find a way around the core information which is enjoyable for you - or you look for something else\nSomeone is probably attending a \"seminar\" in the Caribbean in two weeks, I bet. By the way, Microsoft isn't free from malfeasance. Before any cloud provider was chosen back in 2013, my CTO somehow ended up attending a two-week training session in Seattle, fully paid for by Microsoft either. (We are a European company, and he didnt really need to travel that far for training.)\nMaybe he's just a Gartner reader, or commission hunter. Personally, I don't have positive experience with Informatica. We have just replace it's metadata/data governance solution, and replace with an open source tool, which is much more better and cheaper\nDo not use matillion\nHopefully you actually use it as an ETL tool. Lots of places Ive worked just use it to execute SQL statements as a glorified orchestration tool.\nWait, I have seen this Movie. And it might have little to nothing to do with Informatica. It could be Talend, Databricks .... I was on core dev team of a product suite for 5years by then. Roadmap had adding much needed feature to under-written Module. Planned to be done 3-4 quarters. Scene -1 A Senior Director calls in directors and architects for demo of a 3rd Part technology. Senior Director declares using and integrating this 3rd Party tech would make our customer happy and bring new ones in. Directors are puzzled as this tech is not solution to any of our product's problems. And some architects raise their concern. Scene -2 Enter Happy hour business model. Next meeting called for discussion, 2 Directors make a complete U-turn, they say we are definitely doing the 3rd party. They have the new Roadmap. An entire team working the needed features in dissolve, module frozen. Multi-year contract worth probably $8-10Million signed with 3rd party for implementation & support. Scene -3 3rd party tech is never reaches even testing stage. Millions & an entire year of another internal team are wasted. 3rd party declares they have delivered 80% and 2 directors agree that there is a smooth handoff, \"we can take it from here\". No one even talks what happened. Next the internal team which raised the alarm is dissolved and marked, laid-off in next couple of quarters. one of the Directors involved is promoted to Senior Director. Was there a Kickback? who knows.\nYeah this is a death sentence for your entire data team and whoever sticks around is going to suffer. Is there ANY possible way for you, your peers, and your managers to attempt to manage upward to stop this migration from happening? You already have a good tech stack going...\nSaw the same at my company with a Mulesoft implementation. Very poorly scoped or thought out and then it comes up in every conversation  \"can we use \\[new tool\\] for this?\"  when the primary person who uses it now wasn't even on board when we bought it. Validating Informatica, leaders of a data consultancy I worked at 5 or so years ago built their early career using Informatica but did not use it at all in the data engineering stack for their own internal projects. Matillion was used on some client engagements but internally no. Technically, I don't know Informatica well, so can't comment on that, but I'm familiar with the decision process you described and the road ahead is frustrating. On warehouse/data store, especially for small teams or individual projects, I've really been enjoying DuckDB. Such an improvement over sqlite and the ability to [host directly](https://duckdb.org/docs/guides/network_cloud_storage/duckdb_over_https_or_s3) over HTTPS or S3 is very cool and simple. To add: I recently used it for a project that required storing and doing some mean pooling over word embeddings using DuckDB's ARRAY datatype.\nThat's what they do. Seen it many many times. Yes Informatica sucks and is outdated. Decide for yourself if this means finding a new job.\nCIO missed the team decision thing get ready for a ride with Informatica Hope you're good at avoiding unneeded software and fake stuff Crazy right\nInformatica is a streaming pile of garbage. Even SSIS is so much better and intuitive than informatica Jump ship imho. I am part of a team migrating away from informatica. It's always a pain in the ass to even migrate informatica logic out, can't imagine moving into it in 2024 with no real reasoning\nHe is getting a cut for sure.\nYup!\nI'd start looking elsewhere. You'd find a lot of good opportunities based on the tech stack you described. You'd benefit from not using some mediocre technology which curtails future job opportunities, improve upon existing skills and may add new ones in the right role/company.\nThis happened to me with DataStage years ago. Get out of there if you can\nNobody thinks Informatica is part of a Modern Data Architecture. Screw the company, take care of yourself. Act quickly.\nI know my question is not relevant to this post but I saw that you'all are experienced that's why ask. I'm a 1 year experienced data engineer but haven't work with tools like dbt, dagster, apache airflow, snowflake. I want to know where to start and focus on actual used use-cases.\nCondolences to you and your team u/Foodwithfloyd! We see people fleeing Informatica at a frantic rate over the past 6 months. Outdated tech for a ridiculous price point. All the best with the implementation or the new role!"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "",
        "author_fullname": "t2_7trlcwhp",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Orchestrating data pipelines across services and APIs like a Christmas tree",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": 78,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hixfym",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.87,
        "author_flair_background_color": null,
        "ups": 200,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": 140,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": true,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Meme",
        "can_mod_post": false,
        "score": 200,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "https://b.thumbs.redditmedia.com/CjUWm3yLoH2QBf8PsSW4bo9SJHrg6tgNEUsIhRI3ZKg.jpg",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "post_hint": "image",
        "content_categories": null,
        "is_self": false,
        "subreddit_type": "public",
        "created": 1734739405.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "i.redd.it",
        "allow_live_comments": false,
        "selftext_html": null,
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "url_overridden_by_dest": "https://i.redd.it/4ib6tqyre38e1.gif",
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "preview": {
            "images": [
                {
                    "source": {
                        "url": "https://preview.redd.it/4ib6tqyre38e1.gif?format=png8&amp;s=e78c2ca065a97032eaa8b22914e001854ce6fab3",
                        "width": 1920,
                        "height": 1080
                    },
                    "resolutions": [
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=108&amp;crop=smart&amp;format=png8&amp;s=b8bc5fb0b4ae1243e746edf3d0d2b21b45e5ba51",
                            "width": 108,
                            "height": 60
                        },
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=216&amp;crop=smart&amp;format=png8&amp;s=9b69147fe5ebca0e9509ef952c419298a79becbd",
                            "width": 216,
                            "height": 121
                        },
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=320&amp;crop=smart&amp;format=png8&amp;s=e08d0a35fd3193d748c260bc9da922e052eb31f6",
                            "width": 320,
                            "height": 180
                        },
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=640&amp;crop=smart&amp;format=png8&amp;s=96884f08b1d4bfcdfba14103608a540e0d54ddab",
                            "width": 640,
                            "height": 360
                        },
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=960&amp;crop=smart&amp;format=png8&amp;s=13f6f10443e7ffbe40d8308b486145e291bfeea2",
                            "width": 960,
                            "height": 540
                        },
                        {
                            "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=1080&amp;crop=smart&amp;format=png8&amp;s=d6aca133d9f0f6de0d8451803361d033825df64f",
                            "width": 1080,
                            "height": 607
                        }
                    ],
                    "variants": {
                        "gif": {
                            "source": {
                                "url": "https://preview.redd.it/4ib6tqyre38e1.gif?s=f0de1f4eee5bfa0536811bc4404298d0eda2266e",
                                "width": 1920,
                                "height": 1080
                            },
                            "resolutions": [
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=108&amp;crop=smart&amp;s=787d15f369bb971b781fbd1b73f94ca449a1e23d",
                                    "width": 108,
                                    "height": 60
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=216&amp;crop=smart&amp;s=7f116a7aef77b9b86ce9cc74fee6c4aab94063c5",
                                    "width": 216,
                                    "height": 121
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=320&amp;crop=smart&amp;s=bbdddebb49e628791654fca8609216d038cfdb54",
                                    "width": 320,
                                    "height": 180
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=640&amp;crop=smart&amp;s=5835c08d8f97db31f823ae9a66ea219c60db32f4",
                                    "width": 640,
                                    "height": 360
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=960&amp;crop=smart&amp;s=57c4754a77bffe93318f68c3bba80fee8d8fb0a5",
                                    "width": 960,
                                    "height": 540
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=1080&amp;crop=smart&amp;s=d110ad00f0ab6460e58a125593ff02f766b25b16",
                                    "width": 1080,
                                    "height": 607
                                }
                            ]
                        },
                        "mp4": {
                            "source": {
                                "url": "https://preview.redd.it/4ib6tqyre38e1.gif?format=mp4&amp;s=4ad67fdce590773ceb3f99dc7144572e73d39280",
                                "width": 1920,
                                "height": 1080
                            },
                            "resolutions": [
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=108&amp;format=mp4&amp;s=855f1950fc31242bc2dbeba0cf8c55e17e07682e",
                                    "width": 108,
                                    "height": 60
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=216&amp;format=mp4&amp;s=4579402c16e5145b80dd0271beb39a4c2da6e25b",
                                    "width": 216,
                                    "height": 121
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=320&amp;format=mp4&amp;s=f4095bcdecd2a3a93df6abe3462e0a7e26e70a8d",
                                    "width": 320,
                                    "height": 180
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=640&amp;format=mp4&amp;s=0c9ade9a96f74de02a37f3a7f706020cd80f0c74",
                                    "width": 640,
                                    "height": 360
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=960&amp;format=mp4&amp;s=778dda1daf0f08792aa01f578c5cf7a0d13265fb",
                                    "width": 960,
                                    "height": 540
                                },
                                {
                                    "url": "https://preview.redd.it/4ib6tqyre38e1.gif?width=1080&amp;format=mp4&amp;s=668921814e817eefedc0734c1a55b64b22b44d75",
                                    "width": 1080,
                                    "height": 607
                                }
                            ]
                        }
                    },
                    "id": "nJI0qgg4fMDbmk4o9ByVoGmUESRe5WQ9sscUZ19nU_Y"
                }
            ],
            "enabled": true
        },
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "dc9742bc-a7de-11eb-a2e7-0e0348c8a4c1",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "mod_note": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "num_reports": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff66ac",
        "id": "1hixfym",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Various-Might5115",
        "discussion_type": null,
        "num_comments": 10,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hixfym/orchestrating_data_pipelines_across_services_and/",
        "stickied": false,
        "url": "https://i.redd.it/4ib6tqyre38e1.gif",
        "subreddit_subscribers": 243450,
        "created_utc": 1734739405.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Ads are getting smarter\nNot that smart. Account is 4 years old with 0 comments or posts until 2 hours ago, then 3 duplicate posts and comments back to back.\nYes I was mostly just reading stuff until this point and wanted to post this as I was just really excited about it. I removed the product name so that it doesn't feel like an ad. Also its flair-ed as a meme.\nEhh I have seen worse like your DuckDB will magically get upvoted and mentioned in every thread. This is at least novel\nI mean duckdb is amazing \ndoes sne know she's an ad?\nThis exact same post, but claims to be of microservices. https://www.reddit.com/r/microservices/s/h5OBwYAxQr\nProduct spam\nWhat tool is it?"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Not sure what\u2019s going on at the moment, seems to be that companies are just putting feelers out there to test the market. \n\nI\u2019m a Python/Azure specialist and have been working with both for 8/5 years retrospectively. Track record of success and rearchitecting data platforms. Certifications in Databricks as well as 3 years experience. \n\nHell i even blog to 1K followers on how to learn Python and Azure. \n\nAnyone else having the same issue in the UK?",
        "author_fullname": "t2_kmqub9js",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "The job market in Data Engineering is tough at the moment, applied for 40 jobs as a current Senior Data Engineer and had 3 get back and then ghost. Before last year I had loads lined up but decided to stay.",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hsnbca",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.94,
        "author_flair_background_color": "transparent",
        "subreddit_type": "public",
        "ups": 177,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": "980947cc-e787-11ed-87e3-ae81ee052dfe",
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Discussion",
        "can_mod_post": false,
        "score": 177,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735913523.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Not sure what\u2019s going on at the moment, seems to be that companies are just putting feelers out there to test the market. &lt;/p&gt;\n\n&lt;p&gt;I\u2019m a Python/Azure specialist and have been working with both for 8/5 years retrospectively. Track record of success and rearchitecting data platforms. Certifications in Databricks as well as 3 years experience. &lt;/p&gt;\n\n&lt;p&gt;Hell i even blog to 1K followers on how to learn Python and Azure. &lt;/p&gt;\n\n&lt;p&gt;Anyone else having the same issue in the UK?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "92b74b58-aaca-11eb-b160-0e6181e3773f",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": "Principal Data Engineer",
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff4500",
        "id": "1hsnbca",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "ThrowRA1029384759",
        "discussion_type": null,
        "num_comments": 77,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": "dark",
        "permalink": "/r/dataengineering/comments/1hsnbca/the_job_market_in_data_engineering_is_tough_at/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hsnbca/the_job_market_in_data_engineering_is_tough_at/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735913523.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Many LinkedIn job postings are misleading or outright fake, so relying solely on LinkedIn for your job search might not be the best strategy. A while back, a developer shared an eye-opening experience about this issue. After months of getting nowhere on LinkedIn, they switched tacticsusing Google Maps to find companies in their field and directly sending resumes to hundreds of them. This proactive approach finally landed them multiple job offers. (Here's their story if you want to check it out: [https://www.reddit.com/r/RemoteJobseekers/comments/1fdpeg2/how\\_i\\_landed\\_multiple\\_remote\\_job\\_offers\\_my\\_remote/](https://www.reddit.com/r/RemoteJobseekers/comments/1fdpeg2/how_i_landed_multiple_remote_job_offers_my_remote/)). To improve your chances, consider making a list of companies you'd like to work for, then consistently check their websites for new job postings. This way, youll focus your efforts on real opportunities and avoid wasting time on unreliable listings.\nI completely agree with what you said. Also, 40 applications isnt really that many\nLinkedin quick apply doesn't really count as applying if that's what you're doing since it's just a lottery system where 90% of the application resumes won't even be opened. Personally, I'm convinced a lot of these quick apply positions are just gathering personal info and selling the data. Recruiters are on the rise as well, so it's worth hitting some of them up (who post positions from solid companies)\nAgreed - never, ever apply via LinkedIn. Go directly to the company site and apply that way, and then use LinkedIn to try to find a connection who works there and can refer you. It seems like it's getting to the point where you pretty much have to have a referral to get through to a person.\nYes I cant stress this enough. Never use LinkedIn or Indeed to apply. Find the jobs there and go directly to the company website. Make sure you flip the switch so recruiters know you are available but without that dumb thing that says open to opportunities\nI just got hired through easy apply. The recruiter was very up front and told me 90% of easy apply applicants are actually bots/unqualified/burner accounts. They got back to me the same day and set me up for an interview  It's rare that it works but not impossible\nhonestly, alot of data engineering roles don't even call themselves data engineering. I've seen an insane amount of data analyst/intelligence analyst/data associate postings where they claim to be looking for just a regular analyst when really they want an engineer to actually manage their databases for them while creating some dashboards.\nJust 40. SDE market is no better either\nIn addition to the points about the market downturn and it having been Q4, check out the (ridiculously-titled) 2-Hour Job Search book. Making applications online is far too easy now, people even do it with bots. The only way is networking, and that book provides a proven system for using your network to find jobs. Its required reading for Duke MBAs.\nDon't despair - 40 applications is not much, and you're probably facing a healthy amount of competition. There are economic factors at play. 2022-2023 saw a lot of layoffs from large tech companies because they were bloated with employees after the post-Covid mad rush to hire. The people that were laid off were being hired in late 2023-early/mid 2024. There was a presidential election, and companies usually slow down hiring until it becomes a little clearer what the president-elect's economic plan is. Hiring between Thanksgiving and New Year always slows down, and doesn't restart until mid/late January. A few ideas to improve your chances: * If you don't have LinkedIn premium, get a subscription and for every job you apply, try to find who the HR/talent acquisition/hiring manager is. Often times, the person that posted the job will be shown on the job description. * Show the companies that you're interested in them. Companies get (tens of) thousands of job apps monthly - you need to raise your application above everyone else. Go to company's sites and try to find some recruitment or contact email there. Often times when you send an email to the general contact email (e.g. sales@company.com) your email will be received by multiple people inside the company. Even if someone in sales gets it, they may forward it to whatever team. At least, that's what happens often in our company. I am a hiring manager of developers/solution architects and can tell you not to (heavily) rely on LinkedIn apply. For a remote software dev role I opened a month ago on LinkedIn, I received over 400 applications within a week, and a total of 900 a month later. No one has time to screen so many resumes, so the hiring managers & HR often times use a few of the filters on the LI's hiring portal, roll the dice and interview some candidates. It's an unwritten rule for experienced hiring managers never to look for the best candidate, but the right one. I want to hire people fast, because there is work to be done, I want the candidates to have the required skills, fit somewhat in the company's culture, and ask for a salary that my finance team has approved. Lots of factors to consider... Hiring is never a \"fair\" process. It's a dry, unexciting process that we all have to go through many times in our lives, unless you can build a widget and start your own company. Applicants and hiring managers hate it equally. It's all about getting noticed in the field of resumes which look 99% the same.\nIn which month did you start applying? I think you will get more call backs from the month of February.\nYeah company budgeting in Dec/Jan seems to result in sort of a cyclical slowdown\nIt's overall like that man. We should have become dentist not data engineers.\nThis is funny because I became a data engineer instead of a dentist and now I am dealing with json\nRoot canal to root cause\nSorry for your loss man\nPros and cons with any profession. You cant wfh as a dentist. You also need way more school.\nAs a data engineer I enjoy the absence of bodily fluids and smells of decomposing tissue in my bread and butter work\nYeah also that. Theres a million things.\nReject the weakness of flesh. Embrace the purity of ~~steel~~ silicon!\nDentists have the highest you know what rates of any profession\nTeeth cleaning? Safari trips in Africa?\nYou get me \nKPIs?\nThat's an urban myth.\nTeeth?\nI actually dont think we know what.\nYou know you can say suicide, right? Reddit doesn't censor stuff. Not sure why people decided we shouldn't say suicide/murder/kill/gun/etc anymore.\nWho cares\nIs data engineering even a career path worth pursuing anymore?\nNo it's not because the job is not projected. Become a doctor or an protected field.\nGet humbled\n40 applications is not alot.\nYeah, I applied for 2000 plus jobs and only had 5 interviews.\n2000? Do you have a bachelor or master in data?\nMasters in business analytics in US. And, I'm talking abt US market.\nMust be dogshit to live in the US, jobmarked is dogshit from what ive heard here i Europe. They wont hire because of high interest rate, inflation and so on \nThat's mad Are you outside of London? Seemed to be TONNES of data engineering jobs last year in London. Linkedin and \"welcome to the jungle uk\" we're the only places I managed to get leads though. All other job boards were dead.\nP.s. you have a very in demand skillset\nOutsourcing and h1b is going on lol\nH1B is likely not the issue in the UK.\nDo you live under a rock? First things first - tech isnt growing at any kind of exponential rate- the market is in a huge slowdown and contraction. Secondly, even when times are good - no one hires in Q4.\nIve been hired in Q4 multiple times. Tech is in the biggest growth cycle weve seen for a long time to due to Machine Learning and the AI buzzword. Not sure what rock Im living under but youre probably best looking out from under your own hahaha! Happy new year!\nYeah your post sure highlights the positive hiring impact that AI has had on the industry. The quality of posts in this sub are straight trash now.\nHow have you been hired in Q4 multiple times in a reasonably short career? How are you so sure there's a growth cycle if employment prospects are so poor?\nIm 31 been working since I was 18. Been in IT since I was 18 and been officially in Data since 23. I usually stay at organisations for 2 years before moving on. Theres 1000s of jobs online Im specifically talking about the hiring process is whack, which makes the market tough if orgs arent actually looking for people due to it being Q4 then why place ads?\nJust a thought - your 2 year then move philosophy could be noticed by companys as a risk\nYou could have included that second line in the post, and we'd have been able to tell you the issue. Job hoppers get tossed during downturns. 3-5 years is the middle ground between job hopper and staying too long.\nI feel your pain (sort of). It took me over 500 applications to land my current job, as a junior/intermediate. The market is super challenging right now.\nI applied to over 300 hundred tech jobs, got ~8 interviews, a few went multiple interviews deep but only 1 offer which I took. Its tedious and you gotta have perseverance. Make sure you have good soft skills, some business sense and worked on some interesting projects because a zillion people know python and Azure-need other ways to stand out.\nI watch the market closely from a US perspective and yeah it's still slow as it has been for recent years. I still see more roles showing up in foreign (Asia, LATAM, etc) countries which is discouraging for US, UK, CA, etc. Similar story across all software engineering and really anything tech.\nInteresting, how do you keep an eye on foreign DE job markets?\nWatch a couple aggregator's that collect global market openings. Done that for a long time, shift has been pretty obvious.\nAs soon as it dawns on people that you cant just hook up an LLM to any data source and flawless integrate with any platform or build accurate BI easily.. Then I think DE roles will stabilise a bit. There is a bit of a misconception I feel that data cataloguing and all that good stuff isnt needed anymore with the GenAI hype train. Otherwise, Q4 is never a good time to look. Sure you can find roles but especially for large enterprise companies Q4 is manic closing down year, getting funding for following year and then relax So hiring goes on back burner.\nCant agree more. Garbage in garbage out, once they realize that DE positions should come back strong.\nI'm currently working my first DE job, but I have 7+ years of analytics experience. I applied to 150 jobs starting from end of August to February 2024. I was getting most of my calls after the holidays-three were DE/DE equivalent and one was senior analyst. Didn't want the latter job b/c I felt overqualified. I started my job about 4 months after I applied for it. I do think you get back most calls after the holidays.\nHmmm this is not good. I have a couple of year experience as a Spark SQL developer in Databricks, alongside 20 years SQL Server. I finished my last contract role 6 months ago, and have been looking since then, but the market is very quiet. I have been studying for exam DP 203 Azure Data Engineer, which I should be able to pass in the next week or two. But I'm not optimistic it will help much with my job search.\nGenuine question, I do not pretend I know a better answer, is it possible this is because the market has shifted more towards other tooling (eg. dbt), or broader skillsets (eg. AI / ML)?\nDuh... the tech job market has been terrible for 2 years now. It wasn't going to magically get better for no reason.\nYea the market for seniors is even bad now. I am hoping to jump up to team lead soon hoping that will have less competition. But no guarantee of that either\nIn which country are you applying?\nIndeed and Reed for Azure and Python.\nI hopped jobs in 2022. Three weeks from first resume to hiring. Had five interviews with like 15 applications. Cant imagine how hard it is now. Good luck.\nCan you please share your blog which you mentioned in the post @OP\nReddit wont let me send a chat through the mobile web Ui. But if you are interested in a phone screen for a potential referral, please reply (so I see the notifications) and we can chat. I work in big tech and would be happy to help with an interview if the skill sets line up.\nNobody hires during Q4 afaik.\nAre you looking at roles in London? Full remote? When I looked \\~4-5 months ago I found that a lot of roles were expecting some in-office time, seems to be an overall trend.\nEnd of the year, half the people are on PTO\nInteresting, I just had the exact opposite experience and I'm also EU. Although admittedly you're probably more expensive than me.\nWhat goes around comes around, keep at it. Next time it heats up youll be ready to go.\nYou need to get up to 200+ with referrals before getting any real traction , its rough\nwhat are your rough conversion rates on the 40 applications? How many 1st stage/final stage interviews? Market is bad but I've seen tons of good roles. How's your CV performing?"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Hi everyone! I got my first Databricks certification last week! It wouldn\u2019t have been possible if it hadn\u2019t been for Reddit and a couple of bucks. At first, I was so lost about how to approach studying for this exam, but then I found a few useful resources that helped me score above 90%. As a thank you (and also because I didn\u2019t see many up-to-date posts on this topic), I\u2019m sharing all the resources I used.\n\nDisclaimers:\n\n* The voucher was paid for by the company I work for.\n* The only thing I paid for was a 1-month Udemy Personal Plan subscription (the Personal Plan allows you to explore numerous courses without having to make individual payments).\n\n**Resources**:\n\n1. **Mock Tests** These were the most useful. You\u2019re studying for an exam rather than directly for Databricks, so emphasize the questions (and the way they\u2019re presented) that appear on the exam. My personal preference order: [Practice Exams | Databricks Certified Data Engineer Associate (Udemy)](https://www.udemy.com/course/practice-exams-databricks-certified-data-engineer-associate/learn/quiz/5731990/) It contains most of the questions you\u2019ll find in the exam. If I had to guess, around 70% of them appeared in the real exam. [Databricks Certified Data Engineer Associate | Practice Sets (Udemy)](https://www.udemy.com/course/databricks-certified-data-engineer-associate-practice-sets/learn/quiz/6227872) Some reviews mention incorrect answers, spelling mistakes, and difficult questions, but it\u2019s still worth doing. The mock tests are divided into six sets, three of which focus on two topics at a time, like a revision set. This approach helps you concentrate on specific areas, such as \u201cProduction Pipelines,\u201d because you\u2019ll get 20+ questions per topic. [Databricks Certified Data Engineer Associate Practice Tests (Udemy)](https://www.udemy.com/course/databricks-certified-data-engineer-associate-practice-tests/learn/quiz/5596958/) This one is quite challenging without prior experience in Databricks. Skip it if you\u2019re already comfortable with the first two, but it\u2019s there if you want extra practice.\n2. **Courses** I know it\u2019s odd to put mock tests first and then courses, but trust me, if you already have Databricks experience, courses might not be strictly necessary because they tend to cover basics like %magic commands or attaching a cluster to a notebook. However, if you need a complete and useful course to sharpen your knowledge, here\u2019s the one my colleagues and I used: [Databricks Certified Data Engineer Associate (Udemy)](https://www.udemy.com/course/databricks-certified-data-engineer-associate/learn/lecture/34664610) It\u2019s simple, complete, and gets straight to the point without extra fluff.\n3. **ChatGPT** Despite what some might think, ChatGPT is invaluable. Not sure what LIVE() is? Ask ChatGPT. Want to convert something into Spark SQL? Ask ChatGPT. Need to ingest an incremental CSV from AWS S3? Ask ChatGPT. If the documentation isn\u2019t clear or you\u2019re struggling to understand, copy and paste it into ChatGPT and ask whatever you want.\n4. **Reddit User:** [**Background\\_Debate\\_94**](https://www.reddit.com/user/Background_Debate_94/) Not much to add other than: thank you, Background!\n\nP.S.: Spanish is my mother tongue, and I work as a Lead Data Engineer. I have some Spanish texts I\u2019ve written that go into detail on many topics. If anyone is interested, feel free to DM me (I won\u2019t translate 100 pages, sorry xd).",
        "author_fullname": "t2_1evqrn604a",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Databricks Certified Data Engineer Associate - I PASSED!!!",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hsnqzv",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.96,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 178,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Career",
        "can_mod_post": false,
        "score": 178,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1735914784.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone! I got my first Databricks certification last week! It wouldn\u2019t have been possible if it hadn\u2019t been for Reddit and a couple of bucks. At first, I was so lost about how to approach studying for this exam, but then I found a few useful resources that helped me score above 90%. As a thank you (and also because I didn\u2019t see many up-to-date posts on this topic), I\u2019m sharing all the resources I used.&lt;/p&gt;\n\n&lt;p&gt;Disclaimers:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The voucher was paid for by the company I work for.&lt;/li&gt;\n&lt;li&gt;The only thing I paid for was a 1-month Udemy Personal Plan subscription (the Personal Plan allows you to explore numerous courses without having to make individual payments).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Mock Tests&lt;/strong&gt; These were the most useful. You\u2019re studying for an exam rather than directly for Databricks, so emphasize the questions (and the way they\u2019re presented) that appear on the exam. My personal preference order: &lt;a href=\"https://www.udemy.com/course/practice-exams-databricks-certified-data-engineer-associate/learn/quiz/5731990/\"&gt;Practice Exams | Databricks Certified Data Engineer Associate (Udemy)&lt;/a&gt; It contains most of the questions you\u2019ll find in the exam. If I had to guess, around 70% of them appeared in the real exam. &lt;a href=\"https://www.udemy.com/course/databricks-certified-data-engineer-associate-practice-sets/learn/quiz/6227872\"&gt;Databricks Certified Data Engineer Associate | Practice Sets (Udemy)&lt;/a&gt; Some reviews mention incorrect answers, spelling mistakes, and difficult questions, but it\u2019s still worth doing. The mock tests are divided into six sets, three of which focus on two topics at a time, like a revision set. This approach helps you concentrate on specific areas, such as \u201cProduction Pipelines,\u201d because you\u2019ll get 20+ questions per topic. &lt;a href=\"https://www.udemy.com/course/databricks-certified-data-engineer-associate-practice-tests/learn/quiz/5596958/\"&gt;Databricks Certified Data Engineer Associate Practice Tests (Udemy)&lt;/a&gt; This one is quite challenging without prior experience in Databricks. Skip it if you\u2019re already comfortable with the first two, but it\u2019s there if you want extra practice.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Courses&lt;/strong&gt; I know it\u2019s odd to put mock tests first and then courses, but trust me, if you already have Databricks experience, courses might not be strictly necessary because they tend to cover basics like %magic commands or attaching a cluster to a notebook. However, if you need a complete and useful course to sharpen your knowledge, here\u2019s the one my colleagues and I used: &lt;a href=\"https://www.udemy.com/course/databricks-certified-data-engineer-associate/learn/lecture/34664610\"&gt;Databricks Certified Data Engineer Associate (Udemy)&lt;/a&gt; It\u2019s simple, complete, and gets straight to the point without extra fluff.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;ChatGPT&lt;/strong&gt; Despite what some might think, ChatGPT is invaluable. Not sure what LIVE() is? Ask ChatGPT. Want to convert something into Spark SQL? Ask ChatGPT. Need to ingest an incremental CSV from AWS S3? Ask ChatGPT. If the documentation isn\u2019t clear or you\u2019re struggling to understand, copy and paste it into ChatGPT and ask whatever you want.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Reddit User:&lt;/strong&gt; &lt;a href=\"https://www.reddit.com/user/Background_Debate_94/\"&gt;&lt;strong&gt;Background_Debate_94&lt;/strong&gt;&lt;/a&gt; Not much to add other than: thank you, Background!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;P.S.: Spanish is my mother tongue, and I work as a Lead Data Engineer. I have some Spanish texts I\u2019ve written that go into detail on many topics. If anyone is interested, feel free to DM me (I won\u2019t translate 100 pages, sorry xd).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "069dd614-a7dc-11eb-8e48-0e90f49436a3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#349e48",
        "id": "1hsnqzv",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "Manuchit0",
        "discussion_type": null,
        "num_comments": 17,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hsnqzv/databricks_certified_data_engineer_associate_i/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hsnqzv/databricks_certified_data_engineer_associate_i/",
        "subreddit_subscribers": 243450,
        "created_utc": 1735914784.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "Thanks. I going to do this, this year actually.\nI believe, there will be 50% off offer this January\nGood job, and thanks for the summary. Do you use Databricks at work? Because they make training materials available on customer-academy.databricks.com. Can you comment on why you didn't use any official Databricks training materials?\nThanks Round! Happy to help! Yes, we do use Databricks, and I proposed it myself. I got hired a couple month ago as a Team Lead Data Engineer, with the company's intentions of creating a D.E team. I currently have the responsability of building \"mini\" teams for consulting proyects (Sorry I forgot to mention I work for a consultant compay) and also selecting the software to be used for each project. Regarding the official Databrick training materials... It did not fit with the way of learing of my team. Most of them are still Jr programmers wanting to \"create\" rather than learn. As you can see, the official training Databricks material although it's complete in content, it's too complete for their taste. You learn most of the topics working than studying. Also we are not \"customers\" of databricks officialy, so training official materials are expensive.\nThanks for the detailed response. > did not fit with the way of learing of my team. I totally get it. This is an issue with most of the platform training I've seen. There's a bunch of high level material that puts people to sleep, some practical stuff that's out-of-scope for the specific company, and relatively little that people can immediately implement and make a contribution to the team.\nI couldn't agree more. Mostly because in the day to day the client won't be asking you same questions as the exam. That is why I state a clear difference between certification and knoledge. Certifications are for CVs, and knoledge is experience. One can solely study for an exam (types of questions, ways to answer, questions structures, etc) and pass, but not knowing what it is studying for. It's CRUCIAL to have experience with the tool before taking any certification.\nCongrats! I got my certification last year, I'll just leave a note: I found the resources I used from Udemy slightly outdated so I wouldn't skip the Databricks course, it can also be nice to get some actual practice since it has notebooks with examples and exercises.\nThanks and congratulations on your certification!!!!! The same happened to me. But as I said, if you already have experience, it isnt necessary. I used the courses as a review for the exam. Also, sometimes the official Databricks course felt boring or too long for my taste.\nThats awesome. Im planning on taking it later this year\nThanks for sharing this.\nThanks. I will also be attempting to do it this year. But need to learn it. I work on ADF ,dbt , Snowflake but want to add ADB/Databricks as this skill had the most jobs in Indian IT space\nAwesome! Feel free to ask any questions... adding Databricks to your stack when you already know ADF is a big plus in your C.V\nYes exactly. Can you guide me where and how to start ?\nThere is no specific starting point. Just try the tool, play with it, and by the time you feel comfortable with its functionalities, you will already know if you are prepared for a working environment or ready to take a certification\nhttps://codebox.code.blog/ Check this blog with all info."
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "No idea if anyone will find this useful, but ask away. \n\nI've been a senior-level Data Engineer for years now, and an odd success story considering I have no degree and barely graduated high school. AMA  ",
        "author_fullname": "t2_15k33x2k",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "I'm a self-taught DE who weaseled my way into the tech world over 10 years ago. AMA!",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hbhj5u",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.89,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 167,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Career",
        "can_mod_post": false,
        "score": 167,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1733878982.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;No idea if anyone will find this useful, but ask away. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been a senior-level Data Engineer for years now, and an odd success story considering I have no degree and barely graduated high school. AMA  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "069dd614-a7dc-11eb-8e48-0e90f49436a3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#349e48",
        "id": "1hbhj5u",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "jeffvanlaethem",
        "discussion_type": null,
        "num_comments": 141,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hbhj5u/im_a_selftaught_de_who_weaseled_my_way_into_the/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hbhj5u/im_a_selftaught_de_who_weaseled_my_way_into_the/",
        "subreddit_subscribers": 243450,
        "created_utc": 1733878982.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "What do you think will the future of DE look like?\nGood question. I've had a hard time sussing out what's down the road besides \"cloud\" from the start. Frankly what i work on now isn't super different from what I worked on a decade ago. End of the day, I help get data into an analytical format. I picture in 20 years I'll be helping get data into an analytical format. Just not sure how that looks lol.\nWhere were you on the morning of December 4th?\nCertainly not on the east coast lol!\nDumb question but are you hiring \nLol sadly no. I'm happy to have survived a couple rounds of layoffs myself.\nAh well worth a try .\nWhat's the next level for you?\nThat's actually a good question - I've thought about management-type roles, but I really enjoy the technical side of this too much I think. A couple years ago I took a position that's been lots of platform engineering in GCP to enable other DEs to do their stuff, which I'm still really enjoying. Frankly I'm happy to be doing what I'm doing until I see something cool come along. Go with the flow.\nNext step is Staff Data Engineer if you feel that way. Read this book: Staff Engineer: Leadership beyond the management track https://a.co/d/3aHk6Nj\nHey man good for you, thats kind of my dream job right now (and sorta-ish my actual one).\nWhen did Imposter syndrome disappear?\nIt didn't. And I think it won't. But I've learned to recognize it when it happens and realize that everyone experiences it. I think understanding what you know and what you don't know helps mitigate the feelings.\nSimilar to OP I'm 'self taught'. For me it was after 10 years. I got to a senior enough position and had worked on enough platforms that I started to be able to quickly and easily tell that there were people I was working with that *really* didn't understand what was going on, and I was having to teach them, consistently. It still comes up from time-to-time as you grapple with higher roles. Having to argue with various levels of tech executive leadership you may think they must really know things you don't... until you see them clearly miss the mark on some tool or feature. My advice would be to be confident, but humble. You should push your case and believe in yourself, but be prepared to be wrong and realise that it's ok - it is more important to get the right result than it is for you to be right personally.\nHow you landed in job? I believe for learning lot of resources available. But what was the path taken for landing at a job.\nI worked in a call center, and frankly I sucked at it. One of the department administrators quit and luckily management thought i could help run the department. Everything was a mess in that position, and I started looking for ways to automate things. I found out about relational databases and fell in love. I did everything I could to learn, and one day the actual data team in the company took notice of what I was doing. They gave me a junior ETL role and I took off from there. I'm grateful for a few people who took a chance on me. And grateful I didn't mess those chances up!\nSo in short. People contact and networking helps.\nCertainly doesn't hurt, can't deny that.\nI just wish I could grab the attention of other people and get that opportunity, even at a low income. I would still be learning fast. For that opportunity I would stay for a few years at the least. To give back the opportunity and also hone my skills.\nThey sucked at their job and yet, when a department head quit, they were given the job. The next job after that was as a Junior ETL developer. This trajectory makes no sense, so OP has a unique story that cannot be repeated. It is also unlikely they will tell us the full real story.\nFunny enough, their story is very similar to mine.\nNot a department head. Someone who \"ran numbers\", \"tracked things\", etc. I wasn't a great phone worker, but apparently management saw that I'd be a better fit for that type of work. I was reliable and smart. From there, it took a few years of work, learning, and doing to go anywhere. I showed loads of initiative and wouldn't take no for an answer when it came to implementing things I learned. I convinced the customer service people that using a relational database was a good idea for the metrics they wanted to track, and they got me in touch with the data group in the company. After more work, they took notice of what I was doing. I really don't think it'd be easy to replicate my trajectory. But who knows? Being able to claw through the couple years leading up to my tech career in one company was very helpful.\nWow thats quite impressive\nThat is some serious drive. Inspiring! I am a data analyst at the moment, hope to break more in DE as well. Can I ask how did they notice you in first instance? Are you very good in people skill as well?\nCommunication and people skills are vital! Not even for my trajectory, but for tech jobs in general. Being able to effectively communicate between business users, other IT teams, leadership, etc makes thing much easier. Regarding how I got noticed: I had convinced my department management that using a relational databases would be way better than Excel for some things. She got me in touch with the data team, who was wary of me, and rightly so. I went over what I wanted, basically an empty database somewhere that I could develop as I wished. They had an old server with little else on it, so provisioned me a database on it. A couple months down the road, they reached back out to me to ask if they needed to be backing up the database with ful logging. Told them no, and after talking for a bit they started looking at what I had created. They initially had thought I was going to load an excel file in there or something. Instead they saw a normalized database with referential integrity, stored procedures, consistent naming conventions, etc. They asked where I got the schema from. I told them I made it. We talked a lot more over lunch. Then a while later I had a job offer for a junior ETL person.\nAre you me? Senior DE. Started in Customer Service > bounced around team lead positions etc. >Fell in love with Excel > learned sql and rdbs > Sales Analytics > BI Developer > DE+\nNice! Cool to see more \"mes\" out there.\nWhered you start in customer service?\nI'm going to start a new junior position at my company early next year. This is my first venture into DE. I know SQL, Python; and basic Haskell, basics of Spark, Hadoop, Snowflake, GCP with little hands-on experience. My senior DE suggested to know more about the business side of things (Retail company) along with technicals. Any advice on first steps in DE, getting better at technical and business aspects?\nCongrats, that's awesome! A big part of a new position is learning and understanding the business, its data, etc. Whatever you do, don't be afraid to ask questions. As far as learning the business before being able to look at the data structure... not sure how you can do that. I've seen businesses in the same sector have very different data, from very different sources. As far as brushing up on technical skills, ask what technologies they're using (if you don't know already), and dive deep on those.\nWhats the approach youd suggest to someone who wants to be a self-taught DE like you in todays tech industry?\nPractice! Start DOING as much as possible. When i was starting out I found interesting datasets, downloaded them, put them in SQL Server, and started querying and making SSIS packages. You have to really enjoy the work, and the process for sure. And learning best practices is difficult.\nDid you follow a road map for learning DE?\nI really started with relational databases and SQL. I had a very good grasp on that before even knowing what ETL is. I learned about ETL and Data Warehousing next. As everyone started wanting to move to the cloud, I dove into everything GCP. I didn't have a specific road map, but looking back i think it was a good path.\nNot trying to be a dick, but no one is doing what OP did this side of 2023. Huge congrats to them though\nI doubt it happened much \"back in my day\" either. I'm very aware that some excellent people gave me opportunities, and it took a ton of hard work and dedication.\nit's a 1 in a million. ATS will filter you out if you don't get proper industry experience and education background.\nIt helps to start in a smaller market where there aren't that many people familiar with the tools, so smaller operators may take a chance on you with smaller pay. As long as you do the same kinds of work and potentially with the same tools, you can leverage that into the next steps.\nAgreed. Minnesota was my first job. No offer, was the only DE in 100 miles\nI'm that 1 in a million. Did some coding as a hobby when I was 13. My friend had a computer, I just stared at code and modified it to try to understand. It felt like deciphering an alien language, I had no books and didn't know anyone who was tech literate. Stopped after a couple months. Years later after I dropped out of high school I eventually landed a job doing data entry, lied about knowing what 10 key meant lol. The IT department asked us to test a new software release. It was really buggy and my previous coding experience kicked in and helped me provide very specific feedback. That turned into an IT role. I was overworked and underpaid for years - started at $13/hr in the beginning of the dotcom boom, doing full stack and had no idea what my time was worth. I got steady but low raises, but the work was really demanding. The CEO straight up said I made enough for someone my age. I accidentally found out new people in my department were making more than double what I did. I felt abused and depressed and worthless, and didn't have any confidence or experience trying to find another role somewhere else. This was all very challenging for me. I didn't know anyone else who worked with computers in any capacity, I didn't have college friends or old professors or any kind of network, and had no idea what a developer career might even look like. Over time I found I liked doing SQL stuff more than web dev and went down a DBA path. I landed a better job eventually, survived several rounds of layoffs, but eventually that didn't last. I stuck it out through some really bad roles trying to find something good, and more recently tried working at startups which I've found suits me well. I'm very happy where I am now but I do not recommend this path. It took over 20 years to really feel like I landed where I should be, and I'm still intimidated by people fresh out of college. I made too many mistakes and did at all on my own way too much. I didn't incur student debt, but I would have been happier and wealthier if I'd had a more supportive experience getting started on this path. Whether you are self taught or whatever, find community to help you grow and learn. Network and learn collaborative/social skills (soft ones but also technical ones like working with git). Reading and reviewing other people's code is an important skill you want to get good and fast at, and will help you learn faster. And when people use AI that makes mistakes, you'll be better at fixing it.\n> I'm that 1 in a million. There's probably a lot of \"1 in a million\" DEs on here i.e. self taught DEs. Personally, I feel like there's so much cynicism and gatekeeping from CS degree holders who have moved into DE. From what I've seen, it's because there's a lot of parroting the idea that DE = SWE rather than DE having a lot of overlap with SWE. Accepting the threshold to get into DE is very different and, arguably, much lower than traditional SWE seems to be tough for some.\nNah, I have an almost identical story (like, *very* almost identical). Call centers are one of those gigs where the barrier to entry is very low, and they're very data-driven. Managers always have performance metrics they need to hit, and the workflow is always changing to accommodate whatever new nonsense the MBAs come up with. They also have high turnover. That makes them a decent incubator for someone to work the job just long enough to become an expert on operations and then learn how those tasks get tracked in the software and pulled out to build KPI reports. The canned reports that come with the call center software are always too generic, so an enterprising data nerd can schmooze their way into getting an exported excel dataset, adding some timestamp comparisons, and pivoting them into a report that will get you promoted to Jr. Operations Analyst. In my case, the Director created the position once he saw the prototype.\nAn anecdote is not a statistic. Also it is less likely youll grab any of the large companies roles. The competition is fierce. I have an opposite story, 3 master degrees, one published book, one FAANG, one Big Tech, one non profit. GCP Cert. Can I claim my resume is the only way?\nI'm also a self taught Data Engineer who was promoted from customer service to Jr. DE roughly 3 years ago! I have two questions if you have the time :) 1. Being in this role, and especially as someone who did not earn a degree, I struggle with the thought of interviewing with other companies. Did you ever have a moment, while interviewing, where the degree came into question? 2. I primarily work in SQL but I've been working on expanding my portfolio by learning languages + systems that I've seen mentioned here and elsewhere. At times it feels like the vast amount of research needed to become a good DE is daunting. How do you cope with this and do you feel there is a certain level of knowledge needed to feel secure/stable in this career? Thanks for taking the time to answer, OP! I wish you all the best in your future as a DE or otherwise!\n1. I was very nervous the first time I interviewed for another role after breaking in. Lack of degree has never come up though. Your mileage may vary! 2. Good question. DE covers a wide range of technologies. Such a wide range that if I ever meet someone who says they know them all, I wouldn't believe them. I've always been a quick learner, which helps, but at times it does feel daunting. Personally, knowing the fundamentals and knowing how to learn a new technology/language are key. Specializing doesn't hurt either - i went all-in on GCP when cloud platforms became the standard. I couldn't tell you much about AWS, but I know I could get up to speed on it quickly if necessary. Thanks, and cheers!\nHave you (directly or indirectly) or other firms that you worked for, hired people with a similar background as yourself?\nI believe I'm the only person I've worked with in my career that didn't have a degree of some sort. I do know one or two other people who worked their way into tech though.\nMy brother doesnt have a degree at all, worked at Amazon on the factory floor, self taught SQL / python and worked up to a data engineer at Amazon, he had to leave when RTO happened, he personally misses Amazon and had a great experience with no burnout, but he has not had any issues with jobs/pay since, he just started a new job this week as a DE actually.\nCan you share the history of your stack? What you used in the beginning, what you pick up next and what you are currently using?\nYeah, great question! I started off on the Microsoft stack. SQL Server, SSAS, SSRS, and SSIS. I quickly had to learn Informatica and some Oracle bits. I learned C# very well and used a smattering of Java. For a while worked with airflow and java-based transformations. Python, GCP, Dataform are my main focuses now. Dataform being the new, odd one. It's grown on me a lot, and gave me an excuse to learn Javascript more.\nThank you for letting us pick your brain and take some of your time! As a mid-level Azure data engineer, I would like to ask: 1. I am currently in a consulting company so there's variety in terms of projects that I am involved with. This is okay cos I am learning new technology and solutions to use. But I sometimes wonder what it would look like if I transition to being an in-house DE. What's your take on being in consulting vs being in-house? What stands out for you as differences in terms of workload, knowledge acquisition (mastery in in-house vs range in consulting), and day-to-day tasks? 2. You mentioned in this thread that you started off as \"junior ETL and took off from there\". Looking back, what are the decisions and steps you've made that you think helped you transition from junior to mid-level and from mid-level to senior? And what do you think you need to move from senior to management roles (as you've mentioned for your next level)? 3. I also started off as junior ETL. My journey started from creating SSIS packages and learning some SQL. Then I jumped to Azure, data warehousing, and now I'm studying Spark and Fabric. I am unsure if this would lead to anything. How about you? What was your path look like? Thank you in advance!\nHow did you find Junior ETL? I have experience with SSRS and looking for visa sponsorship role\nI actually got hired as a bootcamper for a consulting company. This bootcamp is a 3-month training program for data management and reporting where we learned the basics of SQL, using SSIS, SSAS, SSRS, and Power BI. After the training, we were \"officially hired\" by the company and got the junior ETL role.\nMay I ask you where was that?\nIt's in the Philippines\nMore so than ever! I mentioned in another comment that I prefer working for smaller companies. I'm able to work on satisfying problems, was able to join my current company when they were preparing to move to the cloud, and I got to head that up. So nice to have a clean slate to work with.\nDE is subject to hype cycles just like any other tech. What's on the hype cycle at the moment that seems oveehyped?\nDo you think youd be able to weasel your way into the tech world as a DE today with the current market / industry environment? If not, what would you recommend to aspiring DEs looking to pivot into this field?\nFantastic question - and my circumstances were quite unique (detailed them in previous comments). Not even sure i could replicate it 12 years ago now. Then again, if the same circumstances happened today, I could see it happening. To be clear, I totally understand that my career is a result of the confluence of opportunity, luck, and hard work. But most things in life are putting in the hard work when you get an opportunity.\nI'm also trying to land my junior DE role by being a self taught. I saw a couple of road maps on how should I do it. 1. Coding 2. Sql 3. Data Warehousing and Modeling 4. Data Pipelines 5. The Cloud 6. GIT and Version Control. I took a the cs50x by harvard, introduction for computer science, finished it last October and decided to pursue DEng'g. Right now, I'm following the steps above, simultaneously learning Coding: 1. CS50P Python and matching up with Python Crash Course by Eric Mattes 2. SQL Practical SQL by Anthony DeBarros. Just wanted to know if I'm traversing the right path to become one. Also, for the steps 3-6, what are the books that corresponds to it? Cant picture myself to enroll in a bootcamp since I cant afford one. In item 3. Data Warehouse and Modeling, is it ok to learn the book of The Datawarehouse Toolkit by Ralph Kimball? Thank you.\nThose all look like excellent bits to learn. For me, SQL is high up on the list, though you might find some data engineers that's less important for. But a good knowledge of SQL should be in every tech person's arsenal in my opinion. As far as specific books, I don't have any specific recommendations, hopefully some others can chime in. I found a book I read a long time ago about SQL Server specifically, and the forward had an address you could write to to be put on a physical mailing list. Lol. It was already old when I read it.\nThank you so much. Got a long way to go since I started this vast journey last Nov.\nHello. If you dont mind me asking, what are the python tools should I learn. This book I'm reading in Python which is the Python Crash Course by Eric Matthes will soon come to an end after the final projects. Thank you.\nI kinda did this myself, but I am having trouble learning about best practices or what's best to do in certain pipelines/flows/logic? I feel like I need to learn this. What's the best way to do so?\nYeah, very important to do, and also probably the toughest part of self-learning this stuff because there are so many ways of achieving a result. For me, lots of reading was important, and if I read a concept I didn't understand the point of, I'd research it until I understood it. But lots of immersion in the technology is important. Mess around and find out the hard way on your own practice stuff.\nThank you\nI am a junior data engineer(python/airflow/snowflake/dbt stack) coming from a bachelor's in statistics and I am enrolled in a master's in computer science. In the future I would like to transit to a streaming data stack. I dont have strong CS fundamentals(data structures, algorithms, operating systems, networking and distributed systems), do you believe that I should cover them up for the master's, as it's a bit of an advanced degree and it's more focused on CS/CE backgrounds, or should I study them by myself and if possible?\nWell, I can't tell you if covering that stuff *for the masters* is a good idea, but it can't hurt for landing a role. The traditional comp sci concepts haven't been overtly useful over my career, but knowing the concepts I think has helped.\nSo courses like distributed systems, operating systems and networks aren't important when working with spark, Kafka etc?\nCertainly are - some DEs will benefit more from comp sci more than others. The vast array of potential roles a DE could have means some DEs might focus more on traditional ETL, some might be in Kafka-land, or need to write very performant code.\nMy first boss in data engineering/BI was self taught. Went to school for broadcasting but worked in tech support and slowly moved into the BI manager spot (really young too). The guy was so smart, Everytime I watch Ben Cowen I'm reminded of him. They think, talk, act and teach the exact same way.\nNice. My first boss was a former sheriff's deputy who ended up in charge of their IT stuff because he knew how to do it lol.\nWhat jumps did you have to do to go from Intermediate/Mid-level to Senior? I'm currently an Intermediate Data Engineer (also self taught) at my company and have an opportunity to become a senior, where I've been trying to work on getting our Data Quality and Data Validation in a good space while also trying to suggest some new tech to do proof of concepts on, but I'm not sure what else and I really do struggle with imposter syndrome from time to time I know that reads like a CV and not like a question I apologize for that !\nGood question - I feel a lot of my journey to becoming a senior had to do with learning and dealing with larger architectural decisions and implementing them, rather than implementing things alone. Being able to show that from start to finish you're able to get a large problem, find a way to solve it, and see it through while developing processes that can be reused as part of a platform is big.\nThank you so much for the response !\nAt the startup, where I used to work entire departments got laid off and only the data team survived. Do you feel like your job is more secure? Also would you recommend a msc. in data science?\nI feel secure in my position now. I've been laid off before, but got a new position within a month. Where I'm at now, I feel secure as I'm on a small team and have a large role. No idea on the degree unfortunately.\nYo, same here! Keep crushing it and paying it back! At some point you find what you love to get paid to do, very happy to see someone else rise above and succeed! \nNice! Great job, fellow self-starter!\nHaha, reminds me of my college days.. Average student Zero coding knowledge 5 gpa / 10 Cracked an interview at a MNC healthcare 3 years in, gained knowledge in DE, moving on Prem to Snowflake now\nYou mentioned in another comment that you started from ETL. I'm from the same motherland, so I wanted to know - what was your pathway to becoming a full-fledged data engineer?\nFor me it was learning python and GCP in general. Try to get to know the whole environment sort of thing.\nWhat would you do differently if you were in your 20s again?\nEat better, exercise more, and not use credit cards as much lol\nDo you know math?\nYes, I do. I like algebra and geometry.\nI started my career as a data analyst in 2021 and worked hard to upskill and apply for jobs, but the competition was tough. Earlier this year, I transitioned into product management, hoping to find a better fit. However, along the way, I realized that I didnt truly enjoy it. I miss the thrill of working with data and now Im considering a move into data engineering. Im scared that I might be wasting time, but I also understand that careers arent always linear. What advice can you give me?\nCouple pieces i can think of: 1. Make sure whatever you're shooting for, you have a genuine passion for. 2. Communication skills are vital! As are people skills.\nIve noticed that many job listings are looking for candidates with cloud-related skills. As someone who's starting from scratch, Im wondering what steps I should take to learn the necessary skills and technologies to become job-ready. Could you suggest a roadmap or guide for building the skills required for these roles?\nI think understanding databases, SQL, and general ETL patterns are very important, as they're the fundamental pieces of most DE work whether you're working in the cloud or not. As far as cloud learning, you can accomplish a lot of hands-on work in most cloud platforms' free-tier services (though be very careful not to overuse and get a giant bill). As far as specific courses go, not sure I'm much help there, hopefully other people can chime in.\nSimilar story as you. Do you ever feel the need to go back to school for formal engineering or fundamentals training?\nI was similar as well, and I've never really felt the need to go back to school. If you've been successful through a self-taught pathway then you're not the sort of person that necessarily *needs* to go to school, you'll be able to figure out the concepts on your own. In my case I was describing to a tech-savvy family friend the proposals I was making at work, just based on the features they'd have and how they'd work. They informed me that I was talking about data marts -- I had no idea it had a name, or that that's what I was doing. Similar thing happened much later when I proposed we move our foundational data layer out of the parallel data warehouse we had, and just manage it with our Databricks platform and Azure Data Lake Storage, particularly since Databricks now bundled this new \"Delta Lake\" package that would let us do table operations over parquet files. The head architect told me he wasn't a believer in the \"Lakehouse Architecture\" -- I had no idea what that was, I was just trying to propose a cheaper and more dynamically scalable way to ingest our data. If you can figure out the fundamentals you'll be able to adapt to any scenario, so long as you've got an idea of the tools that are available. Keep up with what's available and you won't need to be specifically taught.\nNot whatsoever. I'm sure in my early days I could've used a lot of the formal education, but these days I don't feel the need - guess I'm saying that at this point I feel like I've filled out. Though I think it took a lot more work to not get a degree lol.\nOk, yeah, same. I noticed some guys were at my level being 5 years into the field when i was hitting my 10 yr mark. I guess the 5 extra years of work make up for 5 years of school, huh? I recently took mentorship under a guy who worked on sqlserver source code and a couple banks as a dba/lead architect, and he took me down the path of fundamentals... all the way back to aristotelean philosophy as a method for data modeling. It was quite helpful to learn it now, 14 years into the field. If I had started there, I don't think I would have appreciated it like I did now having a practical use for the theory. Anyway, that made me feel like perhaps going back to school might not be terrible. Then again, this specific mentorship was like finding a Gandalf in the woods, and I probably won't get that in school.\nDamn, ancient Greek data modeling!  For me, I just don't learn well in a school setting. But getting my hands on things and doing the stuff a ton works great for me. When I was a junior I learned everything I could about database normalization (despite mostly working on OLAP models, I did get to work on some OLTP stuff). I loved it. I found tables that weren't 3NF when i thought they should be and pointed them out to the architect and asked him why. He gave good answers (sometimes the anser was \"we didn't design that part very well\" lol). I'd recreate similar schemas on my own time and mess with them. I couldn't sit through another class/lecture/whatever if I tried though.\nYeah I get it... its like watching paint dry lol\n> aristotelean philosophy as a method for data modeling pls tell more of this\nSure, it's roughly like this: - Relational model is based on first order predicate calculus - With that in mind, all your db can be described in predicates (true false boolean) - everything you model must be 3nf - no null, more tables instead (part of the philosophy) This all was so that you could model a hyper normalized, well designed database. We didn't use ERD, we used IDEF1X. We also used MSSQL for the exercises due to its ability to enforce IDEF1X (the open source db's simply cannot by design) So then, in order to create your database, philosophically and logically first (no code), you begin with potentiality-actuality. What are all your potential facts, entities, events, actions, etc. Then, through the Law of Thought, you begin to disseminate: 1) Law of identity: identify all the things fully using predicates (a user exists, a customer is a user, a customer has orders, orders have line items) This is where IDs and inherintence are decided, and where relationships arise. I was taught to use the real business relationship to describe relationships and not be lazy with has many ,has one, etc: A user consumes products as a customer = FK_User_ConsumedProductAs_Customer A customer Makes orders = FK_Customer_Makes_Orders Your descriptions and your code are unified. This fact alone facilitated business communication like you wouldn't believe for me. 2) Law of noncontradiction: is a user a customer? Yes is an order an invoice? Yes (back to identity, need another entity). This is where constraints arise. 3) Law of excluded middle: No NULL columns. Work ONLY with existence. Humans, like computers, have a hard time with nonexistence. Instead, we can reason around sets. Is a customer sometimes not a user? Yes. So it needs its own table. It can't be a user sometimes and other times not. Is a customer a person or a business? Both. So you need 2 more tables. 4) Law of sufficient proof: Are you the only one who sees these facts as true? Do others share in your discernment? Does the business agree with your analysis? I'm probably butchering it, but i hope that it gives you a rough understanding of things. It was a gamechanger for me, and something that truly carried over to other parts of my job (programming)\nWhat is the size of the company you work for? Were there any institutional barriers in your organization? The company I work for is large. Even with 5 years of data analytics/light ETL experience, they wont even look my resume because of my degree.\nThe company i worked for in my early years was about 5k people? Certainly not large, but not tiny. The data engineering group there had about 20 people. I was there for several years, but had difficulty getting paid like a senior once I grew. This was due to me getting promoted from a very low level position. I then applied to a very large company and worked there for a year and hated the environment. Now I work for a company of around 4k employees. Restaurant industry. I vastly prefer smaller companies personally.\nHow much of data modeling and datawarehousing you need to do/learn?\nThat'll depend from position to position. I always say that \"data engineering\" can mean a wide range of things. That being said, I imagine most roles under this umbrella would have quite a bit of warehousing involved. In some form at least.\nThanks! I tried to break into DE coming from SQL/ETL background but data modeling comes up in some postings and I havent done enterprise level data modeling and datawarehousing means going through Kimbal et al which seems a monumental task. Is a working knowledge of these good enough to progress to senior roles. Have you done Data modeling as part of your career tracetory?\nI've definitely done lots of data modeling. Since DE is such a broad term, you may or may not do as much as I've done. I can't imagine at least a working knowledge of it to be harmful though\nAre you also responsible for developing project proposal, for example providing detailed information about the data architecture of your projects, and making presentations about the tech stack you use. And secondly, what's a typical day like in the day of a DE. Do you get to consult for other businesses or you only work around one industry?\nI have a full-time job, not too interested in consulting. We settled on our tech stack as I was hired in my current position, but I do need to architect solutions and present them. Pretty informally since I did our platform engineering.\n@u/jeffvanlaethem I barely graduated college and have 2YE in SSRS. Been actively applying for two years now without landing a single interview. Would appreciate your help. TIA\nYo I am in my 3rd year of college and i wanna get into DE and i really really want to go to confluent.how can I start ? please give your insight and approach\nMind asking your tc?\nDo you believe DE will be heavily automated by AI in a similar way that web design is now compared to, say, the 90s, or is it too domain specific to go that far?\nThanks for the offer. I am from third world country, moving to the US next year (my wife is American), I assume youre from US too? I am also self-taught, currently as Data Analyst. 1. In my current job as DA, I almost never had any data that in good format, but had to crunch them, usually 10s GB and put it in MongoDB or generate some sort of report. Are those considered DE enough? 2. What do you think about the market for DE now for my circumstances?\nI am a senior data analyst who wants to transition to DE. How difficult do you see this transition? I have worked not only with dashboards but also with AWS sagemaker and for some time in my career as an analytics engineer. Building data marts and etc I dont know which gaps I should fill to be able to make the transition to DE\nDo you mind telling why?\nI mean 10 years ago you could be hired easily for as long as you had at least one hand and one eye. Barely anyone even bothered to complete boot camps (and there werent many to begin with), let alone to have an appropriate degree. Hardly reproducible in 2024\nI did work with a blind person once, but they had a degree.\nI don't have a degree either and I'm want to break into DE...sometimes it looks like I'm the only one without a degree going for such a thing. I saw your post and thought to myself how wild.\nAwesome! It won't be easy - and I never really thought \"wow, I'd like to be a data engineer!\" I just started going crazy on it, put it to good use, and got some good breaks. Make sure you really love it if you're going to seriously go for it.\nWith ai being an inevitable part how do you see the future of data engineering for someone entering new into the field\nGood question. I have 0 clue how far AI is from obsoleting DE-type positions. But I don't think it's close. Close is obviously a relative term. I imagine AI being very helpful with data cataloging, documentation, etc first. Obviously data analysis, but that's not something I have an active hand in.\nwhat extra skill set should i have to get an edge over others\nThe biggest one in my opinion is communication skills. So many people focus on technical skills. But I've worked with mega-geniuses who were less effective than an average person because they were poor communicators. Also, learning to work well with others.\nOk. I'll take your word for it. Much blessings.\nAs someone from a developing society, can I follow your path of success?\nHonestly, no idea. I hope so! It wasn't easy, so I imagine it won't be for anyone else who tries, but if you love the work, do what you can to try\nDo you think it would be hard to pass ATS system if we don't have a traditional pristine degree from Ivy league institutes?"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "Hey folks, inspired by [this other post](https://www.reddit.com/r/dataengineering/comments/1hkk810/how_did_you_land_an_offer_in_this_market/), I decided to open a separate one because my answer was getting too long.\n\nIn short, I was told 1 month and a half ago I was gonna be laid off, and managed to land a new offer in just about a month, with about 3 more in the final stage.\n\nIn no specific order, here's what I did and some advice that I hope can be useful for somebody out there.\n\n## Expectations\n\nAdmittedly I was expecting the market to be worse than what I've experienced. When I started looking I was ready to send 100s of resumes, but stopped at 30 because I had received almost 10 call backs and was getting overwhelmed.\n\nSo take what you read online with a grain of salt, someone not able to find a job doesn't mean you won't. Some people don't try. Others are just bad. That's a harsh truth but it's absurd to believe we're all equally good. And people that have jobs and are good at finding them / keeping them don't post online about how bad it is.\n\n## Create a system. You're an engineer, Harry!\n\nI used a Notion database with a bunch of fields and formulas to keep track of my applications. Maybe I will publish this in the future. Write 1 or 2 template cover letters and fill in the blanks every time. The blanks usually are just **\\[COMPANY NAME\\]** and **\\[REASON I LIKE IT\\]**. The rest is just blablablah. Use chatGPT to create the skeleton, customize it using your own voice, and call it a day.\n\nFor each application, if there is a form to fill, take note of your answers so you can recycle them if you get asked the same questions in a different application.\n\nThe technical requirements of most job posts is total bullshit written by an HR that knows no better, so pay very little attention to it. Very few are written by a technical person. After sending 10 applications, I started noticing that they're all copypasting each other, so I just skim through them. As long as the title vaguely fit, and the position was interesting, I sent my application.\n\nCollect feedback however and whenever you can, you need to understand what your bottleneck is.\n\nWhen openly rejected, ask why, and if not possible, review both the job post and your own profile and try to understand why there was a mismatch, and if it was an effective lack on your side, or if you forgot to highlight some skill you possess in your profile.\n\n## Challenges in each step\n\nYou can break down the recruiting process into few areas:\n\n### Pre-contact\n\nYour bottleneck here can only be your profile/r\u00e9sum\u00e9 so make sure to minmax it. If you never hear back, you know where to look.\n\nThere's another option: you're applying to the wrong jobs. A colleague of mine was seeking job last year and applying mostly for analytics engineer roles. He never heard back. Then he understood that his profile fit more the BI Engineer. He focused there and quickly received an offer 50% more than his previous salary.\n\n### Screening\n\nUsually this is a combination of talking with HR and an optional small coding test. Passing this stage is very easy if you're not a grifter or a complete psychopath.\n\n### Tech stages\n\n\u00c7a va sans dire, it's to test your tech prowess. I've used to hate them but I've come to the conclusion that the tech stage is a reflection of the average skill you will find among your colleagues, if hired. It is a good indicator.\n\nThere aren't a lot of options here, the two most common being:\n- **Tech evaluation**: just a two way talk with the interviewer(s). You will be asked about your experience, technical questions, and if there was a coding exercise prior, to reason about it.\n- **Live coding**: usually it's leetcode stuff. I used to prepare by spamming [Grind75](https://www.techinterviewhandbook.org/grind75/v), but now I'd personally recommend [AlgoMonster](https://www.reddit.com/r/dataengineering/comments/1hko82q/my_advice_for_job_seekers_some_thoughts_i/). I've used it this time and passed no problem. Highly recommended especially if short on time. Use a breadth first approach (there's a tree you can follow). If interviewing with FAANG, follow [this guide](https://www.techinterviewhandbook.org), but for more normal companies it's probably overkill.\n\nSome companies also have a take home assignment. This is my favorite, as imho it simulates the best how one works, but it's also the rarest. If you receive a THA, you want to deliver something you'd deliver in a prod setting (given obviously the time restraints that you have). So don't half-ass your code. Even if it works, make sure it follows good practices, have unit tests, and whatever is possible and/or required by the assignment.\n\nThere's not a lot to warn about this stage. To pass you need to study and be good. That's really it.\n\n### Final stages\n\nIf you pass the tech stages then the hardest part is done. These final ones are usually more about your culture fit and ability to work in a team, how you solve conflicts, how you approach new challenges etc... Again, here, if you're not a complete psychopath and actually are a good professional, it's easy to leave a nice impression.\n\n## Negotiation\nI suck at this so I'll let someone else talk here. The only thing I know is: always have a [BATNA](https://www.investopedia.com/terms/b/best-alternative-to-a-negotiated-agreement-batna.asp).\n\n## Random thoughts\n\n**Some companies are just trash**. I've noticed that the quality of my hiring process would increase the more I was selective in sending my applications. My current main filter is \"I only work for companies that allow remote\".\n\n**PRESENTATION MATTERS.** It's not eonugh to be tech savvy. The way you present yourself can dramatically alter the outcomes of a process. Don't be a zombie! Smile, get out of your pajamas, go for a 10 minutes walk or shower before the call. Practice soft skills, they are a multiplier. Learn how to talk. Follow Vinh Giang if you need examples.\n\n**Don't shoot yourself in the foot**, especially during tech interviews. If you don't know  something, it's fine to say so. It's WAY better than rambling about shit you have no idea about. \"I have no experience with that\". If the interviewer insists on that topic, they're a piece of shit and you don't wanna work with them.\nAlso, personal opinions about industry staples are double edged blades. If you say you hate agile, and the interviewer loves it, you better know how to get yourself out of that situation.\n\n**To lower the anxiety**, keep a bottle of water and some mints next to you. Eating and drinking communicates to your brain that you're not in danger, and will keep your anxiety levels lower.\n\n**Luck matters** but you can increase your luck by expanding your surface area. If I'm trying to fish with nets, and my net is massively large, it's still about luck but the total amount of fishes I rake in will be higher than one with a smaller net. Network, talk to people, show up. The current offer I received, I found it just because a person I met on Linkedin bounced it and redirected it to me. I would have never found it otherwise.\n\nI can't think of anything else at the moment. I'm sure if you approach this process methodically and with a pinch of self-awareness, you can improve your situation. Best of luck to you all!",
        "author_fullname": "t2_zwbba",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "My advice for job seekers - some thoughts I collected while finding the next job",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hko82q",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.95,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 163,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Career",
        "can_mod_post": false,
        "score": 163,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": 1734965698.0,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1734962099.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey folks, inspired by &lt;a href=\"https://www.reddit.com/r/dataengineering/comments/1hkk810/how_did_you_land_an_offer_in_this_market/\"&gt;this other post&lt;/a&gt;, I decided to open a separate one because my answer was getting too long.&lt;/p&gt;\n\n&lt;p&gt;In short, I was told 1 month and a half ago I was gonna be laid off, and managed to land a new offer in just about a month, with about 3 more in the final stage.&lt;/p&gt;\n\n&lt;p&gt;In no specific order, here&amp;#39;s what I did and some advice that I hope can be useful for somebody out there.&lt;/p&gt;\n\n&lt;h2&gt;Expectations&lt;/h2&gt;\n\n&lt;p&gt;Admittedly I was expecting the market to be worse than what I&amp;#39;ve experienced. When I started looking I was ready to send 100s of resumes, but stopped at 30 because I had received almost 10 call backs and was getting overwhelmed.&lt;/p&gt;\n\n&lt;p&gt;So take what you read online with a grain of salt, someone not able to find a job doesn&amp;#39;t mean you won&amp;#39;t. Some people don&amp;#39;t try. Others are just bad. That&amp;#39;s a harsh truth but it&amp;#39;s absurd to believe we&amp;#39;re all equally good. And people that have jobs and are good at finding them / keeping them don&amp;#39;t post online about how bad it is.&lt;/p&gt;\n\n&lt;h2&gt;Create a system. You&amp;#39;re an engineer, Harry!&lt;/h2&gt;\n\n&lt;p&gt;I used a Notion database with a bunch of fields and formulas to keep track of my applications. Maybe I will publish this in the future. Write 1 or 2 template cover letters and fill in the blanks every time. The blanks usually are just &lt;strong&gt;[COMPANY NAME]&lt;/strong&gt; and &lt;strong&gt;[REASON I LIKE IT]&lt;/strong&gt;. The rest is just blablablah. Use chatGPT to create the skeleton, customize it using your own voice, and call it a day.&lt;/p&gt;\n\n&lt;p&gt;For each application, if there is a form to fill, take note of your answers so you can recycle them if you get asked the same questions in a different application.&lt;/p&gt;\n\n&lt;p&gt;The technical requirements of most job posts is total bullshit written by an HR that knows no better, so pay very little attention to it. Very few are written by a technical person. After sending 10 applications, I started noticing that they&amp;#39;re all copypasting each other, so I just skim through them. As long as the title vaguely fit, and the position was interesting, I sent my application.&lt;/p&gt;\n\n&lt;p&gt;Collect feedback however and whenever you can, you need to understand what your bottleneck is.&lt;/p&gt;\n\n&lt;p&gt;When openly rejected, ask why, and if not possible, review both the job post and your own profile and try to understand why there was a mismatch, and if it was an effective lack on your side, or if you forgot to highlight some skill you possess in your profile.&lt;/p&gt;\n\n&lt;h2&gt;Challenges in each step&lt;/h2&gt;\n\n&lt;p&gt;You can break down the recruiting process into few areas:&lt;/p&gt;\n\n&lt;h3&gt;Pre-contact&lt;/h3&gt;\n\n&lt;p&gt;Your bottleneck here can only be your profile/r\u00e9sum\u00e9 so make sure to minmax it. If you never hear back, you know where to look.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s another option: you&amp;#39;re applying to the wrong jobs. A colleague of mine was seeking job last year and applying mostly for analytics engineer roles. He never heard back. Then he understood that his profile fit more the BI Engineer. He focused there and quickly received an offer 50% more than his previous salary.&lt;/p&gt;\n\n&lt;h3&gt;Screening&lt;/h3&gt;\n\n&lt;p&gt;Usually this is a combination of talking with HR and an optional small coding test. Passing this stage is very easy if you&amp;#39;re not a grifter or a complete psychopath.&lt;/p&gt;\n\n&lt;h3&gt;Tech stages&lt;/h3&gt;\n\n&lt;p&gt;\u00c7a va sans dire, it&amp;#39;s to test your tech prowess. I&amp;#39;ve used to hate them but I&amp;#39;ve come to the conclusion that the tech stage is a reflection of the average skill you will find among your colleagues, if hired. It is a good indicator.&lt;/p&gt;\n\n&lt;p&gt;There aren&amp;#39;t a lot of options here, the two most common being:\n- &lt;strong&gt;Tech evaluation&lt;/strong&gt;: just a two way talk with the interviewer(s). You will be asked about your experience, technical questions, and if there was a coding exercise prior, to reason about it.\n- &lt;strong&gt;Live coding&lt;/strong&gt;: usually it&amp;#39;s leetcode stuff. I used to prepare by spamming &lt;a href=\"https://www.techinterviewhandbook.org/grind75/v\"&gt;Grind75&lt;/a&gt;, but now I&amp;#39;d personally recommend &lt;a href=\"https://www.reddit.com/r/dataengineering/comments/1hko82q/my_advice_for_job_seekers_some_thoughts_i/\"&gt;AlgoMonster&lt;/a&gt;. I&amp;#39;ve used it this time and passed no problem. Highly recommended especially if short on time. Use a breadth first approach (there&amp;#39;s a tree you can follow). If interviewing with FAANG, follow &lt;a href=\"https://www.techinterviewhandbook.org\"&gt;this guide&lt;/a&gt;, but for more normal companies it&amp;#39;s probably overkill.&lt;/p&gt;\n\n&lt;p&gt;Some companies also have a take home assignment. This is my favorite, as imho it simulates the best how one works, but it&amp;#39;s also the rarest. If you receive a THA, you want to deliver something you&amp;#39;d deliver in a prod setting (given obviously the time restraints that you have). So don&amp;#39;t half-ass your code. Even if it works, make sure it follows good practices, have unit tests, and whatever is possible and/or required by the assignment.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s not a lot to warn about this stage. To pass you need to study and be good. That&amp;#39;s really it.&lt;/p&gt;\n\n&lt;h3&gt;Final stages&lt;/h3&gt;\n\n&lt;p&gt;If you pass the tech stages then the hardest part is done. These final ones are usually more about your culture fit and ability to work in a team, how you solve conflicts, how you approach new challenges etc... Again, here, if you&amp;#39;re not a complete psychopath and actually are a good professional, it&amp;#39;s easy to leave a nice impression.&lt;/p&gt;\n\n&lt;h2&gt;Negotiation&lt;/h2&gt;\n\n&lt;p&gt;I suck at this so I&amp;#39;ll let someone else talk here. The only thing I know is: always have a &lt;a href=\"https://www.investopedia.com/terms/b/best-alternative-to-a-negotiated-agreement-batna.asp\"&gt;BATNA&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h2&gt;Random thoughts&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Some companies are just trash&lt;/strong&gt;. I&amp;#39;ve noticed that the quality of my hiring process would increase the more I was selective in sending my applications. My current main filter is &amp;quot;I only work for companies that allow remote&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;PRESENTATION MATTERS.&lt;/strong&gt; It&amp;#39;s not eonugh to be tech savvy. The way you present yourself can dramatically alter the outcomes of a process. Don&amp;#39;t be a zombie! Smile, get out of your pajamas, go for a 10 minutes walk or shower before the call. Practice soft skills, they are a multiplier. Learn how to talk. Follow Vinh Giang if you need examples.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Don&amp;#39;t shoot yourself in the foot&lt;/strong&gt;, especially during tech interviews. If you don&amp;#39;t know  something, it&amp;#39;s fine to say so. It&amp;#39;s WAY better than rambling about shit you have no idea about. &amp;quot;I have no experience with that&amp;quot;. If the interviewer insists on that topic, they&amp;#39;re a piece of shit and you don&amp;#39;t wanna work with them.\nAlso, personal opinions about industry staples are double edged blades. If you say you hate agile, and the interviewer loves it, you better know how to get yourself out of that situation.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;To lower the anxiety&lt;/strong&gt;, keep a bottle of water and some mints next to you. Eating and drinking communicates to your brain that you&amp;#39;re not in danger, and will keep your anxiety levels lower.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Luck matters&lt;/strong&gt; but you can increase your luck by expanding your surface area. If I&amp;#39;m trying to fish with nets, and my net is massively large, it&amp;#39;s still about luck but the total amount of fishes I rake in will be higher than one with a smaller net. Network, talk to people, show up. The current offer I received, I found it just because a person I met on Linkedin bounced it and redirected it to me. I would have never found it otherwise.&lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t think of anything else at the moment. I&amp;#39;m sure if you approach this process methodically and with a pinch of self-awareness, you can improve your situation. Best of luck to you all!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "069dd614-a7dc-11eb-8e48-0e90f49436a3",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#349e48",
        "id": "1hko82q",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "wtfzambo",
        "discussion_type": null,
        "num_comments": 32,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hko82q/my_advice_for_job_seekers_some_thoughts_i/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hko82q/my_advice_for_job_seekers_some_thoughts_i/",
        "subreddit_subscribers": 243450,
        "created_utc": 1734962099.0,
        "num_crossposts": 1,
        "media": null,
        "is_video": false,
        "comments": "As a fellow job seeker that recently landed two offers. I can't stress the importance of polishing your resume to get past the recruiter screening phase. I got an overwhelming number of responses after cleaning up my resume and adding in details like 1. Quantifiers for Impact (dollars savings, percentage improvements, handled gigabyte scale data) 2. Name dropping technologies (used Kafka , used Spark) in past jobs Good luck finding a new place guys!\nCan you post an example? I understand the metrics part, that is old school resume advice, but I am having trouble optimizing my resume while also not making it sound like total word salad. I have had many humans look at my resume and they all say that it's great....but I think that is the problem. It's good when people are reading it and evaluating the merits but in real life, it's never going to make it to them.\nAre you applying to remote positions or any? I have been applying to remote positions and have not been having any luck even getting a call back. I feel my resume is tailored to some of these jobs as well. Obviously remote is much more competitive, just wondering your experience since I have not received a single call back.\nI'm applying exclusively to remote positions. I believe the chance of getting a callback here depends on several factors, besides your resume: years of experience, past experiences in remote positions, and probably your location too. I'm EU based, and most places I applied are EU based (even if the offer I accepted comes from the US). Although, I'd say seniority is probably the most fundamental one. I don't see a junior being hired for full remote positions. Without knowing your specific situation, unfortunately I cannot provide more specific advice.\nThank you for posting this. I'm hoping to get out of a job that I haven't been enjoying for the last year, and I'm constantly dreading the application process. Whether your experience is true, or my experience will match it, or not, I needed to read this to. I already feel less anxious. Thank you!\nCreating a system is what helped me the most. In the end it's a funnel. As long as it keeps flowing, you're alright. I always tried to keep at least 5 companies in the \"interviewing stage\", and 10-15 in the \"Application sent\" stage. Then it depends of how much bottleneck each passage is for you. If you have a high response rate, you need less companies in the first stage than if you had a low response rate. Also keep in mind, some companies are slow as shit to reply, especially under the holidays. I set myself a 14 days max waiting period for companies in the first stage, where if I don't get a reply in under 14 days I consider them ghosted. But just today I received a mail from one of them saying they wanna interview me, which I had to decline obviously. If you're not in a rush to find a new place, you can set this limit even higher, 1 month could be reasonable. I was in a rush, so I set it lower.\nAre you finding openings from US? Which websites did you use for applying jobs?\nI'm EU based, so all companies but one (ironically the one I accepted the offer from) were EU. As for websites, almost exclusively LinkedIn, but I also would recommend \"Welcome to the jungle\", formerly Otta.\nWhich country?\nEU, irrelevant which one because I intentionally ignored job posts from my country except 2 or 3 of them.\nDo you have a CS undergrad? Im having trouble getting past the auto reject and I cant think of any other reason. I do have a MS in a technical field though\nNo, I have a bachelor in economics and then a short diploma in Data Science. About Data Engineering I am completely self taught. I am EU market so I don't know how the situation is in the US. The fact that you mention the degree makes me think you're relatively fresh graduate (apologies if I'm mistaken). If you're a junior, it's difficult. This is a discipline that doesn't really have junior roles. And past the first job, if it lasted longer than 1 year, your degree is essentially meaningless when it comes to hiring.\n2 YOE as a DE and 1 YOE as an analyst. I have a chance, but part of me thinks Im completely screwed.\nYeah you're more towards the middle level and it might be harder for you, but regarding this: > part of me thinks Im completely screwed. You're not screwed, and don't make that choice for yourself. It's pointless to waste energy on this kind of thoughts anyway.\ndoes the gpa of your bachelor's matter? were you ever asked?\nno not at all.\nRight now I work in data management and pursuing a bachelor's as well in europe, but will finish with a low gpa( probably 2.4- 2.7). This is why I was interested, if future employers will want to see my gpa as well and disregard me because of that.\ndone and tried everything listed here. whats your yoe and background?\n5.5 yoe, I have a master in data science and a bachelor in economics. EU based.\ndid the job listing mention anything about prioritising eu citizens?\nSome, due to contractual reasons. But most would go via either Deel or Remote or even offer B2B option, which makes the citizenship requirement not necessary. The company that I accepted the offer is US based for instance, and they use both Deel and B2B, depending on the worker preference.\nAbout leetcode and algomonster, which kind of problems would you give priority? I am not sure what they would ask at DE interviews. There are so many questions there and good amount of them are for software engineers. I am a DA who wants to transition to DE. My academic background is similarly to yours as well\n> I am not sure what they would ask at DE interviews It's really random, could be anything. But I'd recommend breadth first then depth if you have time left. I'd say that leetcode questions for DEs are not that horribly hard. Algomonster has a tree to follow: https://algo.monster/roadmap I'd say the first row of the tree is necessary (you can skip OO design if you're already familiar as it's not properly leetcode). From the 2nd row, backtracking and BFS are imho the most important.\nAny recommendations for a sponsored job? As in how do I approach it? Im currently working as a data engineer(sponsored). But I want to switch. All the recruiters/offers dont encourage sponsorship. I mean Im being said no right after the application because of this. Thanks.\nI'm not sure what you mean with sponsored job?\nto work in some country as a foreigner you need to already have an employer willing to hire you on a specific role *before* you go and live there, and that's the employer filling the form for you with government officers and also paying a quota, you usually can't work with someone else or only under restrictions\nOh I understand now. I have no experience with that. As I said in my post and other comments, I was searching remote only positions, so that this was not an issue. I'm sorry I cannot provide further help.\nNo worries. \nThat really so informative and insightful\nMaster the Fundamentals: Strong skills in Python and SQL are essential. Understand how databases work and practice with real-life projects. Build a Strong Portfolio: Showcase your skills through personal projects and GitHub repositories. Leverage LinkedIn: Optimize your profile, take skill assessments, and engage with recruiters. LinkedIn Premium can be helpful. Network and Seek Referrals: Networking and referrals can significantly increase your chances of landing an interview. Showcase Soft Skills: Effective communication and problem-solving skills are crucial. Highlight these during interviews. Stay Persistent and Positive: Apply to multiple positions, practice your interview skills, and continuously improve your resume and portfolio. Real success stories include: Imperialka: Landed a job with a 50% salary increase by mastering Python and SQL, building personal projects, and showcasing work on GitHub. Tea\\_Anyone: Secured a position with a 25% salary increase by leveraging LinkedIn and focusing on soft skills. Dr\\_Exercise: Found a job through LinkedIn with a 15% salary increase by speaking with confidence and being honest during interviews. Persistence and continuous learning are key to success in the data engineering job market. Good luck! [Analyzed the results from a subreddit on How to Land a Data Engineering Job in a Tough Market: Insider Tips and Success Stories! | by Amanullah Khan | Dec, 2024 | Medium](https://medium.com/@aa.khan.9093/analyzed-the-results-from-a-subreddit-on-how-to-land-a-data-engineering-job-in-a-tough-market-3c0317801ae6)\nMaster the Fundamentals: Strong skills in Python and SQL are essential. Understand how databases work and practice with real-life projects. Build a Strong Portfolio: Showcase your skills through personal projects and GitHub repositories. Leverage LinkedIn: Optimize your profile, take skill assessments, and engage with recruiters. LinkedIn Premium can be helpful. Network and Seek Referrals: Networking and referrals can significantly increase your chances of landing an interview. Showcase Soft Skills: Effective communication and problem-solving skills are crucial. Highlight these during interviews. Stay Persistent and Positive: Apply to multiple positions, practice your interview skills, and continuously improve your resume and portfolio. Real success stories include: Imperialka: Landed a job with a 50% salary increase by mastering Python and SQL, building personal projects, and showcasing work on GitHub. Tea\\_Anyone: Secured a position with a 25% salary increase by leveraging LinkedIn and focusing on soft skills. Dr\\_Exercise: Found a job through LinkedIn with a 15% salary increase by speaking with confidence and being honest during interviews. Persistence and continuous learning are key to success in the data engineering job market. Good luck! [https://medium.com/@aa.khan.9093/analyzed-the-results-from-a-subreddit-on-how-to-land-a-data-engineering-job-in-a-tough-market-3c0317801ae6](https://medium.com/@aa.khan.9093/analyzed-the-results-from-a-subreddit-on-how-to-land-a-data-engineering-job-in-a-tough-market-3c0317801ae6)"
    },
    {
        "approved_at_utc": null,
        "subreddit": "dataengineering",
        "selftext": "I've noticed 9/10 DE job postings only mention Python in their description and upon further inspection, they mention they're working with PySpark or the Python SDK for Beam.\n\nBut these two have considerable performance constraints on Python. Isn't anyone bothered by that?\n\nFor example: the GCP dataflow runner for Beam has serious limitations if you try to run streaming jobs with the Python SDK. I'd imagine that PySpark has similar issues as it's pretty much an API sending Scala commands to a JVM running a regular Scala-Spark, so I have a hard time imagining it's as fast as just \"standalone\" Spark.\n\nSo how come no one cares about this? There was some uptick in Scala popularity a few years ago, but I feel now it's just dwindling in favor of Python.",
        "author_fullname": "t2_s75gwyxxt",
        "saved": false,
        "mod_reason_title": null,
        "gilded": 0,
        "clicked": false,
        "title": "Why do so many companies favor Python instead of Scala for Spark and the likes?",
        "link_flair_richtext": [],
        "subreddit_name_prefixed": "r/dataengineering",
        "hidden": false,
        "pwls": 6,
        "link_flair_css_class": "",
        "downs": 0,
        "thumbnail_height": null,
        "top_awarded_type": null,
        "hide_score": false,
        "name": "t3_1hbh53b",
        "quarantine": false,
        "link_flair_text_color": "light",
        "upvote_ratio": 0.91,
        "author_flair_background_color": null,
        "subreddit_type": "public",
        "ups": 159,
        "total_awards_received": 0,
        "media_embed": {},
        "thumbnail_width": null,
        "author_flair_template_id": null,
        "is_original_content": false,
        "user_reports": [],
        "secure_media": null,
        "is_reddit_media_domain": false,
        "is_meta": false,
        "category": null,
        "secure_media_embed": {},
        "link_flair_text": "Discussion",
        "can_mod_post": false,
        "score": 159,
        "approved_by": null,
        "is_created_from_ads_ui": false,
        "author_premium": false,
        "thumbnail": "self",
        "edited": false,
        "author_flair_css_class": null,
        "author_flair_richtext": [],
        "gildings": {},
        "content_categories": null,
        "is_self": true,
        "mod_note": null,
        "created": 1733877837.0,
        "link_flair_type": "text",
        "wls": 6,
        "removed_by_category": null,
        "banned_by": null,
        "author_flair_type": "text",
        "domain": "self.dataengineering",
        "allow_live_comments": false,
        "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve noticed 9/10 DE job postings only mention Python in their description and upon further inspection, they mention they&amp;#39;re working with PySpark or the Python SDK for Beam.&lt;/p&gt;\n\n&lt;p&gt;But these two have considerable performance constraints on Python. Isn&amp;#39;t anyone bothered by that?&lt;/p&gt;\n\n&lt;p&gt;For example: the GCP dataflow runner for Beam has serious limitations if you try to run streaming jobs with the Python SDK. I&amp;#39;d imagine that PySpark has similar issues as it&amp;#39;s pretty much an API sending Scala commands to a JVM running a regular Scala-Spark, so I have a hard time imagining it&amp;#39;s as fast as just &amp;quot;standalone&amp;quot; Spark.&lt;/p&gt;\n\n&lt;p&gt;So how come no one cares about this? There was some uptick in Scala popularity a few years ago, but I feel now it&amp;#39;s just dwindling in favor of Python.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null,
        "suggested_sort": null,
        "banned_at_utc": null,
        "view_count": null,
        "archived": false,
        "no_follow": false,
        "is_crosspostable": true,
        "pinned": false,
        "over_18": false,
        "all_awardings": [],
        "awarders": [],
        "media_only": false,
        "link_flair_template_id": "92b74b58-aaca-11eb-b160-0e6181e3773f",
        "can_gild": false,
        "spoiler": false,
        "locked": false,
        "author_flair_text": null,
        "treatment_tags": [],
        "visited": false,
        "removed_by": null,
        "num_reports": null,
        "distinguished": null,
        "subreddit_id": "t5_36en4",
        "author_is_blocked": false,
        "mod_reason_by": null,
        "removal_reason": null,
        "link_flair_background_color": "#ff4500",
        "id": "1hbh53b",
        "is_robot_indexable": true,
        "report_reasons": null,
        "author": "yourAvgSE",
        "discussion_type": null,
        "num_comments": 114,
        "send_replies": true,
        "contest_mode": false,
        "mod_reports": [],
        "author_patreon_flair": false,
        "author_flair_text_color": null,
        "permalink": "/r/dataengineering/comments/1hbh53b/why_do_so_many_companies_favor_python_instead_of/",
        "stickied": false,
        "url": "https://www.reddit.com/r/dataengineering/comments/1hbh53b/why_do_so_many_companies_favor_python_instead_of/",
        "subreddit_subscribers": 243450,
        "created_utc": 1733877837.0,
        "num_crossposts": 0,
        "media": null,
        "is_video": false,
        "comments": "i think a big part is just that there are more people familiar with python than scala\nAnd there are more people familiar with Python because it is easier to learn and run.\nAnd because of that there are far more packages with mature interfaces and feature support for more types of data, connections, and related things.\nEvery scala code base I've seen looked like a completely different language lol.\nA Scala engineer costs roughly twice what a Python engineer cost to hire. This is the primary reason. The second reason is that Python is a cross-domain language: mathematicians and statisticians will have used it in their research before joining \"industry\", yet -- unlike Matlab -- it's a general purpose programming language and so the data-engineering and software-engineering teams can also use it. This facilitates collaboration. The third reason is the amount of statistics, machine-learning and viz toolkits available for Python far outstrip what's available for Scala in terms of quality, breadth, and even performance (since many are thin wrappers around C and Fortran). Spark DataFrames and SparkML don't really cut it. --- I've observed recently that Scala + Spark is the new COBOL, in that there's a few extraordinarily well-paying jobs for people that can work on legacy codebases written using those tools. The problem is Scala isn't so much a single language as a family of dialects (Cats, Monix, Scalaz, or just plain OOP-style) so it's a lot to learn.\nThey'd rather have a generalized data engineer who can solve most problems with a versatile programming language rather than a niche developer. Performance isn't top of mind when that performance is gated by a very expensive salary at most places.\nThis is exactly the logic behind how I built my team. It has worked very well in practice. Don't let perfect be the enemy of good. Particularly when good will basically always get the job done, and leave me with financial and human capital overhead to spare.\nFrankly, Scala is a very versatile programming language. But the paradigm shift from a dynamic loosely typed language to a statically typed language where everything is immutable is often too much for many people. Even if you don't switch to Scala, it's great to learn it because it will greatly affect the quality of your Python code. For downvoters: read the rest of the thread.\nScala is not versatile. Data engineers need to collaborate extensively with data scientists and analysts. The support for Scala in those domains is functionally non-existent. Organizationally, it is in fact harmful to collaboration to bring Scala into the data engineering stack. Data scientists and analysts primarily utilize python and R, never Scala.\nCollaboration != Writing the code. This is a well known recipe for dysfunctional software to constrain the technical implementation to the limits of what non technical people can do.\nCollaboration between data engineering and analytics/data science does in practice involve shared code bases. For example, data engineering builds a python package that reads data from a stream, generates features, and then persists them to a feature store for downstream models. Data scientists will then evolve these packages, BY WRITING CODE, to evaluate whether these new inputs can help to improve the model. This is one example of literally thousands where using a shared language base between data engineering and DS/Analytics leads to more efficient data ergonomics, and reduced cycle time for development.\nI was comparing languages only, not their ecosystem.\nPython is terrible for data engineering if you don't consider its ecosystem... If you don't consider that then you won't get very good answers\nI'm not clear on the utility of comparing isolated language specifications in isolation. Any company that has more than a single developer will by its very nature have an ecosystem.\nPython is a strongly-typed language, with support for opt-in static typing -- even to the extent of typing dataframes via Pandera. There was never a \"paradigm-shift\" with respect to typing.\nPython's type hints (introduced in Python 3.5 with PEP 484) are optional and not enforced at runtime by default. And there is no compile-time like in Scala. Unlike languages like Scala, where the type system is enforced by the compiler, Python's type hints are more similar to TypeScript's approach - they're a development-time tool rather than a runtime enforcement mechanism. You can violate them freely at runtime unless you specifically use runtime type checking libraries like typeguard or beartype. Your comment isn't quite accurate about Python being a \"strongly-typed\" language in the same sense as Scala or Java. Python is dynamically typed with optional static type checking capabilities. Even with tools like Pandera for dataframes, these are still opt-in validation layers rather than fundamental language-level type enforcement.\n> there is no compile-time like in Scala. There is, you use the [MyPy](https://github.com/python/mypy) tool > they're a development-time tool rather than a runtime enforcement mechanism. You can violate them freely at runtime unless you specifically use runtime type checking libraries like typeguard or beartype. `ClassCastException`s exist in Scala too. > Your comment isn't quite accurate about Python being a \"strongly-typed\" language in the same sense as Scala or Java. Python is dynamically typed with optional static type checking capabilities Strong typing and static typing are different things. Static typing means that variable are assigned types in a way that can be checked by a compiler at compile time. It does not mean that types have to be declared ahead of time: e.g. OCaml, Haskell and F# compilers infer types -- including of functions and their arguments -- at compile time, and check they're consistent. Strong typing has a woollier definition, but generally means that once an element of data (or a variable) is assigned a type (either statically or dynamically) the type cannot change without an explicit action by the programmer. e.g. you cannot say `a + \", world\"` in Python if `a` does not have the `str` type. You explicitly have to make the conversion `str(a) + \", world\"` or -- more idiomatically -- `f\"{a}, world\"`. In particular, this means Python doesn't fall into the nightmarish world of conflicting `==` and `===` operators one sees in PHP. Hence the common description that Python is a strongly-typed, dynamically typed language with optional static type-checking applied at build-time via the `mypy` tool. As a counter example, C is a weakly-typed, statically-typed language in that you can you write something like `int a = 1; float *c = &a;` without experiencing either compile-time or runtime errors.\nWe converted all of our scala to python. Faster implementation in terms of engineering time. Easier to hand off to different engineers. Basically python is more flexible. Performance gain or costs based on language is minimal compared to the labor costs.\nBig one right here. Engineer time is really the most expensive resource. If scala causes a 10x increase in developer time but only 5% savings over some timeframe in execution time then it would take a pretty long time for the engineer time to be cheaper than otherwise.\nThis is something everyone agrees on on the internet as an aim but I'm always very dubious on how people are counting \"engineering time\". I do a lot of python and I see a lot of time being burnt on making python to stuff that's little to no effort in 'hard' languages. E.g mapping a domain totally with case classes and matching or building binaries that can run in a bare container. But there's lots of code written to get to the same point so it's \"productive\". Its definitely more productive for trivial work but the drop off when teams start doing less simple stuff and you need to start relying on what's come before is really noticeable. It might just be that if you're running a team in C++ or Scala or whatever you're probably working on harder problems in the first place and changing the language isn't going to make it easier.\nAlso Scala is basically a dead language. Nobody is using it for new things anymore. FP features are common in many languages now, and LLVM has reduced the big value proposition of the JVM. Spark is the biggest Scala app out there, and it wouldn't even be written in Scala if it was being developed today.\nThe heavy lifting is done by Spark, which is written in Java. The tiny overhead of Python controlling everything makes no noticeable performance difference. It may be an issue if you need to use a UDF Also a lot of esoteric documentation is only available for Python and Java, not Scala Source: recovering C++ programmer, now data engineer\n> The heavy lifting is done by Spark, which is written in Java. This is by far the key point. People talk about the performance impact as if spark is somehow running *in* Python, and that just isn't the case. There are two areas that Python can significantly impact performance, that is with Python UDFs and dynamically generating very large dataframe execution plans. For UDFs you can often convert them to spark functions or spark sql. If you can't do that then you can optimise the data de/serialisation by having spark use Arrow (spark 3.5+). If that is still too slow you can potentially write that part in scala and have spark install that. For the dynamic generation of large dataframe definitions... this only really comes up if you start getting towards a thousand pyspark function calls and even then you're only talking about a few seconds of runtime. If the data processing runs for minutes at a time you're not really going to notice this 1% factor on total runtime. And the benefits to using Python are huge. You get so many other tools and integrations for being able to easily orchestrate things, or to print outputs, or run other logic based on results. It makes the development cycle so much easier.\n> The heavy lifting is done by Spark, which is written in Java. In Scala. Scala does use the JVM, but coding with Scala and Java is quite a different experience, especially 10 years ago when Spark started. See developer information mentioning mostly Scala and SBT: https://spark.apache.org/developer-tools.html See GitHub statistics: Scala 66.3%, Python 16.4%, Java 6.9%... https://github.com/apache/spark\nSpark is written in scala 3.5 is using scala 2.13 i m not wire where this Java comes from They are working a new engine photon for spark which is in c++\nPhoton is the proprietary databricks engine that uses same API of spark.\nWhoa, just realised Apache Gluten and Databricks Photon are two different things trying to accomplish the same thing\nUdfs are quick on my big datasets as long as they are simple functions and not using entire data frames as input parameters, which Ive been cleaning up over the last couple weeks. Spark table joins are there for a reason people\nHow do I get a C++ job without much experience ?\nTheres only one book you need for your entire career. Its called \nHaha nice trick.\nShow me the CREDS.... dbutils.secrets\nC++ is a language on decline. Only high frequency traders and legacy projects use c++ these days. And the legacy projects are disappearing Learn c, rust or go if you want to learn something fast\nThanks. I know some C and use it in side projects. It's just difficult to get a job without a lot of experience. BTW not sure why you get downvoted.\nUse the right tool for the job. The reality is that the vast majority of companies and most data pipelines dont need that boost in speed. More people are familiar with Python and it has a ton of libraries that can help with common tasks and it does the job good enough in most cases and the tradeoff in complexity isnt worth it. Now if there is a situation where speed really does matter AND building something with Scala vs. Python will make a big difference AND it will deliver value to the organization then yeah it probably should be looked at. But all of those things arent true most of the time.\nApart from others said - team compatibility is nice to have. If a project has DE/DA/DS/SWE and they all use one language its much easier than when everyone is using something niche.\nIf you're managing a data engineering team and/or product one of your biggest concerns will be either scaling up a team or maintaing smooth operations while dealing with staff turnover. Good data engineers are rare enough to find as it is, so you don't want to make the hiring process harder than it needs to be by requiring rarer skillets and shrinking the potential pool to draw from. If the market provides many times more DEs sufficient at Python + SQL than Scala, you need a damn good reason why the latter is so important to have.\nThe first edition of the High-Performance Spark book does state that you should learn and use Scala I will be curious to see if the next edition out this year keeps to that. In any case Python is all over the place we need to interact with, eg. airflow, dbt, the ML stack and Scala is nowhere else so I've never seen anyone feel the need to reach for Scala.\nHave you ever dealt with scala and java? De favors fast iteration and scala does not offer it. Also rarely does scala performance really matter for most use cases\n>have you ever dealt with Java and Scala For the past 4 years on a daily basis and I love it >scala does not offer fast iteration That sounds more like you did not have enough experience in Scala. We don't have any problem like this in my team.\nOr it means you dont have enough experience in Python.\nAs someone who has 8 years of experience with python and now works mostly with spark Scala - the static typing really did manage to make a convert of me too.\nStatic typing is a tiny benefit imo, if you write good documentation and tests, it should prevent most major bugs Industry is overwhelmingly python and Scala is losing users but do whatever you like\nNever said anything about Python, I said it's false that Scala \"has slow iterations\"\nI mean, python is so much easier and faster to code in.... Plus python has a horde of ML libs that basically use C under the hood, along with dataframe libraries like pyspark, polars and duckdb that use c, java or rust underneath. Python core devs are making the core language faster and use less memory since python 3.11 and this is their focus for the foreseeable future.\nThis is the thing. The ecology for python around data engineering and predictive /ai workflows is extremely rich, and it's just not the same for Scala. Python skills fit in more places around these environments.\n90% of de is sql. Python enables fast iteration and very easy syntax. Engineering cost is the bottleneck, execution speed/cost is not in 99% of cases.\n> 90% of de is ~~sql~~ _relational model_ FTFY. You can write relational model stuff using Polars, Pandas or even PySpark. Not much SQL required.\nThis is the primary challenge with the scalability of DE. Python is great because of what you can do, but just because you can do something in a manner doesnt mean you should. Too much data engineering is trying to perform ETL using substandard processes. If your use case is a one-off analysis? Thats perfectly fine. But Ive seen way too many organizations try to build production-level ETL processes completely ignorant to performance constraints, high availability, failover and cutover, etc. Just because you can doesnt mean you should. And thats the issue is that too many folks are learning to be data engineers and only taught how to leverage one tool. So they are running around using Python for everything when Informatica, or Boomi, or Mulesoft, or Fivetran, or stored procs, etc are the better option.\nYou can basically be 75% brain dead and make python work is why.\nHave used both for an equal amount of years. Selectively on Python now due to other tasks being written in it (Airflow orchestration and some other DE work). Its also much easier to teach to juniors, very little people pickup Scala unless its needed (position/project) or explicitly taught. As others mentioned performance differences are extremely negligible and while documentation somewhat sucks all around for advanced concepts, I do find more discussions around Pyspark.\nThe overwhelming majority of companies have extremely simple requirements for DE. Most are nothing more than the most basic implementation of an ETL. If you have a real, complex pipeline in a huge project, Scala will blow Python out of the water\nMeta/Para-problems. You can build using the **MOST APPROPRIATE TOOL** or you can building using the **MOST SUPPORTED TOOL**. Think about that from a tactical perspective, this would favour the most **appropriate** tool, but if you are being strategic, you would use the most **supported** tool. What do I mean by strategy and tactical? Tacticians concern themselves with Manoeuvres, Objectives and measures. Strategists concern themselves with describing what it means to be successful. It is often in abstracted terms which attempts to align the business of operating with the most applicable frameworks. An Aim is a Strategic **qualitative** measure of success. It is a descriptive way of talking about succeeding as a business An Objective is a Tactical **quantitative** measure of success, when you tick all of the objectives, the aim should be met. This is why it is so important to have a good strategist, who understands the connection between the strategy and the tactics. *The* ***aim (strategic goal)*** *of a game of chess is to checkmate the opposing king, but blundering the king away (****tactical action)*** *was not conducive to that* ***aim***. If you fix an issue, and then you go away, other people are left holding the bag on your fixes... the bag of tools you have set up. Also, organisations can get *Corporate Amnesia*, which means you will be dealing with colleagues solutions to problems. Just ask yourself, would you support your colleagues COBOL script that does basic file moves or would you be inclined to change that for something more comprehensible. Now if you have the option to change it with no impact, your sitting pretty, but if that COBOL is a FUNDEMENTAL BUSINESS CRITICAL PROCESS... whereby the business cannot function without it, you're in for a world of hurt. So in the end, which one will you use?\nUncommon opinion. Scala 3 syntax looks like it could compile a python program, with minor modification. What do you think ?? I really enjoy writing Scala. Python admittedly is pretty easy to use. I like types and typesaftey, functional programing, compilers. There is a little support for that stuff in Python (aside from compilers). But IMO Scala feels like a more well engineered language... But I will work with what my role dictates unless it's my choice.\nI completely second this. I enjoy writing Spark code in Scala way more. Code feels much more robust compared to Python. And I dont get these arguments Scala is hard to learn/code. I have not been Java developer and Scala could not feel easier.\nIve worked with spark for both and years ago scala was the clear winner do to api completeness but scala had a learning curve that python does not. Now the Spark apis for python basically are enough for most teams and python is much easier for folks to reason about\nMy company is migrating all Scala pipelines to PySpark, in our country it is easier to hire for Python skills than Scala.\nScala is a huge pain in the ass to write in compared to Python. Can I do both? Of course. Do I want to write in Scala? I don't get paid enough\nBecause Java must die. Please kill it\nWhoever downvoted this is a Java narc\nAgreed. Kotlin, C#, and Scala are all better than Java.\nBoth Databricks and Microsoft Fabric has their own C++ implementation of the Spark runtime. So I'm not sure that scala/jvm is involved in the heavy lifting anymore.\nIts easier and cheaper to find competent pythons developers .. companies care about costs as well\nBc I know python\nMost of us are not in big tech but in shit tech. No one cares about performance here. If the pipeline are somehow robust, that's already a win.\nIn general python delivers value faster than any other language and the speed shortcomings can be overcome with bindings.\n1. Python is easy no data types no checks and easy to get started 2. Existing exciting world of wide variety of libraries 3. People who use it most, may be 80% of them never push that code to prod so it never fails hence they keep promoting it more 4. Python libraries in production has a bunch of overhead and its not that well memory optimized 5. People want it fast and python can give you that but for long run and safer pipelines type safety is important to have control. Python is nice i am personally using it a lot my project. But for production grade pipeline which i can rely on & blame the source who needs to be blamed for the bad data. i prefer more type safety language i.e scala Again many people they might not even need that saftey since the product will not even survive more than 6 months\nScala Is too difficult for most developers to handle.\nSame reason why python libraries are written in C for performance and efficiency like Numpy, etc rather than asking people to directly write their ETL code in C.\nMost business decisions are made around money and convenience, not how performant the software is. Python is also pretty powerful, with containers you can essentially scale up any python app within second, make it async and youre flying. Most of the python libraries you will use are written in C or Rust. The differences in performance wont really be seen unless you have a system you need to optimize for throughput. Most if not all networked apps are bottlenecked more by network latency than throughput. So making you app async is in my experience usually a bigger performance win than making the code itself faster. Spark IMO is great for complex transformations or very large datasets, but if Im just extracting and dumping for data batch/stream data for ELT Im reaching for Python 9/10 times.\nwith python i can create a data processing pipeline, creating a model, show the results on a dashboard all with one language. Lately ive been using the Ray package for distrubted applications which is wayyy easier than trying to use spark or scala.\nEasier to implement ig. Idk Im just learning pyspark\nDefinitely if I worked with spark more than 25% of my day I'd use Scala. Anything you need to run on the workers (a UDF) needs to run in the JVM. Performance will be hot garbage if it needs to spawn a python process and serialize all the data into it.\nI think it's basically that tons of people are familiar with Python, and it's both simple and powerful enough to do most things. So given that, it's kind of the perfect language for most Orgs. This is also kind of why SQL is so dominant in its space IMO.\nEasy to get talents. It's a bit tougher to be good at Scala.\nFrom my previous experience as a DE, our job postings were created by the project manager they have no idea how any of that works. They just know the team uses python, aws, and this thing called pyspark\nBecause Python is ubiquitous in tech\nMaintainability.\nEasier to hire , easier to build, easier to integrate. Far far far richer ecosystem . Already built interoperability with production systems and systems generally.\nJack stop trying to make scala happen\nYeah, it's weird how everyone's obsessed with Python. While it's great for prototyping and data exploration, it can be a bottleneck for large-scale data processing. PySpark and Beam are cool, but they have their limitations, especially when it comes to performance. Scala might be less \"trendy,\" but it can be a game-changer for serious data engineering. Maybe it's time to reconsider the language choice and focus on performance and scalability.\nHuge ML python codebase. My udfs are python functions from internal libs, the same ones everyone use\nPython isnt the best tool for any job, but its the second best tool for every job. Someone with python chops is going to be a lot more broadly useful on a team than Scala\nSpark python sucks\nYou just don't need Scala. It brings nothing better than python, but it bring much more overhead. And people already know python. So why Scala? I used Scala for Spark 4-5 years ago. Now it's not necessary.\nFor simple, easy stuff it's not. I've run into numerous situations though where it was needed. Strictly it's not needed but the performance of pyspark run on the workers (like a UDF) is hot garbage--dramatically worse. I've seen it. If your team is a heavy user or spark it's worth having one person that can write Scala UDFs.\nJust curious, what complex task do you need scala UDF? I still had one scala udf on custom hashing function, there is another one I tried to convert to scala but relies on a 3rd party python lib so writing in scala is just not worth it.\nThere is no performance difference between python and scala spark when using native spark functions with dataframe/SQL API. Only for UDFs (which you should avoid where possible) Scala has a slight edge over pandas UDFs. Then consider there are many more python developers out there than scala developers, and it just makes much more sense to go with a Pyspark ETL approach than Scala. Python also brings advantages in terms of: richer ecosystem (ML, analytics, etc) and higher developer productivity. There is no real advantage of Scala functional programming capabilities for data engineering/ETL.\nScala? Where do you find the people? What do you use when you create pipelines that do not run off Spark? Data and data engineering is hard. Finding data engineers that have workable knowledge of Python and git instead of Informatica and SSIS is even harder. Scala. lol.\nYou...do realize Spark is written in Scala, right?\nYes but there arent that many Scala developers, and youre not writing Spark source code youre using a library to interact with the spark engine. Once the Python API became performant and mainstream almost everyone preferred it to the Scala API because it was so easy to get developers and achieve similar performance. Scala is a nice language but its much more niche now than it once was. It used to be much more popular.\nbut the guy I'm replying to was saying \"What are you gonna do with scala if you need to use Spark\". My reply isn't about libraries, it's about how Spark IS written in Scala, so that's what you're going to do...you're going to use the language Spark is written in to develop the pipeline\nMy point is not everything data engineers create runs on Spark. Data Engineers can do almost everything using Python, whether a Spark pipeline or not.\nIt is easier to replace a python programmer.\nCurrently I am working with Spark + Structured Streaming + Kotlin.\nWhat do you write in Kotlin ? And what do you mean by Structured Streaming ?\nThe spark jobs are written in Kotlin. https://spark.apache.org/streaming/\nTo an engineer, efficiency and performance are THE goals. To a business person efficiency and performance are considered enough if it lets them do what they want to do in the time they have to do it. An engineer gets excited by tuning a process from 10s down to 10ms. A business person thinks 10s is fine. For a business person features and reliability are THE goals. Python allows features to be developed at pace. Its one of the pervasive languages in the major clouds, Node.js and Java being the other 2. Of course, slowness in the cloud incurs cost. As long as it is budgetted cost and within tolerances the business couldn't give a toss. You'd have to achieve a dramatic cost saving, 6+ figures to move the dial. Anything less will be blown on C suite bonuses.\nDevelopment time and training ease of Python > performance speed of Scala.\nGenerally Python is a good human interface but the jobs still leverage the spark engine underneath, thats why pyspark exists, so the data is not processed in Python. That would be silly if it were processed in the Python runtime given its an inefficient language. Also pythonic duck typing is advantageous. Dealing with typing issues is a pretty mundane and awful issue when it comes to data in RDDs within messy or raw data. I for one hate writing scala with a passion but it has its place. I avoid it when I can but thats just me.\nPython is easier to understand and cheaper to get people for\nThis question has been asked too many times on this sub, please stop being lazy and actually search the sub first ... Which performance constraints are you referring to (or are you just posturing?)? UDFs? Even these aren't so bad now especially if you can use vectorized UDFs with pandas... Furthermore, python is ubiquitous in the data science space which is often the customer of DE. Also, DE often have stakeholders across SWE from which they consume data. Scala isn't well known in either of these spaces. Having a language that everyone outside of DE can understand means you can have an open code base preventing DE from being the usual bottleneck causing most data features to take 1-2 years to be implemented. The organisational time savings are worth far far more to the business than the (alleged) performance savings of scala when using spark (besides some specific cases there aren't any)."
    }
]